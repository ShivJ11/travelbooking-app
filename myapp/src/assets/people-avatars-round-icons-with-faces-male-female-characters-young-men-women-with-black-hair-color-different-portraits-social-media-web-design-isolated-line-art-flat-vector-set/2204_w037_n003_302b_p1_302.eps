%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/8/2022
%%BoundingBox: 0 0 634 400
%%HiResBoundingBox: 0 0 633.0491 400
%%CropBox: 0 0 633.0491 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 12540 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD96FFA8CBA8FFA8CBA8FD11FFCBFFA8FFA8
%CBA8FFA8FD11FFA8FFA8CBA8FFA8FFA8FD0FFFA8FFA8CBA8FFA8CBA8FD11
%FFA8CBA8FFA8CBA8FFA9FD12FFA9FFA9FFFFFFCBFFA9FD11FFCBFFCBFFCB
%FFA9FFA9FD0FFFA9FFA9FFA9FFFFFFA8FD11FFA9FFCBFFFFFFA9FFA9FD0F
%FFA9FFA8FFFFFFCBFFA9FFCBFD10FFA8FFA9CB7DFD04A8FFA8CBA8FD0BFF
%A8FFA82752FFA8A8A8FFA8CBA8FD0DFFA8CBA8FFCBFF7D527DFFA8FFA9FD
%0BFFA9CBA8FFCBA8525252CBA8FFA8FD0DFFA8FFA8FFA27D52A8A9FFA8CB
%A8FD0EFFA9FFA9CB27FD04F8CBA9FFA9FD0EFF7DF8F85227F8277DFFA9FF
%A8FD0BFFA8FFA9FFA87D27F8F877FFFFA8FD0DFFA9FFCB7DFD04F827FFCB
%FFA9FD0BFFA9FFA8FFA8FD04F8A8CBFFA9FFA9FD0CFFA8FFA8FF52F8F827
%4AA0A8CBA8FFA8CBA8FD07FFA8FFA8FF7DFD06F827A8FFA8CBA8FD09FFA8
%CBA8FF7DFD04F8207DFFA8CBA8FFCBFD08FFCBA8FFA8FF2726FD04F827A9
%A8FFA8FD09FFA8FFA8CBA9522026F8F8F8A8A8FFA8CBA8FD0AFFA9FFCBFF
%FF7DF8F86FC29AFFA9FFCBFFA8FD09FFA9FFA9FF7DF8F8F8209A75FFCBFF
%A9FD0BFFA9FFFF52F8F8F87575FFCBFFA9FFA9FD09FFA8FFCBFFA852994B
%FD04F827FFCBFFA9FD09FFCBFFCBA9279A7575F8F87DFFCBFFA9FD0BFFCB
%A8FFA8FF7D4B4B9A7576A8FFA8FFA8CBA8FD07FFA8FFA8FFA827F84B4A9A
%7575A8FFA8CBA8FD09FFA8CBA8FF7D4B204B9975A2FFA8CBA8FFA8FD07FF
%A8CBA8FFFF7EF89A759A4B4BF8F87DFFA8CBCBFD07FFA8FFA8FF7D4B6FBC
%994B207DCBFFA8CBA8FD0AFFA9FFA8FFA9CA6FC2C29A75FFA9FFA8FFA9FD
%09FFA8FFFF52F84B75C2BC9A99CAFFFFA9FFA8FD07FFA8FFA9FFA9FF6F9A
%C2A099CAA9FFA9FFA8FD09FFA9FFA9FF274B75C2C29A6FF8F87DFFFFA9FD
%07FFA9FFA8FFFF536F9A9AC299757DFFA8FFA9FFCBFD08FFA8FFA8CBA8FF
%A8C999C26FC2A8FFA8CBA8FFA8FD07FFA8CBA8A8F8F8F876A0BC6FC227A8
%A9FFA8CBA8FD05FFA9CBA8FFA8CBA8C99AC275C2A8FFA8FFA8CBA8FD07FF
%A8FFA8FF4CF84BBC6FC26F20F8F8F8A8A8FFA8FD05FFA8FFA8CBA8FF004A
%99C29A75F87DCBCBA8FFA8FD0AFFA9FFA9FFCBFFCAC2759AC9FFCBFFA9FF
%CBFD09FFA9FF52FD04F87675A04BF800FFCBFFA9FD07FFA8FFCBFFCBFFFF
%C36FA0C3FFCBFFCBFFA9FD09FFCBFFA927F8F8759A9976FD04F87DFFA9FD
%07FFA9FFA9FFCB7D529A6FC2512EA2FFA9FFCBFFCBFD08FFA8FFA8FFA8A9
%84A9A09A76A984FFA8CBA8FFA8FD07FFA8CBCB53F8F80535A0BB6F5205F8
%77FFA8CBA8FD05FFCBCBA8FFCBA8537EA1BC4B7D7EA9A8FFA8CBA8FD07FF
%A8FFA8FF2726757C4BA177A07527F852CBFFA9FD05FFA9FFA8CBA8FFFFAF
%76C2C184608584FFA8FFA8FD0AFFA8FFA9A97E857FFFA8FF85857EA9CBFF
%A8FD09FFA9FF52F835616084A1A78461287DFFFFA9FD07FFA9FFCBA8282F
%287DA1C9282F28A8CBFFA9FD09FFA8FFFFA8A0C8A17E77A1C2C9A04B7DFF
%A8FD07FFA8FFA9FFCAAF60A19AA15A615A6184FFA8FD0CFFA8855A855A85
%84857E855A7F5AA9A8CBA8FD07FFA8FFCB7E2F615A60366136605A617EFF
%A8FD09FFA8A8282F282F282F282F282F28A8A8FFA8FD07FFA8CBA8CBC2C8
%A0A153A19FC8A0C8A0CAA8CBA8FD07FFA8FFA8A93660777776605A605A60
%84FFA8FD0AFFA9857F857E857F8585857F857E8585FFA9FD09FFCBFF6061
%5A615A8560615A856061A8FD0BFF532F2E532853285328532E2F28A8FD0A
%FFA9FFC9C8C2C9777E7DC8C2C8C2C8C9FFCBFD09FFCBFF5A615AA177A15A
%615A855A85A8FD0BFFAF5A857E855A857E857E857E857E85A8FD0BFF8460
%5A605A605A605A605A845A84A8FD09FF7D28282F282F282F282F282F282E
%28A8FD0AFFA8C8C2C8A0A1777DA0C8C2C8A0C8A8FD09FFA8FF84605A7E76
%7776605A605A605A85FD0CFFA95A857F857E8585857E8585A95A85FD0AFF
%A9615A615A615A615A615A617D845AFD0AFFA8282F285328532853285328
%5328287EFD0AFFCAC2C8C2C8A0A17DC8C2C8C2C8C1CFFD0AFF84615A617D
%A1777D5A615A615A6185FD0DFFA95A857E855A857E855A857E7FA8FD0BFF
%84605A605A605A605A60367D59AFFD0BFFA82828282F282F282F282F2828
%7DFD0BFFCAC29FC8C2C8A0A0C2C8A0C89FC9FD0BFFAF5A605A7D767D775A
%5A605A5A84FD0FFFAF85857E8585857E857FA9A9FD0DFFA9615A615A615A
%615A617EFD0EFFA82E2F28532853282F285384FD0DFFCAC9C2C8C2C8C2C8
%C2C8C8CFFD0EFF606077A1777D5A615A85A8FD12FFA9857E85858584AFFD
%10FFAF855A605A605A8584FD11FF7D53282F2853537EA8FD0FFFCFCFC9C8
%A0C8C2C9C9FD11FFA8A277A177605AA9A9FD16FFAFFD17FFAFFD19FFA9FF
%A8FD17FFCFFDFCFFFDFCFFFD3AFFA8FFCBFD15FFCBFFCBFFA8FD17FFA8FD
%17FFA8FD17FFA8FFA9FFA8FD16FFA9FFA9FFA9FD13FFCBFFA9FFA9FFCBFD
%13FFCBFFA9FFCBFFCBFD13FFA9FFA9FFA9FD13FFA9FFA9FFA9FD14FFA8FF
%A8FFA9FFCBFFA8FFA8FD0FFFA8CBA8FFCBFFA8FFA8FFA8FD0DFFA9FFA9FF
%A9CBA8FFA8CBA8FD0FFFA8FFA8FFA9FFA9CBA8FFA9FD0DFFA8FFA8FFCBFF
%CBFFA8FFA8FD10FFCBFFA8FFFF7D287DCBFFA8FFA9FD0DFFA8FFFFFF5352
%52FFA9FFA9FFCBFD0BFFA9FFCB7D27A8FFFFCBFFA9FFA8FD0DFFA9FFA8FF
%A9A853FFFFFFA8FD0FFFA8FF7D52527DA8FFA8FFA9FD0EFFA8FFA8FF7D27
%F8F8F852CBFFA8FFA8FD0BFFA8CBA8A827F8F8F827FFA8FFA8CBA8FD09FF
%A8CBA97DF8F8F8FD04A8FFA8CBA8FD0BFFA8FFA8FF5227F8F827527DFFA8
%FFA8FD09FFA8FFA8FFA827FD04F87DFFA8FFA8FD0EFFCBFFFF7DF84B20F8
%F852A9FFCBFFA9FD09FFA9FFA9FF274B26F8F8F87DFFCBFFA9FD0BFFA9FF
%52FD04F827F877FFFFA9FFA9FD09FFA9FFCBFFFF77FD05F852FFFFCBFD0B
%FFA9FFFFA8F875F8F8F852A8FFFFFFA8FD0CFFA8FFA8FFA84B999AF8F8F8
%A8A8FFA8CBA8FD07FFA8FFA8FFA8274B99F8F8F827CBFFA8CBA8FD09FFA8
%CBA9A8FD05F826F8FFA9CBA8FFA9FD07FFA9CBA8FFA8FF7E4B6FF8F8F827
%FFA8FFA8FD09FFA8FFA8FF52269926FD04F827A8CBCBA8FD0AFFA9FFA8FF
%CBCA9A9A999A6F4BA8FFA8FFA9FD09FFA8FFFFA8207699C26F4B277ECBFF
%A9FFA8FD07FFA8FFA9FFCBA8F8F8F82799207EFFA9FFA8FD09FFA9FFA8FF
%A9FF9A9A20F8F827A8FFA8FFA9FD07FFCBFFA8FFCBA84B9A9A9A6F4BF8F8
%F8CBFD0BFFA8FFA8CBA8FF7D759975BC9A6ECAA9CBA8FFA8FD07FFA8CBA8
%FF7E27997599C26F4BF827A2FFA8CBA8FD05FFCBCBA8FFA8CBA976204B6F
%994BA8A8FFA8CBA8FD07FFA8FFA8CBA8FFA89A75C2756F4BA9A8CBA8FFA9
%FD05FFA8FFA8CBA8FFA8C36F9AC29A4BF8F8F827FFA8FD0AFFA9FFA9FFCB
%FFA1C2759AC2CAA9FFA9FFCBFD09FFA9FFFFA8F8C299A09A76F8F8F827A8
%FFA9FD07FFA9FFCBFFA9FF9A99C2C26FC3A9FFCBFFA9FD09FFCBFFA9FFCB
%CB9A76BCC275CBFFFFA9FFA9FD07FFA9FFA9FFCBFFA1C2BCC27E52F8F8F8
%27A8FFCBFD08FFA8FFA8CBA8FFA9FF9AC299C3A9FFA9FFA8FFA8FD07FFA8
%CBA8FF27F820757599FD05F852CBCBA8FD05FFA9CBA8FFA8FFA8CA9AC299
%9AC3FFA8FFA8CBA8FD07FFA8FFA8CBA8FFA8C3999A9ACAA8FFA8CBA8FFA9
%FD05FFA9FFA8CBA8FFA9A97675757D00FD04F8A8A9FD0AFFA8FFA9FFA8FF
%FFA14B75A1A9A2CBA8FFA9FD07FFCBFFA9FFA826F82776C2A12E2727F8F8
%F8FFCBFD07FFA9FFA8FFA9FFAFCA75999AFFA9FFA8FFA9FFCBFD07FFA8FF
%A9FFA8FFA8756FC3A9FFA8FFA9FFA8FD07FFA8FFA9FFCBA9A1A099C29952
%0027F827A8FD0AFFA8CBA8FFA8FFA8A97D77527D7677767D77A2A2FD07FF
%A8FFA8A928535AFFA8A953545353F8F8A8FD07FFA8FFA8CBA8FFA8CAA1C2
%6FA0A8FFA9CBA8FFA8FD07FFA8CBA8FFA8A95A8499C2A0845A85A8FFA8CB
%A8FD06FFCBA8FFA87E0676BBC2BBA04C2F28277DFFA8FD0AFFA9FFCBFFA8
%A277A2A2A277A177A1777D76A2FD0AFF597E537E7E857E5A537E545A28FD
%09FFCBFFA9CFC9C8C1C9A8CAA7C8C8CAA9FFCBFD09FFA9FFCBA97E85A2A7
%A1A87E857E85A9FFA9FD07FFA9FFFFA828532E7776772E2F28532FA9CBFD
%0CFFA8FFA177767D7677767D7777767D7777A2FD07FFA8CB5353535A535A
%FD05535A53547EFD09FFA8C99FC8C2C87C615A60A0C8C2CAA9FFA9FD07FF
%A9CBA8A95A857E847E857D847E855A85A8FD09FFA8FF282F282F282F282F
%282F282F53CBA8FD0CFF7D7D777D77A1777D77A1777D777D7DFD09FF5954
%535A535A7E7E535A535A535A537EFD09FFC9C2C8C2C8C2A75A615AC9C2C8
%C2CAA9FD09FFCBA97E857F857E857F857E857F857E85FD0AFF7D2F535328
%53285328532853282F7EFD0CFFA277767D7677767D7677767D767776CBFD
%09FF7E2F5A5353537EFD08537EFD09FFA7C2A0C8A0C87D605A617DC8A0C8
%A0FD0BFF7E7F5A857E855A857E855A855A7F84FD0AFF532853282F282F28
%2F282F282F067EFD0DFFA17D77A177A177A177A1777D77FD0CFFA8545A53
%7E7E5A537E535A535A84FD0BFFC9C8C2C9C2A75A856084C2C8C2CFFD0BFF
%AF7E857F857E857F857E857F8585FD0BFF84532F5328532E5328532E2F28
%7EFD0FFFA17D7677767D7777767777CBFD0DFFA953535385FD04532F537E
%FD0DFFC9C89FC87D615A615AC2A0CFFD0DFFAF7E855A855A857E855A85A9
%FD0DFF84592928282F282E2829287EFD11FFA8A87D7D76A17DA2A8FD11FF
%7E7E5A5A535A59A8FD11FFCAC2845A605A85A8FD11FFA9A97F857E8585A9
%A9FD10FFA8535328532F597DFD16FFA8CBA8FD17FFA8FFA8FD15FFA8FFA8
%FFAFFD15FFA9FFA8FD15FFA8A9A8FDFCFFFDFCFFFD9FFFA9FFA8FFFFFFA8
%FD13FFA8FFA9FFA8FFCBFD11FFA8FFA8CBA8FFA8FD13FFA8FFA8FFA8FFA8
%FD11FFA9FFA8FFA8CBA8FD14FFA8FFA9FFA25253FFA8FD0FFFCBFFA9FFCB
%FFA8FFA9FFA9FD0FFFA9FFCBFFFFFFCBFFA9FD11FFA8FFFFFFA9FFA9FFA8
%FD0FFFA8FFCBFD05FFA8FD12FFA8CBA8FFA927F8F87DFFA8FFA9FD0BFFA8
%CBA8FFCBA8F8277DCBA8FFA8FD0DFFA8FFA8A87D7D7DA8A8FFA8CBA8FD0B
%FFA8FFA8FFA27D7DA8CBFFA8CBA8FD0DFFA8CBA8A82752527DA8FFA8FFA8
%FD0EFFA9FFA9FFA852F8F8F87DFFFFA9FD0DFFA9FFFFFFFD04F87DFFCBFF
%A9FD0BFFA9FFFFA8FD05F8A8FFFFA9FD0DFFA9FFFF52F8F8F8527EFFA9FF
%A9FD0BFFA9FFA9FF7DFD04F87DFFFFCBFFCBFD0CFFA8FFA8FFCB52F8F820
%217EFFA8FFA8FD09FFA9FFA8CBA8FF27FD04F8A8A9FFA8CBA8FD09FFA8CB
%A8FFA9766F27F8F800CBA9CBA8FD0BFFA8FFA9A8F84BF8F8F827A8FFA8FF
%A8FD09FFA8FFA8CBA8A84B4BF8F8F8A8A9FFA8CBA8FD0AFFCBFFA8FFFF52
%F8F84BC2A1FFA9FFA8FFA9FD09FFA8FFCBCBF8F8F84B6F27A9FFA8FFA9FF
%CBFD07FFA9FFA9FFA8FFA1C24BF8F8F852FFA9FFA8FD09FFA9FFA8FF7E20
%994BF8F8F8FFCBFFA8FFCBFD09FFA8FFA9FFA8A075F8F8F828FFA8FFA9FD
%0AFFA8FFA8CBA8FF275152A1A8CAA8FFA8CBA8FFA8FD07FFA8CBA8FF7EF8
%F8F86F9A26A8A8CBA8FFA8FD08FFCBA8FFA8CBA89A6F9A204B2052A9FFA8
%CBA8FD07FFA8FFA8CBA8A827756F4B204BA8FFA8CBA8FD09FFA8CBA8FFA8
%CA4B9A754B207DA9CBA8FFA8FD0AFFA9FFA9FFFFA176CAC9A1A1FFCBFFA9
%FFCBFD09FFA9FFCBFF4B759A9A759A76FFA9FFCBFFA9FD07FFA9FFCBFFA9
%FF9A9ABCC3759AA8FFCBFFA9FD09FFCBFFA9FFFFA16FA0C29A6FCAFFFFA9
%FFA9FD07FFCBFFA9FFCBFFCA9A75C2999AA8FFA9FFCBFD0AFFA8FFA8CBA8
%FFA06FBBC26FC2A8FFA8CBA8FFA8FD07FFA8CBA8FFA9A16FC2999999CAA9
%CBA8FFA8CBA8FD05FFCBCBA8FFA8FFA8C2999ABC9AA0FFA8FFA8CBA8FD07
%FFA8FFA8CBA97D6FC24BC2994BF8CBA9CBA8FFA9FD05FFA9FFA8CBA8FFA9
%CABCC299C3CAFFA8CBA8FFA8FD0AFFA8FFA9FFA9FFC9C299C2C3FFA9FFA9
%FFA8FD07FFA9FFA9FFA8FFCACABC9A99C9A9FFA9FFA8FFA9FD07FFA9FFA8
%FFCBFFC3C29A9A9AFFFFFFA8FFA9FFCBFD07FFA8FFFFA8F8279AC2754BF8
%F853FFA9FFA8FD07FFA8FFA9FFA8FFFFA84B99A1FFA9FFCBFFA8FD0AFFA8
%CBA8FFA8CBA8FF99754AA8A9CBA8FFA8CBA8FD07FFA8FFA8CBA8FFA9A199
%9AA1FFA8FFA8CBA8FFA9FD05FFA8FFA8FFA8FFA8A84B6F997D537EA8FFA8
%FFA8FD07FFA8CBA8FF28F8F8276F99F8F8F852A9FFA8CBA8FD05FFCBCBA8
%FFA8CB7E7E7C9F99C2537E7EFFA8CBA8FD0AFFA8FFCBFFA88584C9BCC284
%85A8FFCBFFA9FD09FFCBFFA9FFA9A9A19A75A17DA8A8FFA9FFA9FD07FFA9
%FFA9A8535328A1C2C3532F285353A9FD0AFFA9FFCB5226A0C3C9C327F8F8
%27FFCBFFA8FD07FFA9FFCBFF7E5A53C9A0C8C25A535A7EFFA9FD0BFFCBA8
%FF8460366060A88484366084FFA8CBA8FD07FFA8FFA9CB7DA176A0C2C2A0
%77767777A8A8FD09FFA853062F282F53A17753282F2828287EA8FD07FFA8
%FFA8CAA0C8C2C9C8C926F8F875C8CAA9FFCBFD07FFA8FF7E53535977537C
%7DFD04537EFFA8FD0AFFCBFF84615A615A615A615A615A6084FFA9FD09FF
%A9FF7D77777DA0A177A1777D777D77A8FD08FFA859282F2853287777A153
%2F2853282F067EFD08FFA8C9C2C9C2C8C2C8C2A04B76C2C8C2CACBFD09FF
%A85A535A535A535A535A535A537EA9FD0CFF845A5A605A605A605A605A60
%5A60A8FD0AFFCB7D777677767D7777767D7677767777FD08FFA9282F282F
%282F76777653282F282F2828A8FD07FFA9C9C1C8A7C8A0C8A0C8C2C8C2C8
%A0C29FCFFD08FFA87E2FFD0B532FA8FD0CFF855A8560615A8560615A8560
%615A85FD0AFFA8A177A177A177A177A177A177A177CAFD09FFA828532853
%2E7D77A1532F2853282F7EFD09FFCAC8C8C9C2C8C2C9C2C8C2C9C2C8C2CF
%FD0AFF535A7D7E537E535A537E535A53547EFD0DFF8436605A605A605A60
%5A605A5A84FD0BFF7D77767D767D7777767D777776A8FD0BFF7E282E2853
%777D7653282F282859FD0BFFC9C9A0C8C2C8A0C8C2C8A0C8C1C9FD0BFFA8
%537D5353535A5353535A535359FD0FFF855A615A615A615A605A85A9FD0D
%FFA2A1767D77A1777D767D77CAFD0DFFA8282928A177A1522F28537EFD0D
%FFCFC9C2C8C2C8C2C8C2C8C2CAFD0EFF53545354535A5353535A7EFD11FF
%AF5A605A6036605AA9A8FD0FFFA8A877777677767DA1FD11FF5353767D76
%53287EA8FD0FFFCAC9A0C8A0C2A0C9C9CFFD10FF7E7E53532F5A537EA8FD
%16FFA9FFAFFD15FFA8FFCAFD17FFCAFFA8FD15FFCFFFCAFD17FFA8FFA9FD
%FCFFFDFCFFFDFCFFFD97FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-08T18:38:08+03:00"
   xmp:ModifyDate="2022-04-08T18:38:08+03:00"
   xmp:MetadataDate="2022-04-08T18:38:08+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:7afeecdf-31cb-eb4a-a567-a11ba5829a5d"
   xmpMM:InstanceID="xmp.iid:7afeecdf-31cb-eb4a-a567-a11ba5829a5d"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="164"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVGa7t4TR3+&#xA;L+UbnCAStKP6Vtq9H+dB/XDwFNIiG5gm/u2BPh0P3YCKQqYFdirsVWSzRRLykYKPfCAqGbVbYHYM&#xA;fcAfxOHgKaVIr+2kNA1D4NtiYlaRGRQ7FXYq5mVQSxoB1JxVCvqdqpoCW/1R/WmS4SmnJqdqxoSV&#xA;/wBYf0rjwlaRKsrAFSCD0IyKG8VdirsVUJb62iNC1WHZd8IiU0pDVbYncMPcgfwOHgK0iYpopRWN&#xA;gw9sBCF+BXYq7FVKa6gh/vGof5epwgWqH/S1t/K/3D+uHgKaV4by3mNEb4v5TscBBCKVsCuxV2Ko&#xA;PULwxARxmkjbk+AyUYpAea/m3+ZNv+X3lNtcltWvbiadLSzt+XFWnkV3HN6NRQsbE7e3fJk0kvIv&#xA;LP8AzkL+b/mNEbS/KdlNFNKIkvC0qQruA3LlIK09jlEtTGJondvxaXLOPFGNh9IIXWhr8Y7jbfMh&#xA;pTmwu/XjIb+8Xr7jxyuQpiQisihSubhYIi53PRR4nCBavIfz883+b/Ln5f3WteXDTUI5okmufTWb&#xA;0IGJ5SBHDJ9riu6kCuWHYbMni2n/APOX/mCLQrK2n0WG+11WZLu7ZzFDIu3pssaDZ2r8W4Hh1oI8&#xA;agvcPyp/M3/HOmXbXWmyaRrGmvGl/YyEsAJlLxSxsQpKSKDTb7xQkwmJCwylExNEUXpOnXrchDIa&#xA;g7IT2PhjKLAhM8rQ5mCqWJoBuTiqSXd287+EY+yv8TloFMgHiP5h/wDOT3lPyrq9zo2n2UutajZu&#xA;0V2UcQW8cqGjR+oVkZmU7NRKA9+tAZUtqf5Ifmn+ZHnbzXqaa9pkdjoKWQurMpbyxUaSRVh4ySE8&#xA;1eP1DXvTamCGQS5MpQlHmCLe5Wl28D+MZ+0v8RkiLYkJ0rBlDKagioOVMW8VS3Ub1uRhjNAPtkfq&#xA;ycYpAeZfm/8AmHqvkzQ7R9G0ttV1nVLj6pYQkMYlfiXLycaMQAPs1HzFMOSYiLLZGEpGoiy+etG/&#xA;5yr/ADK07XK69FbX1isvC7sPREEiAGjLG67qw/y+WRE2BsGi+rvKfm/RPMmlQa1oF6l1aSgfEjAs&#xA;jUDGOVRujrXdTlnNWY2tws8QcbHow8DlRFMSq4FQt/d+hGFX+8bp7DxyURaQGLeZNetNC0O/1q+L&#xA;NBYwvPIq/bcqNkWvVnair7nLCaDJ8wXv/OUn5p6drCXWoaHa2+kysGisZIpVZoT8Q4XBb4mKEfHx&#xA;4/5PbKY5hLkWU8c4/UKfSvkzzfo/m7y7aa/o7s1ndA8VccZEdGKujjsysP4jbLgbYMw068Mo9KQ1&#xA;dRsfEZCUUEI3IIdiqRXbl7mRj/MQPkNsuHJkGDfm15Ii84+Um0xrZLqWGeO6t45GdV9RAy1JjZX+&#xA;y5GxyjUcXD6ebk6WOMyqfL9PweUW/k3TNKtdO0XR7R2jlcLLM6rMgSOZZpRI5UkO5HwbUqO2aHxp&#xA;SJJ5vUflYY4iMRt1+dm30SvLiOX2qb/POlDyB57IrT3K3aU/aqD9OCXJiU6ypileruTKidgtfvP9&#xA;mWQZB4J/zkx+a175T0S38v6Oypq2txyevOQGMNoPgYqDtylJKg9gG70OMipLyL8qvIfkzWrC31S4&#xA;+r3NzBRWtjdUuDcbt+8tCN0HE8WrQ91PXNVq8uSINcnddnafBkIveVX+Onu3+D2X8v8AzToPlrV4&#xA;rLW7qbT7rzH6UGm2t86OUNqojWNnjaRA0jSMQeW9QNjtk+z57kdE9rQAESbs9D3PZQSCCOo3GbV0&#xA;rIY25IrfzAH78oYIbUnK2pA/aIX+P8MlHmkJNlrJ87+dPyG8uyedL/Uby0K6bfzPdxyxzujyTzMZ&#xA;JY2Tjw4Cp48CpHv1Gp1mfJjJrk7rs/RYcwF8+u+/9nuZ7+UGijT59Qljhe3hkgtbdLeTgWRbUMi8&#xA;jHtVqsep+jD2fMkle1cIjGJ5dPgA9LzaulTjTHLWoB/YJX+P8cqlzYlFO3FGbwBP3ZFDHiSSSdyd&#xA;ycvZvmfzX+Ylr54/NpdO0wslr5ZhuEtfVKsl1cLPGlwyREdfREgj36gHYVzX6+Xo8r/H2uw7LjeX&#xA;zA/V+i0j87+Ufy/03QLXV7+yFpM0SQSm4MhuXJhYovCBvS+sMU+23w7H6MDBmySkYg3939jtNZpc&#xA;EICchXv58vLa/NCf84necbXSPOl5oV5OYotdhVbVT9hrqAlkBP7JZGcDxNB4ZuoF5kPs3SXImdOz&#xA;LX6Qf7clNJTTK2KS6g5a7fwWij6MtjyZB5H+f+t2FnpHl3S72QJbatrVqlyGNFMMFZTy/wAn1RFX&#xA;KdUT4ZrnTkaXh8WPFysPP/MnlzSJPKF1b62yRtEkRku7kgiQWgFJQIi8ioeVCFIcrtUVzRYskuMG&#xA;P4t6fPggcRE/Lc+XXbf9LO/+can0w+RL9dKZm0yPV7pLLly/uwkR25/FQkkiu/jnQYb4Rxc3lMvD&#xA;xng+no9dtXKXEbD+YV+R2OWHk1lPspYuxVjOsXlvp7yPcNSrEoo3Zq77DMnFjM9gieQRFlil35nv&#xA;5WIi4wxnbiByNPcn+GbGOjgBvu4MtXK9tkENA8p2OqT6xprzx6hw/cuXb0C+xblEPgdgvwq7qT75&#xA;r9N2THHIE7juPT9LsdV2xkyxrke8Xv7xdfYnWj+Y5Zp0t7sLVzRJRtv2BHvmXn0oAuLh4dSSakyr&#xA;T0LXaU6LVj9Ga+XJzCnWVMUr1dCJUfsVp9x/tyyDIPmv89/yuvvOH5m6dePOtto8GlxQ3MykNL6i&#xA;XE78FQ9CVkHxHbL8WnOQ+ThazWDFtzki/L/5eeTNDtpILPTlYTKEnklJkd+J5DkX5DqK7AZPWdmD&#xA;LECJ4SDz5uN2f23PBkMpjjiRVckj86fk75c1+Ay2jTWWqRoRBctLJMpIJIWRZCx47/s7j8McHZvB&#xA;j4Sbl31SdV20cuXiEah3Xf2voPys1zJ5c0sXMwuLwWsKXUwNeU6xhZDXb9sHKZRMTRdljyCcRIcm&#xA;axrxRV/lAH3ZjpQ2pIWtSR+yQ38P45KPNIeUfmd+ZY8rxx2Gnqk2sTrz+PdIYzsGYAirH9kfSfA5&#xA;mHDxbnkwyZOF5bD+ZN5qXq23mz1NTs5uJRo+EbQld+SxqEVu3dSCKhsjrOzxliOE8JDdou0DhkbH&#xA;ECqWH5o6voEwttAne40haslvqaepLyYktym9R5n3Pw8pTQbdAMnptCIQ4TXF3jZr1WsOSfELruJv&#xA;7XtvkzzlpvmnSVvLUiO4Si3loTV4n8PdT+y3f51GVZMZiaWExIM30xCtqCf2yW/h/DMeXNJRTryR&#xA;l8QR9+RQx1yI+Rf4QteVe1OuWmQAs8mYFmg8Fg/JryF5fudQ1r05bu9kuJbiznnYj0DIxMaRohVf&#xA;hr1ap+Wc9HWzz5hGP0X9nm7nHpI4o8R+pH6b5K0a8gaze3SbSCQ08M/KZpSd19RpOTseNPiY18Mz&#xA;e0csNN6YfVIbHuDHTGWaPr5Dp5/jvSaL8gdGtfzB8u6/5dm/R1rZ30VxfWTMzJxhPqAxMeTDmyhC&#xA;pNN+2YvZ/aJlIQn8C16vQgDih8n0npKEzO/ZVp9JP9mb2bqymmVsUl1BCl0/g1GH05bHkyDGPNGu&#xA;WtlD9WMSXE7jkY5AGRV/mYH8BmThwcW55OFq9X4dRjvMvLtPh0WKeVbTTIbdrtiZ2VUHLq3xAKK7&#xA;9B2zV6bQk54ylKxfKv2l33aOt4NJMQiImubKtD12fSQIYY4/qZbk8CIqCp6kFQN86CemiRts8Xh7&#xA;QyQO54g9G0uaK9+rzQnlHLRgfbqa5rJgxsF6GGQTiJDkWRZQrsVYz5z8uy6hEt5aLyuYFIeIdXTr&#xA;8P8AlD8cztHqBA8J5FxtRi4hY5vPWVlJVgQw2IOxBzbuAqDe1P8AkuD94pihUhiea24RIWmWVQgU&#xA;VY+oCO3ugyBNHflTIC3qGh2dzb2Mf1yn1tlHq03p7V8fHNFmkDI8PJ2sLoXzTDKmSjdwCeBk25dU&#xA;J8e2EGleMa1BqMGpTrqKFLotyYHoQehU/wAvhm9xGJiOHk8tqBPjPH9SByxoXwgGZAdwxAPyO2Ua&#xA;okYpEcwCflu5GkAOWIPIkD57PQ/y70nUIraS5ulKWshD20bbMT0L07A5ha3JEmhzdt2bCcYm/pPJ&#xA;muYLsnMoZSpFQdiMVfK/5y+T/MGj+abrU76txYalMz2l4o+ECnwwt/KyLsPECo7022nyCUaHMONk&#xA;ibt5/mQ1OxV6D+THljzRqnmiG+0qRrOxtGH6QvCKxtGaFoadHZx27dfDMfU5IiNFtxg3s+plUKoV&#xA;RQAUAzUuS3iqQeabOf6nJNbqWDEesF6hepb5eOYXaMpeCRH8BzdCY+IOJgN9ZR3kIik+yHV/+BNT&#xA;942zm9PnOKXEO4u+nASFIPRNOnsvrCytyBcLEfFFGx/HMztHWDPwkdA1afDwX706tLW4up1ht0Ly&#xA;sdgO3uT2GYOLFKcqjzbMmSMBcuT0ewtmt7VI3YNKAPUcdC1N87GN0OLm8vMgk1yRGSYoPVLaSW2d&#xA;4E53EakxISByNNlqelcnA778kEkA1zeI63Ldh7prsMt0SRKGFCGJpSntm4yERxmuVOh0kZZNTHi5&#xA;8Vn4bpJYCt3H8z+o5r9N/eB6TtQ1p5fD7wnaI7sERSzsaKoFSSewGbcl4sC3rHkjRr3TtKAvdpnJ&#xA;aOLvGjUND7k75ptVkEpbPSaHFKGOpMizGct2KuxVLtS8vaRqJ5XMAMv+/U+F/pI6/Tl2PUThyLXP&#xA;FGXMJYvkLRVDD1JyrUqpZe3+wrl/5+fk1flY+aa6boWladvaW6o5FDIas/8AwRr+GY+TPOfMt0Mc&#xA;Y8gj8qZuxV2KoTUdI03UohFfW6zqPsk1DD/VYUYfQcnDJKPIteTDGYqQtjr/AJZ6AzEia5QE1Ch0&#xA;oPYVQnMoa6fk4R7Lx95/HwR2m+RvL1i4kEBuJVNVe4POn+xAVPwyrJqpyFNuLQ44G6s+af5juY7F&#xA;XYqo3tjZ31rJaXsEdzazDjLBModGFa7qwIO+EEjcLTzrU/8AnHz8vr2cywrd6eD1itZgUr4/vkmI&#xA;+/MmOrmPNrOIO03/AJx7/L6znEswu9QUdIbmYBK+P7lIW/HGWrmfJRiD0SxsbKwtY7Sxt47W1iFI&#xA;4IVCIo67KoAGYxJO5bKV8CuxV2KpXeeWdIumLtD6TnctEeNfo+z+GYWXs/FM3VHycvHrckNrv3oV&#xA;PJekq1S8zj+UstPwUZTHsnEO8tp7SyHuTezsLOzThbRLEp606n5k7nM7FhhjFRFOHkyymbkbV8ta&#xA;3Yq7FUs1fy1oerqRqFokzdPUFUfbp8akNtkhMgV0UACXF1Y+v5T+V0l9SN7pCOgEikCvzQ5KGUxN&#xA;hlnl4sDCXIp7pPlbRNKYSWtuPXAp68hLv4bE7L/sQMOTPOfMuNi02PH9ITbKm92KuxV2KrZJooxV&#xA;2C/PCAqj+kLOtPU/A/0w8JTSskkcgqjBh7GuRpC7FXYq7FWmZVFWIAHUnbFVA39mDQyD6AT+oZLh&#xA;KaVI7iCX7Dhj4d/uwEIVMCuxV2KuxVRe9tUNGkFfbf8AVh4StOS9tXNFkFffb9ePCVpWwK7FXYq7&#xA;FVOS4gi+24U+Hf7sICqYv7MmgkH0gj9Yw8JTSurKwqpBB6Eb5FDeKuxV2KrZJY4xV2Cj3xpVD9I2&#xA;dac/pof6ZLhKaVo5opRWNg3ywEIX4FdirsVQt9eegoVd5G6ew8clEWkBgH5kfmHpnkby62v6tDcX&#xA;UPrJAsVuFZy8lSPtsqgUU98sJpLw/Tf+cu76PzAIte8vrbaHO9YZYjIt1HbuTwkZXqsvw0rx4+2Q&#xA;GS0kEc30jpeqWt5aw6hptylxazqHhuIWDo6nwI2OT5oZDZ3QuI69HXZhlUhSCFfAhZPMkMRkboOg&#xA;8T4YQLVjHmDX7TTdNu9X1SYQWFjE888hqQkaCpoBuT+JywCmT5q8yf8AOXGv2mqxrp3l23j02RFm&#xA;iF3I7TyQuKo1YyEjLDt8VMgMt8mU4mPN7v8Al1590vzx5WtfMGmgwiQmO5tmIZ4J0pzjZhStKgg9&#xA;1IO2WA2xZzp98ZD6Upq37LePschKKCEfkEOJAFT0xVjHmzzNFpWialq0qs1lplrPdzJH9t0t42kY&#xA;CtNyF2ywCmVPnbyJ/wA5arqXmX6j5q0+30vSLliLW+gaRjAafCLjlXmD05qFp4U3xE0W9f8AKn5t&#xA;fl75t1SXSvL2sLfX8MbTPCIp4/gVgrMrSxorULD7JOSBCbZzZXzwsEc1iO3y+WCUbUhOAQRUdMqY&#xA;uxVAahfGM+lEaP8AtN4ewycYpAedfmn+Zun/AJe6FBrF/Zz3yXNytqqQcRRmR5OTMxoNoz88kTSX&#xA;lGhf85g6LLd3v6d0Se1sF5Np8lm6zzMA1AkqOYlViu/LlTtkeNbe/wDlzzDbappNjrOmuXsdQgju&#xA;YOQ4kxyqGXkvY0O+SItWUwTJNEJF6HqPA+GVkUxX4FULy6FvHUbu32R/HDEWkB51+avnt/JvkzUP&#xA;MRRLm7h9OO0t5SQsk0rhFX4d9gS1B4ZYdgl4NF/zlx5u03VTaeYPLVsoicLcwQvLDMg6mhkMoJoa&#xA;0p9OVxy2LHJlOJiaIovpXQNcs9Z0ex1rTXY2l/BHc2zkcW4SKGHIdjvuMt5sWTWN566lW2kXr7jx&#xA;yuQpBCKyKHYqkV5IZLmRj2NB8htloGzIMN/M/SP0v5Sl09tPGpQzXFv68RIUxxpMrtMP+MfHlTuN&#xA;u+U6qUhAkOXo8cJ5AJcninmHyNonmG5bTtSWOTULO2kGmu0kguJEcKRIzGRnKRynj8VRvmjx55QF&#xA;jkTu9Hn0cMp4ZfUBt3/f0L2T8n/LNz5Z8g2Gi3MBt5LZ529JnMhAlmeUVYhK/bp9kfLN7glIxsin&#xA;mdRjjCVRN/b9rPdOkKXSjs9VOWyGzjlOcqYpZq8h5pH2A5H5nbLIJDx//nJSYJ+UOqxmZYVuJrOJ&#xA;yzBSym6jYha9TRakDsD2rjPkyeZan+XXlzXGfTdQgmWewinayuo0KIsE0vKBPW2WT0wDRCdgT885&#xA;+OplDcdXq8mhx5PTIG43R8idt+qQfl9+bOnflFqM+hG2fVdMvvTuNQ9G5jke1uAXRvSZVWOXlEIy&#xA;RVd9q7ZudPlJFl5rU4o45cIN7b9d31T5V81aL5l0a11zQ7kXNjcDlFIAVIZTRldTQqykUIOZPNoZ&#xA;qrBlDDoQD9+UsUPqMhS1anViF+/JRG6QkNzbW91bS21zGs1vOjRTROKq6OOLKwPUEGmWsnxx+ZX5&#xA;BT6Z53l0nytPHLaTRpcQ211MBNFGxo5JIHNEag2q3j4nCzaiOM0XKwaDJlAMa3/Fsy/Kf8vb/R/P&#xA;vliWwj9ObSY54teuUICTRTx3DKxoTzHPgg7g022GVaXPxzPcXJ1uj8PHHbeOx87svpnNk6xOtOkL&#xA;2q16oSv3ZVIbsSiGYKpY9AK/dkUMfdizFj1Y1P05czYl+aOk2eqeSdRtbm1S7NFkt4nFR6yMGjPV&#xA;e48R4Zj6ufDjJ933uXocXHlA9/3PmLzX+UttrF1P5j02+As7pwJrOxtpLhlkWkcnorzXkOakmtAP&#xA;wzW4tWYjhI38y7PU9mDITkidj0Av5Ppz8qdF1zRPy+0XSdaeN76yh9KsSlQIlYiEGv7Qi48vfNxA&#xA;3EF0Uo8JI7meaTIRI8fYjkPmNsZhiUzytik2oyF7ph2WijLY8mQYL+avlPT/ADN5UNneu0aW1zBd&#xA;xslCecT0pvUbqxG+V6i/DkR0DkaWMZZYiXIl4VqX5UaN5ghOpXtvLFrgIRo4nS1t5pVRU4jlG7CH&#xA;mDRuIYjpUcc1GnzZDMY4b273VaPF4Zy5LBjz6D7jt9rya282a75A853jeVNRlt4rO5ZGhLl4JeB4&#xA;vHKhosi1BFSK9wa75tMZkB6ubzuYREzwG4vuT8tPOdt5s8saR5ktk9JdQjrLDWvpyqxjlSvcLIpA&#xA;Pfrl53DBnuVMXYqkFwhSeRfBj+vLhyZJVq3mDR9LWl7cKrsNoR8Tkf6ort88WcYE8nklw2sWetDU&#xA;I7q0fTfV9W2tY1SSXiDyWOSQScvTHgYlbxPXNfHQQEr83dfn8ko8J7q5b/Nk6fmfqAYl7KJk7BWY&#xA;GnzNf1Zn2638uO9lPk/zraa1qsNmLaSC5IZ+odKKCT8QofwwE7NOTEYi2f5W0JVqyETq3Zlp9IOW&#xA;QZB89f8AOSGiRebp9E0y21MQppslxJqEKqXHKQRiPoQvNeDj25Zkw0xnvyDVPIAiPJ/kLy/p/l+0&#xA;W98wXN7NFaO7wTzu6LxVpUiReQiDiKlKglaZhZuyeKdg1G+7d2Gn7Y4IcJBlLp6jXyeK6l+TFg0Z&#xA;Om38sco3CXAV1PtyQIR86HNlLQjoXVjN3vXP+cUNN8w6PF5p0XU0KW8EtncWlPijZ51mSRkboaiF&#xA;K9/HMQ45QNFvhIF9PRqVjVT1UAfcMoKobVFLWtR+ywJ/V/HJQ5pCRzXEEC8pXCDtXv8AIY5c8MYu&#xA;Rptx4pTNRFsU82pa6nbE2PGLUVI9K6lChaD9khmTkD4VB8Dmoy58eplw44mU/wBH48nb6WctNvkk&#xA;Iw/T+PNAfl/p7aQbyXVIbW3u55WMbWg4qysFq8qblZGI6kmoyWCcMEgcnFEkbWnWZDmBjjMZAGzw&#xA;97PVZWUMpDKdwRuDm4jIEWOTpSCDRTnS1K2tT+0xI/V/DIT5sCiZF5Rsv8wI+8ZEIY8duuXs2P6x&#xA;rtjKklksP1lH+F2LcV232I3NDl09GDjJn9Pd1asesMMg8P6u9hvlmx1PS7wXmoXY1CVQwVDGsUQq&#xA;D0Ramv8ArMfam+aDQ6aXigmNRH6TQPmLPMbeb0XaGvicJiJ8Uj5UNtyPf72c6f5ltrmURTJ6Dtsp&#xA;JqpPhXamdJl0hiLG7zGPVCRo7Mn0lSZ2bsq0+85gzckprlbFJL9St3JXuaj6RlseTIPJ/Of5x2On&#xA;6wdHsrWO7jglCX11NVo1Kn4lRFILFT1Neu1DmT4E+AkfVWzCOWHGBL6b3Yfc6h5UjSe7F/I00rGR&#xA;HWaSWWNi3MCFJC4j32oAB45z2HS6oZAYx4SD3UHqc2p0ZxESnxAjvJP7PseIa95Dtru5nudNnkSW&#xA;aVn43Th68jU8nVQa71rvnQy0Z4efqeSOYcWwqPR9j/k/5Oj8qeSND0KO4S7eFPWmuojWOSSdzM7I&#xA;dqp8dFPhmNVBv6PS8qYuxVjXnptUtdHmvtLh9W5UASUHIoneQL+1x/t7ZOJbMQBNF4VNNLNK0szm&#xA;SVzV3Y1JJ7knC7ABZilsAk0G5PQYq9k/LPyfNpFpJqN8nC/u1CpEftRxdaN/lMaEjt9+RJcHPk4j&#xA;Q5M4yLQlfmay1G80S6h0yRYtRMZ+qyN0DeHtUbA9jvlmKQEhfJButnzVf2dxaMYryJ4731G9VJKh&#xA;l47bg9ya5vAQRYcPqr3A9PQrRf8Af0skn/A0TJdGA+opbkWb0r8mfLuqy6sdZPKHS4lZCT0nfsoH&#xA;cIfiJ8dvHMLWZBXD1bsQN29qzWN7ToroUbdWFDirzvXLW9tr90uiWP8Aut6UVl7cc5XXjIMp49+7&#xA;3PSaOUDAcKQ6uaWo93A/A5svZuN6g+UD94dR7TSrTDzmPuKH0eSkrx/zCo+j/bzae02G8cZ/zTXz&#xA;/sdV7L5qySh/OF/L+1l/lr63NdfV41LQHeRuye+aTsjPMS4QLh9z0naOOHDxHaX3s7RFRAi7KooM&#xA;37o28VYp51W5tbJpLdT6c7cZXH7APX/gsztEBKW/Rp1EyI7MBBI6ZtpRBFF1oJG4bBI6GleuCWOM&#xA;qsA1yZRmRyNWuhhlmlWKJC8jmiIoqST4YSQBZYgW9W0KxuLPTIYbludzT963X5Cveg2zQZpiUiRy&#xA;drAERAKYZUzY/wCeU1VPLWoXWjwtPqkMD/Vok3YsR1Udyv2gO/TLcRHEAeSCTWz5BnSljC7J+8kl&#xA;l9SU9SVC/D9Fan55uXC6oXFXYq+pfyQ0zX7TyZb/AKaiMJDv+j45KiQWzUKl1O4+Itx/yc1WqkDL&#xA;Zy8d1u9DzGZuxV2KsT138tPLeqyNOiNY3Lbs9vQKx8WQgr91MILdDPIJAv5LQ+pVtXYx/wAogAP3&#xA;+of1YeJs/M+TJ/L35f8Al3RJFniia5u13W4nIYqfFFACr86V98BLVPNKTJMDU7FXYqkXmTyT5e8x&#xA;KP0hb/v1FEuojwlA8OW9R7MDluPPKHJjKALEL78lLe4it4IdWeKG35BA0AdiGNTUh0FfemZf581y&#xA;ahg35ovR/wAlvLVnMs19NNqLLv6T0jiPzVfiP/BZXPWyPLZkMQZ9DDDBEkMKLFDGAscaAKqqNgAB&#xA;sAMxCbbV+BXYqo3dna3cRiuYxIh7Ht7g9RleTFGYqQsM8eSUDcTTGNT/AC9trvaG8eBAeQVkElD8&#xA;6ptg0GCGmmZx3sUx7QnLVQEJGqNqWn/lrZ28wlnvZJSvZFWMfTUvmZq8wzwMJDYuDo9IcGQTEvUG&#xA;WWlla2cQitoxGnenU+5PU5iY8UYCoig7DJklM3I2rZYwdirTojoUdQyMKMpFQQexBxBpWN6h5D0m&#xA;4cyW7PasTUqtGT/gTv8Ajmbj10xz3ceWmieWyDj/AC5hDVkvmZa9FjCmnzLN+rLT2iegYDSDvT/S&#xA;fL2l6XVraMmUihmc8np4V6D6Mw8uonPm3wxRjyTLKWx2KuxVhfm78pPJ/mZnmuIXsruV/UlubMrG&#xA;zvQjk6sroSeW548j45fj1M47dGEsYLCG/wCcZdN9Sq69MIq/ZNupan+tzA/DL/zp7mHgss8qfkl5&#xA;J8v3Md76UmpXsRDRTXjBlRx+0kahU+XKtO2U5NTKW3JlHGAz/MdsdirsVdiriQBUmg8Tiqn9Yt60&#xA;9VK/6ww0VVAQRUbjArsVdirsVdiqw3EANDIoPgWGGlXK6MKqwYeINcCt4q7FXYq7FVryxJs7qp9y&#xA;BjSuSWJ9kdWPsQcaVdirsVdirsVaZ0UVZgo8SaYqtFxATQSKT4BhhpV+BXYq7FXYq4kAVJoPE4qp&#xA;fWratPVX7xhorSqrKwqpBHiMCuxV2KuxVQu7pbdK9Xb7K4QLSAx7V9Xt7KwutT1Kf0rKyie4uZmq&#xA;VSKJS7tQAnZR2GW1SXyp+Zf/ADlF5oPmwx+SL2KLy9acPTke3VmuyQGcyCdPURa/CAvFu/ygZ9yC&#xA;X1P5a1q5vdF07Uynove20NzJbmpCmWNXK7+HKmSq0sntrhJ4w67Hoy+BysimKrgVbLIkaF3NFHXE&#xA;BUmub2WckV4x9lH8ctEaZU+fvzb/AOcnIvK3mBtB8tWcGp3Vk/HVLmcv6KOD8UEfplSXXozVop2o&#xA;d8BktvVPy4/MPS/PGgfp7SIri2gWZ7dluAqtzjClivBnBX4tjt8hhG6s8sb71v3cm0g6HxyEo0gh&#xA;GZFDsVSu91FmYxwmijYuOp+WWRiyAeJ+e/8AnI/RfKGu3ui3uganLeWTgSSgRLA6sAyOknNiQyMD&#xA;uoodsTMA0lOPyt/PHyr+YU9xZWMc1hqtsnqtZXPGrx1ALxMhIYKSAeh3wiVot6pZai6sI5jVTsHP&#xA;UfPBKKkJplbF2KoS+vvR+BN5D+GSjG0gPNPzV/NbTfIGm2d9qFtNqFxqE/1e2tIGQSMQpZm+I/ZX&#xA;YbA7kZMkBLGvKH/OTP5Z+YZEtrmebRb2RljSG+SiOzmg4zRmRAKnq/HESC29gtr2WAgV5R90P8MT&#xA;G1pOYpEkQOhqp6ZUQxXYqpXVykEfI7k7KvicIFqxvXNYaz0y91KdXmSzgluGhj3ZhEhcqg8TSgy2&#xA;qZPne0/5zIsDHW98rzRP6nSK7Vx6JJ+Icoo6sPDv4jIca2+hPL+vWuq6TZazpkpazv4Y7m3Y7EpI&#xA;oYch477jJ81ZNZ3a3CV6Ov2l/jlRFIIV8CHYqkl9KZLlz2U8R8hlsRsyDyX/AJyBsLvUPLen2A15&#xA;9A0q6u/R1adI2lMkLoVVKBowRzIBVnVTXc7UNOfKIV5t+HTnJdECu9iPk38qPy88uQR6bqE9vqtx&#xA;dz286G6ILy+nFIzia1QFoYFlVVBLuCW323zAlnjIiQNV+N3Y49JPGDjMb4ufeN+nft+O/wBBP6XL&#xA;91/d7cfuzbB1FInTJSlyF/ZcUPzG4wSGyCnGVMUt1eU1SIdKcj+oZOASHnP5yp5lf8udWHlu7ey1&#xA;QCErdRM8ciRCdPWZXjq60j5H4d6dN8ckuGJLZCBmREdXzJ5P/Kl7dZtZ8wGHULG8hligCVlUvNKk&#xA;Mc7s5hffmXUrvQVqGoM1WfV36Y7F3Ok7N4RxzoxI2+6+nvfSP5HWH6J8gW+htE6SaVPPC8jLxEnq&#xA;yG4VlNTy4rMEYjbkpptmx02YZI2HW6rTHDLhL0GORo5Fdeqmoy8uMyFSGUEdCKjKWCHv5THbMR1b&#xA;4R9OSiN0hJMtZPHfzVgTUtfu9Juysdje2sFqZXkeMEtKpdFA+FpGST4O9RTcHbSazIfFsc4/qt6P&#xA;QYgcHCeU/wDiq+dPJ/IX5L69pP5haS9lq0q3NpdQ3DzQwyRRPaLIPWjE/KnqGINyj4kEd+2ZOn1f&#xA;iSAA+11up7MOGJJPLy2+ff5PrrNk65O9PlMlqpO5X4SfllUhuxKIYhQSegFTkUMekkaSRnbqxqcu&#xA;DN43+d2hJeeaPLWrepFM+jw3U409nKyEtLbhZRStEG/J6bU75ha+VQrvdh2bj4snF/NF/a8J1L8l&#xA;7WX09WsNXWXSLyWi/VoGn4FnKsVYMimJKEl2IoB374sNafpI3DkZOyQfXGXpPcL/AAPN9maPq+m6&#xA;zpdrqumTrc2F5Gs1tOlaMjDbY7g+IO4zbgunT3SZTV4j0pyH6jkJhiUyyCEn1KUvcleybD9Zy2I2&#xA;ZBAzsUhkcDkVUkL40HTGRoEs4C5APlnzD+VkPmaBBc3FzbX+ko1tCkUK+lLEruYynNkRnkTgTxcK&#xA;p2NO2gx6swOw2k9Ln7OGUbkgw25dPx5vXvyC8kal5R8nT2l68oS8ujdWtrMys8KNFGrKSnwVMisf&#xA;h2zd4JGUbLzufEMczEPU7GUx3KHsx4n5HLJDZpKd5UxdiqQTqVnkB7Mf15cGSQa1q/l41tLw+uVN&#xA;SiCvFun2tgD9OTlovFjuNmkdqx08vTL1eTAYNH16HWoJ7yKG40JGZp5lVhKqFSaRyqXif4qeFRt1&#xA;3zn9PopHIISjIfc9Zq+1YRxHJCcJCvj9707T9UsL6Playh+P2k6MPmpzoZ45R5h5TDqIZN4m0zsV&#xA;Ju46eNfuGVS5NpTvKmKVaspFwrdiv6icshyZBKb+ewitXN+8aWzAq/qkBSD2364ZAEUWcCQbHN5b&#xA;5rS1ubtJdEs5dRs1kVkFvIYQk6Do/No+Ue9f2q/ynOf1mOGPJQNWHqNHqJTxDjFyB76+f4+DLNJ8&#xA;5aDY2sGn3Jkt5oVCTkoSnqU+MgrU05e2bnS8PhxrlTo9XCc8spHvZTa3dtdwLPbSrNC/2XQ1GZLg&#xA;kUyaJSsSKeoUA/dlBYIXVVJtQf5WBP4j+OShzSGC+avzA8s+WaJqNwWumHJbOAc5iviRUKo8ORGZ&#xA;MMUpckSmI83mmpeeX82ajy0O2j094t7m4vazck+yvGON4qP/ALOlM1/aXZ/KYsyO2zt+yu0JbwsC&#xA;I33U4fzFHlLV3j+oLqUjxIsl20zI5XckKoDxJv14qK7V6DMjs7QcOOztJxu1dcZZaBJiAPL40z/y&#xA;r+a/lbzBKlqHawv32W2uKAOfBJB8LfI0PtmVPBKLr45QXpWlKRbE/wAzEj7gP4ZiT5syipVLROo6&#xA;lSB9IyIQx4kAVOwHU5cTTMB8tDyp+c2vfmnqHm5PS0y3nnktoGv2Ur+j1k4xxiBW5fZUNuUq29RW&#xA;uafVa3DL0k3+O/k7LRYc2OYmPT7+73c0o/5yC0/zFo2jaLDd3fKO6knWWOApDEOCpRVhRnbiQ5+2&#xA;7e2DQiJJO3ztyO1cxMYgG+fSh+PiXpH/ADiLqdzN+Xt9ZTycorXUpFs1bsjxRu6r7c2LfTm0jljf&#xA;Dfq7nTCB4brZ9A6SpNwx7Bf1kZOfJiU2ytikl8CLuSvjX7xlseTIMB80/mXbaXdSWNhCLq6iPGWR&#xA;zSJG7rtuxHfpmXi0xkLLVPLWwY5a2lk2sz6nNqjtJblLiWyUhLaBwor6aKBVaivxlqHwOclmGUSE&#xA;o46Epenz3/Hc9Ri1MeAxlPikI778tvx3phon5syNOkWsW6LExANzAGHHtVkJao8aH6M7Gek/mvKx&#xA;zd70y0IklhKEMrFSrDcEdajMEt7IMpYuxVinn06hbaebiyQ8XPG5lXrGOgP09K9sy9IImVFwtfkn&#xA;HH6fie55fm3ecdiqtZ3c9pcJcQNxkQ1Hv7H2OCURIUWzHkMJCQ5vYNAHrWcV8ylDOisiHYgMK5o8&#xA;oo09VDJxRB701ypkhdSgMluWVSzxgsqjcnbcD55KJpIfPuuaxfapfyT3RIIJWOE9I1B+yB+vJuxh&#xA;EAbIVLy5S3NujlYmbmwGxJFKb/RlMsEDLiI3qm0TIFLJp5Z5PUlbnIQAWPU0FN8ljxxgKjsESkTu&#xA;WdflNZatNqkssdRpSD/SeQPFpKfAF/yvH2+jJE04uoIrzev5Bw1K7hae2lhR/TeRCqSU5cWI2ah6&#xA;0O+EGir42856Vr+l+Zb6114s+pCQtJO1SJQ32ZEPdWHTw6ds3WOQMQRycOQN7oryYnx3T+ARR9NT&#xA;/DMbVnk5+gHMobzctNUQ+MSn/hmGT0v0/Fr131/BD+WvLuqeYdZt9J02MyXM7U5b8Y0H2pHI6Ko6&#xA;5dOYiLLiAWX2Vo+nDTdKtNPEz3H1WFITPKSXkKKAXYmu7dTmmlKzblhF5FLDfNNpfLfJGn+8twQI&#xA;qVA5k/Zb6emaTtU5TIR/gP3+buOzzj4Sf4gx+YRCVhFUxg0Unqad/pzSzq9uTtI3W/NKPMPlfQPM&#xA;dmtlrdjHfWyMJESSoKsBSqspDDY9jksWaWM3E0xyYozFSFq+iaJpeiWEOnaRapZ2cP8AdQxCgBJq&#xA;TXqWJ7nfBPJKcrJuSYwjEUBs9R0G1urewT60a3D7tXqB2B9863TeJ4Y8Q+p5vUmBmeDkmOXtDHvO&#xA;8t1ZaBe6lZxmS5t4jxVRUiu3OngleR9suwAGQBRI0HzhIknFZnNfVLGpqSaHcnNxGYJI7nFMSAD3&#xA;qdT9+SYuxV7x+UQ1GbyzFLfRsqQs0dk7ftxdiPZSSozVauhLZysZPCzzMRm7FWnRHRkdQyMCGUio&#xA;IOxBBxBUi2Haz+W1lcyNNp031RjuYGBaOvsa1X8czsWuI2lu6zN2ZGRuJpKF/LDWNuV1bgd6Fz/x&#xA;qMv/AD8e4uMOy594T7Rfy80uxkWe8c3sy7qrDjED/q1PL6T9GY2XWSlsNnMwdnQgbl6iyvMN2DsV&#xA;dirGPMn5f6LrUzXVPqt+wINxGAQxIpV02DEeOxwHcU3Y85j5sLl/JrWQ5EV/bPH+yzCRSfmAG/Xl&#xA;nE3fmR3Jlo/5OQRyLJq16ZlG5t7cFQfm7b0+QGDiYy1Pc9CsrG0sbZLW0iWC3jFEjQUAyLjEk81f&#xA;FDsVSHzd5H8u+bLJbXWLfm0dfQuYzwmiJ68HoevcEEe2WY8soHZjKIPN5xa/kFeaY0y2Gqxzwyvy&#xA;X142jdVA2BKcw3z2yzLn462btPIYwUPdf8493+pajFNf6rDBbInFxAjSSNQk0HPgB167/LJYtTwC&#xA;qYaisht6f5R8j+XPKdkbbR7bg0lPXupDzmlI6c3oPuAA9spyZZTO7CMQOSfZWydiq2SKOVeEihl2&#xA;ND4jcHBKIIopEiOTGb3ySjMWs5+AP+65BUD/AGQ/pmnzdkAm4Gve7TF2mR9QtCp5Ivy3x3EQXuRy&#xA;J+6gygdjz6yDce1IdAU60ryxY2DiViZ7hekjCgB/yVzY6bs+GI3zk4Oo108grkE4zPcJ2KuxVgXm&#xA;n8odF1if6zYzHTJzXkiIHgJJJJEdU4kk9jT2zKw6ow5i2E4WxNvyL131KLqNqY/5iJA3/A8T+vMn&#xA;89HuLX4JZJ5f/JXQ7GVJ9VuH1KVDUQ09KCv+UoLM1D/lAeIyjJrZHlsyGIdXokcaRoscahEQBURR&#xA;QADYAAZhtreKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kv//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:e790af0d-6f28-be4a-8595-1d4aa8734f3b"
    stRef:documentID="xmp.did:e790af0d-6f28-be4a-8595-1d4aa8734f3b"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e790af0d-6f28-be4a-8595-1d4aa8734f3b"
      stEvt:when="2022-04-08T18:38:06+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:7afeecdf-31cb-eb4a-a567-a11ba5829a5d"
      stEvt:when="2022-04-08T18:38:08+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="633.049000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
633.049 400 li
633.049 0 li
cp
clp
633.049 400 mo
-7.36265e-06 400 li
-7.36265e-06 0 li
633.049 0 li
633.049 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
363.181 200.176 mo
363.181 211.626 359.051 222.116 352.211 230.227 cv
351.351 231.246 350.44 232.236 349.501 233.177 cv
347.98 234.696 346.351 236.116 344.62 237.406 cv
343.78 238.046 342.91 238.656 342.021 239.236 cv
341.921 239.307 341.82 239.366 341.711 239.427 cv
340.45 240.246 339.141 241.006 337.79 241.687 cv
337.48 241.847 337.171 242.006 336.851 242.156 cv
335.4 242.856 333.91 243.486 332.391 244.036 cv
330.37 244.767 328.29 245.366 326.15 245.807 cv
323.051 246.456 319.851 246.796 316.561 246.796 cv
315.15 246.796 313.75 246.736 312.371 246.606 cv
310.931 246.477 309.511 246.286 308.111 246.017 cv
307.331 245.876 306.561 245.716 305.801 245.536 cv
303.581 245.017 301.431 244.336 299.351 243.496 cv
297.5 242.767 295.71 241.916 293.98 240.956 cv
293.78 240.847 293.581 240.736 293.391 240.616 cv
292.21 239.956 291.07 239.246 289.971 238.466 cv
289.021 237.816 288.09 237.116 287.19 236.376 cv
287.081 236.296 286.98 236.216 286.871 236.126 cv
285.601 235.066 284.38 233.946 283.221 232.767 cv
282.891 232.437 282.57 232.097 282.261 231.756 cv
281.371 230.796 280.521 229.796 279.721 228.767 cv
278.931 227.746 278.181 226.696 277.48 225.616 cv
272.71 218.296 269.931 209.566 269.931 200.176 cv
269.931 174.426 290.811 153.556 316.561 153.556 cv
342.311 153.556 363.181 174.426 363.181 200.176 cv
cp
.909804 .882353 .937255 rgb
f
328.94 194.478 mo
307.761 192.338 li
306.761 192.238 li
304.07 191.968 li
304.07 191.968 302.23 185.298 303.91 180.728 cv
305.59 176.168 309.521 178.028 309.521 178.028 cv
309.521 178.028 311.271 176.528 314.46 175.208 cv
315.53 174.768 316.74 174.358 318.101 174.028 cv
319.561 173.668 321.19 173.408 322.98 173.308 cv
331.5 172.838 328.721 178.638 328.721 178.638 cv
328.721 178.638 330.61 179.978 331.381 184.188 cv
332.521 190.408 328.94 194.478 328.94 194.478 cv
cp
0 0 0 rgb
f
352.211 230.227 mo
351.351 231.246 350.44 232.236 349.501 233.177 cv
347.98 234.696 346.351 236.116 344.62 237.406 cv
343.78 238.046 342.91 238.656 342.021 239.236 cv
341.921 239.307 341.82 239.366 341.711 239.427 cv
341.99 218.927 li
341.99 218.927 346.82 223.427 352.211 230.227 cv
cp
.968627 .701961 .411765 rgb
f
337.79 241.687 mo
337.48 241.847 337.171 242.006 336.851 242.156 cv
333.49 243.786 329.9 245.026 326.15 245.807 cv
323.051 246.456 319.851 246.796 316.561 246.796 cv
315.15 246.796 313.75 246.736 312.371 246.606 cv
310.931 246.477 309.511 246.286 308.111 246.017 cv
307.331 245.876 306.561 245.716 305.801 245.536 cv
303.581 245.017 301.431 244.336 299.351 243.496 cv
309.07 210.536 li
309.07 210.536 316.759 206.177 324.483 210.041 cv
329.12 212.361 335.341 229.097 337.79 241.687 cv
cp
.407843 .713726 .847059 rgb
f
325.24 210.296 mo
310.46 211.227 li
310.46 211.227 308.98 226.586 308.111 246.017 cv
307.331 245.876 306.561 245.716 305.801 245.536 cv
301.611 244.546 297.65 242.996 293.98 240.956 cv
293.78 240.847 293.581 240.736 293.391 240.616 cv
292.21 239.956 291.07 239.246 289.971 238.466 cv
289.021 237.816 288.09 237.116 287.19 236.376 cv
287.081 236.296 286.98 236.216 286.871 236.126 cv
285.601 235.066 284.38 233.946 283.221 232.767 cv
282.891 232.437 282.57 232.097 282.261 231.756 cv
282.541 225.406 283.411 220.677 285.181 219.026 cv
293.041 211.716 312.541 209.276 312.541 209.276 cv
321.66 209.146 li
321.66 209.146 323.101 209.566 325.24 210.296 cv
cp
.968627 .701961 .411765 rgb
f
344.62 237.406 mo
343.78 238.046 342.91 238.656 342.021 239.236 cv
340.66 240.126 339.251 240.946 337.79 241.687 cv
337.48 241.847 337.171 242.006 336.851 242.156 cv
335.4 242.856 333.91 243.486 332.391 244.036 cv
332.381 243.916 332.393 243.792 332.36 243.677 cv
326.113 221.259 324.483 210.041 324.483 210.041 cv
330.113 211.971 341.36 216.347 343.28 220.776 cv
344.011 222.466 344.421 228.927 344.62 237.406 cv
cp
f
315.676 178.617 mo
315.676 178.617 306.972 159.184 297.035 169.057 cv
288.722 177.316 301.615 190.044 309.07 186.414 cv
316.525 182.784 315.676 178.617 315.676 178.617 cv
cp
0 0 0 rgb
f
310.334 201.755 mo
310.741 212.151 li
310.741 212.151 312.732 215.066 318.833 215.323 cv
323.378 215.514 324.722 213.131 324.722 213.131 cv
323.269 204.077 li
312.193 202.091 li
310.334 201.755 li
cp
.956863 .517647 .384314 rgb
f
310.326 201.121 mo
310.363 201.403 310.484 201.734 310.667 202.112 cv
313.196 207.214 321.467 209.056 324.093 209.188 cv
323.269 204.077 li
310.326 201.121 li
cp
0 0 0 rgb
f
324.661 180.291 mo
324.661 180.291 330.626 193.112 328.759 200.438 cv
326.891 207.764 320.233 206.774 316.232 205.461 cv
312.232 204.147 310.333 201.758 310.333 201.758 cv
310.333 201.758 306.657 203.102 304.097 199.714 cv
301.537 196.326 302.97 192.333 305.065 191.376 cv
307.159 190.419 309.712 191.888 309.712 191.888 cv
307.651 188.169 li
307.651 188.169 315.498 168.842 324.661 180.291 cv
cp
.956863 .517647 .384314 rgb
f
309.712 191.888 mo
309.712 191.888 315.299 192.934 319.083 186.68 cv
322.866 180.426 322.476 177.884 322.476 177.884 cv
326.421 184.231 li
326.421 184.231 327.222 179.781 325.407 176.977 cv
323.593 174.172 321.758 174.785 321.758 174.785 cv
309.516 178.025 li
306.418 187.917 li
309.712 191.888 li
cp
0 0 0 rgb
f
324.444 196.852 mo
324.398 196.852 324.352 196.846 324.305 196.832 cv
324.039 196.755 323.887 196.478 323.964 196.212 cv
324.65 193.854 322.846 191.344 322.827 191.319 cv
322.665 191.096 322.714 190.783 322.937 190.62 cv
323.159 190.458 323.472 190.506 323.636 190.729 cv
323.722 190.848 325.746 193.666 324.925 196.492 cv
324.861 196.71 324.661 196.852 324.444 196.852 cv
cp
f
309.256 198.061 mo
309.126 198.061 308.996 198.01 308.898 197.91 cv
305.316 194.24 li
305.123 194.042 305.127 193.726 305.324 193.533 cv
305.523 193.341 305.839 193.343 306.031 193.542 cv
309.613 197.211 li
309.807 197.409 309.803 197.726 309.605 197.918 cv
309.508 198.013 309.382 198.061 309.256 198.061 cv
cp
f
305.514 197.124 mo
305.274 197.124 305.063 196.951 305.021 196.707 cv
304.976 196.435 305.159 196.177 305.432 196.131 cv
307.859 195.721 li
308.127 195.682 308.39 195.859 308.436 196.131 cv
308.481 196.403 308.298 196.662 308.025 196.708 cv
305.598 197.117 li
305.569 197.122 305.542 197.124 305.514 197.124 cv
cp
f
326.791 186.206 mo
326.765 186.206 326.738 186.204 326.711 186.2 cv
324.404 185.832 li
324.132 185.789 323.946 185.532 323.989 185.26 cv
324.033 184.986 324.286 184.8 324.563 184.845 cv
326.869 185.212 li
327.142 185.256 327.327 185.512 327.284 185.785 cv
327.244 186.031 327.032 186.206 326.791 186.206 cv
cp
f
317.247 187.851 mo
317.067 187.851 316.894 187.753 316.804 187.583 cv
316.676 187.338 316.771 187.036 317.015 186.908 cv
320.762 184.944 li
321.004 184.816 321.309 184.909 321.438 185.155 cv
321.565 185.4 321.471 185.702 321.227 185.83 cv
317.479 187.793 li
317.405 187.833 317.325 187.851 317.247 187.851 cv
cp
f
326.864 191.525 mo
326.653 191.525 326.457 191.39 326.389 191.178 cv
325.638 188.849 li
325.586 188.69 325.618 188.516 325.722 188.385 cv
326.428 187.496 li
326.601 187.28 326.916 187.246 327.13 187.416 cv
327.347 187.587 327.383 187.902 327.211 188.118 cv
326.671 188.797 li
327.34 190.872 li
327.425 191.134 327.28 191.416 327.018 191.501 cv
326.967 191.517 326.915 191.525 326.864 191.525 cv
cp
f
319.422 192.245 mo
319.211 192.245 319.015 192.11 318.946 191.898 cv
318.195 189.569 li
318.143 189.406 318.177 189.228 318.287 189.096 cv
319.263 187.924 li
319.439 187.713 319.755 187.685 319.967 187.86 cv
320.179 188.037 320.207 188.352 320.03 188.564 cv
319.231 189.524 li
319.897 191.591 li
319.982 191.854 319.838 192.136 319.575 192.221 cv
319.524 192.237 319.473 192.245 319.422 192.245 cv
cp
f
322.617 200.292 mo
320.971 200.292 319.167 198.552 318.93 198.315 cv
318.733 198.121 318.733 197.804 318.928 197.608 cv
319.123 197.412 319.439 197.412 319.635 197.606 cv
320.223 198.19 322.113 199.73 323.105 199.172 cv
323.342 199.037 323.649 199.12 323.787 199.361 cv
323.923 199.602 323.838 199.906 323.598 200.042 cv
323.288 200.218 322.956 200.292 322.617 200.292 cv
cp
f
289.971 238.466 mo
289.021 237.816 288.09 237.116 287.19 236.376 cv
287.081 236.296 286.98 236.216 286.871 236.126 cv
285.601 235.066 284.38 233.946 283.221 232.767 cv
281.98 231.496 280.811 230.166 279.721 228.767 cv
278.931 227.746 278.181 226.696 277.48 225.616 cv
283.761 219.606 288.96 216.307 288.96 216.307 cv
289.971 238.466 li
cp
.968627 .701961 .411765 rgb
f
319.52 215.831 mo
314.442 215.831 310.385 212.891 310.214 212.764 cv
309.991 212.601 309.943 212.288 310.106 212.065 cv
310.271 211.843 310.583 211.795 310.806 211.958 cv
310.845 211.987 314.779 214.831 319.522 214.831 cv
319.563 214.831 319.602 214.83 319.642 214.83 cv
324.027 214.785 324.729 212.341 324.756 212.237 cv
324.826 211.973 325.095 211.817 325.364 211.879 cv
325.63 211.947 325.791 212.215 325.726 212.481 cv
325.692 212.615 324.854 215.777 319.651 215.83 cv
319.607 215.83 319.563 215.831 319.52 215.831 cv
cp
1 1 1 rgb
f
114.821 200.149 mo
114.821 208.659 112.541 216.639 108.551 223.509 cv
108.4 223.769 108.241 224.028 108.081 224.289 cv
107.71 224.909 107.321 225.528 106.911 226.129 cv
106.741 226.379 106.571 226.629 106.38 226.879 cv
100.301 235.589 91.3008 242.089 80.8208 245.039 cv
80.6006 245.099 80.3706 245.159 80.1504 245.219 cv
76.3403 246.229 72.3306 246.769 68.2007 246.769 cv
52.0903 246.769 37.8804 238.599 29.5308 226.169 cv
28.7407 225.019 28.0107 223.818 27.3403 222.599 cv
23.6704 215.938 21.5806 208.289 21.5806 200.149 cv
21.5806 174.399 42.4507 153.529 68.2007 153.529 cv
93.9507 153.529 114.821 174.399 114.821 200.149 cv
cp
.909804 .882353 .937255 rgb
f
60.5879 186.084 mo
60.5879 186.084 52.688 183.549 52.6455 189.487 cv
52.5957 196.367 60.7471 195.67 60.7471 195.67 cv
60.5879 186.084 li
cp
.94902 .494118 .392157 rgb
f
57.3354 192.625 mo
57.1797 192.625 57.0259 192.552 56.9282 192.416 cv
53.9873 188.307 li
53.8267 188.082 53.8784 187.77 54.103 187.609 cv
54.3286 187.448 54.6396 187.5 54.8008 187.725 cv
57.7417 191.833 li
57.9023 192.058 57.8506 192.371 57.626 192.531 cv
57.5376 192.594 57.436 192.625 57.3354 192.625 cv
cp
0 0 0 rgb
f
54.2637 191.597 mo
54.0122 191.597 53.7954 191.407 53.7671 191.151 cv
53.7368 190.877 53.9351 190.63 54.2095 190.6 cv
56.3735 190.361 li
56.6553 190.337 56.895 190.529 56.9253 190.803 cv
56.9556 191.078 56.7573 191.325 56.4829 191.355 cv
54.3188 191.594 li
54.3003 191.596 54.2817 191.597 54.2637 191.597 cv
cp
f
113.261 212.156 mo
107.98 232.106 89.8105 246.796 68.2007 246.796 cv
53.6606 246.796 40.6807 240.146 32.1304 229.727 cv
45.7705 213.036 60.4805 211.256 60.4805 211.256 cv
60.4805 211.256 60.1304 208.736 60.4805 208.057 cv
60.7305 207.576 61.6504 207.137 62.1606 206.927 cv
62.3608 206.847 62.4907 206.796 62.4907 206.796 cv
62.4907 206.796 63.2305 206.666 64.3906 206.486 cv
66.7207 206.116 70.7407 205.526 73.8608 205.296 cv
74.8105 205.216 75.6807 205.177 76.3906 205.187 cv
77.1606 205.196 77.7505 205.267 78.0703 205.416 cv
78.4604 205.597 78.9106 206.796 78.9106 206.796 cv
78.9106 206.796 84.6807 205.906 92.6504 206.796 cv
96.0005 207.177 104.331 208.716 113.261 212.156 cv
cp
.639216 .482353 .564706 rgb
f
75.7954 201.011 mo
76.604 208.981 li
76.604 208.981 73.6782 210.928 69.8354 211.353 cv
64.646 211.926 62.6045 209.006 62.6045 209.006 cv
61.7715 199.65 li
75.7954 201.011 li
cp
.956863 .517647 .384314 rgb
f
75.7944 200.999 mo
75.7944 200.999 73.9062 207.688 67.9238 207.357 cv
63.1016 207.09 61.1128 200.473 61.1128 200.473 cv
75.7944 200.999 li
cp
0 0 0 rgb
f
57.564 179.784 mo
57.564 179.784 55.5937 194.695 60.3789 200.771 cv
65.5107 207.287 72.54 204.544 75.0493 202.213 cv
78.4341 199.069 78.8184 195.11 78.8184 195.11 cv
78.8184 195.11 83.9233 195.641 85.2134 191.397 cv
86.5684 186.94 83.124 183.767 80.5976 183.796 cv
78.0713 183.825 77.8218 184.309 77.8218 184.309 cv
78.1299 179.655 li
78.1299 179.655 61.3091 164.138 57.564 179.784 cv
cp
.956863 .517647 .384314 rgb
f
79.2192 190.898 mo
79.0937 190.898 78.9687 190.852 78.8716 190.758 cv
78.6733 190.566 78.668 190.249 78.8599 190.051 cv
82.4184 186.373 li
82.6103 186.173 82.9268 186.17 83.1255 186.361 cv
83.3237 186.553 83.3291 186.87 83.1372 187.068 cv
79.5786 190.746 li
79.4805 190.848 79.3501 190.898 79.2192 190.898 cv
cp
0 0 0 rgb
f
82.8486 191.176 mo
82.7593 191.176 82.6689 191.152 82.5869 191.102 cv
80.1435 189.598 li
79.9087 189.454 79.8354 189.146 79.98 188.91 cv
80.1235 188.675 80.4307 188.602 80.668 188.747 cv
83.1113 190.25 li
83.3462 190.395 83.4194 190.703 83.2749 190.938 cv
83.1807 191.092 83.0166 191.176 82.8486 191.176 cv
cp
f
71.3018 187.569 mo
71.0337 187.569 70.812 187.356 70.8027 187.086 cv
70.7173 184.616 li
70.7075 184.34 70.9233 184.109 71.1997 184.1 cv
71.4697 184.086 71.7065 184.306 71.7163 184.582 cv
71.8018 187.052 li
71.8115 187.328 71.5957 187.559 71.3193 187.568 cv
71.3135 187.569 71.3076 187.569 71.3018 187.569 cv
cp
f
61.8516 187.93 mo
61.5835 187.93 61.3618 187.718 61.3525 187.447 cv
61.2671 184.978 li
61.2573 184.702 61.4731 184.471 61.7495 184.461 cv
62.0195 184.429 62.2563 184.667 62.2661 184.944 cv
62.3516 187.413 li
62.3613 187.689 62.1455 187.92 61.8691 187.93 cv
61.8633 187.93 61.8574 187.93 61.8516 187.93 cv
cp
f
66.7993 194.042 mo
66.5835 194.042 66.3843 193.901 66.3198 193.684 cv
65.1899 189.866 66.1362 186.593 66.1768 186.456 cv
66.2563 186.191 66.5332 186.041 66.7978 186.119 cv
67.0625 186.197 67.2139 186.475 67.1357 186.74 cv
67.1265 186.771 66.2358 189.878 67.2788 193.399 cv
67.3569 193.665 67.206 193.942 66.9414 194.021 cv
66.894 194.035 66.8462 194.042 66.7993 194.042 cv
cp
f
60.1714 182.89 mo
60.0474 182.89 59.9228 182.844 59.8262 182.751 cv
59.6265 182.561 59.6191 182.244 59.8096 182.044 cv
60.7974 181.01 62.581 180.86 62.6562 180.854 cv
62.9297 180.831 63.1714 181.038 63.1934 181.313 cv
63.2153 181.588 63.0098 181.829 62.7349 181.851 cv
62.7202 181.852 61.2544 181.979 60.5332 182.735 cv
60.4346 182.838 60.3032 182.89 60.1714 182.89 cv
cp
f
72.3149 182.688 mo
72.2295 182.688 72.1426 182.666 72.0635 182.62 cv
71.1621 182.094 69.7178 182.376 69.7026 182.38 cv
69.4365 182.434 69.1684 182.261 69.1133 181.99 cv
69.0586 181.72 69.2324 181.456 69.5024 181.4 cv
69.5762 181.386 71.3315 181.036 72.5674 181.756 cv
72.8057 181.895 72.8862 182.201 72.7476 182.44 cv
72.6543 182.599 72.4868 182.688 72.3149 182.688 cv
cp
f
78.9463 185.898 mo
78.9463 185.898 78.2588 190.639 77.6484 190.57 cv
77.0381 190.501 76.6411 183.313 78.2583 182.705 cv
79.8755 182.096 78.9463 185.898 78.9463 185.898 cv
cp
f
67.5259 198.256 mo
67.2593 198.256 67.0386 198.045 67.0273 197.776 cv
67.0161 197.5 67.2309 197.268 67.5063 197.256 cv
67.6059 197.252 69.9653 197.127 70.8852 195.107 cv
71.0005 194.855 71.2969 194.745 71.5474 194.859 cv
71.7988 194.973 71.9097 195.27 71.7954 195.521 cv
70.6167 198.11 67.6699 198.251 67.5454 198.255 cv
67.5391 198.256 67.5322 198.256 67.5259 198.256 cv
cp
f
78.2046 183.625 mo
78.2046 183.625 73.1162 183.422 69.603 180.942 cv
66.6362 178.848 65.3867 175.726 65.3867 175.726 cv
65.3867 175.726 63.1953 175.542 60.1719 177.59 cv
57.1479 179.638 57.1621 185.551 57.1621 185.551 cv
57.1621 185.551 50.9844 175.799 53.5635 172.141 cv
56.1426 168.481 60.7471 171.226 60.7471 171.226 cv
60.7471 171.226 59.6689 164.721 68.832 166.855 cv
77.9951 168.99 80.4058 176.714 80.4058 176.714 cv
80.4058 176.714 83.4834 176.308 83.9917 179.153 cv
84.5 182 83.4609 184.961 83.4609 184.961 cv
83.4609 184.961 82.0605 183.744 80.0278 184.599 cv
77.9951 185.455 77.9951 185.455 77.9951 185.455 cv
78.2046 183.625 li
cp
f
62.4912 206.801 mo
62.4912 206.801 64.3096 208.524 68.5151 208.63 cv
72.7212 208.734 76.4097 205.336 76.4097 205.336 cv
79.1196 210.308 li
72.4189 214.398 li
61.189 213.455 li
61.189 208.42 li
62.4912 206.801 li
cp
.639216 .482353 .564706 rgb
f
67.1304 214.91 mo
62.5854 214.91 60.1055 211.587 60.0762 211.546 cv
59.9141 211.323 59.9634 211.012 60.186 210.849 cv
60.4092 210.688 60.7217 210.734 60.8843 210.957 cv
61.0127 211.133 64.1059 215.238 69.8867 213.479 cv
70.1528 213.399 70.4302 213.548 70.5107 213.812 cv
70.5908 214.075 70.4419 214.354 70.1777 214.436 cv
69.0776 214.771 68.0605 214.91 67.1304 214.91 cv
cp
1 1 1 rgb
f
114.82 321.216 mo
114.82 326.086 114.081 330.786 112.69 335.196 cv
110.57 341.937 106.971 348.017 102.261 353.046 cv
102.161 353.166 102.061 353.276 101.951 353.387 cv
101.811 353.536 101.661 353.687 101.521 353.826 cv
93.0605 362.466 81.2607 367.836 68.2007 367.836 cv
66.1807 367.836 64.1704 367.706 62.2207 367.466 cv
62.2007 367.456 62.1904 367.456 62.1704 367.456 cv
57.3706 366.826 52.7905 365.477 48.5605 363.506 cv
48.2104 363.347 47.8608 363.177 47.5107 363.006 cv
40.6206 359.597 34.7007 354.517 30.2705 348.307 cv
29.8906 347.767 29.5107 347.227 29.1504 346.666 cv
28.2505 345.307 27.4307 343.896 26.6904 342.446 cv
23.4204 336.076 21.5806 328.866 21.5806 321.216 cv
21.5806 295.466 42.4507 274.597 68.2007 274.597 cv
93.9507 274.597 114.82 295.466 114.82 321.216 cv
cp
.909804 .882353 .937255 rgb
f
102.261 353.046 mo
102.161 353.166 102.061 353.276 101.951 353.387 cv
101.811 353.536 101.661 353.687 101.521 353.826 cv
93.0605 362.466 81.2607 367.836 68.2007 367.836 cv
66.1807 367.836 64.1704 367.706 62.2207 367.466 cv
62.2007 367.456 62.1904 367.456 62.1704 367.456 cv
57.3706 366.826 52.7905 365.477 48.5605 363.506 cv
48.9604 346.616 48.7905 331.836 48.7905 331.557 cv
48.9507 331.206 56.7705 329.196 67.1807 328.856 cv
83.5605 328.336 97.4004 337.576 102.261 353.046 cv
cp
.407843 .713726 .847059 rgb
f
62.2207 367.466 mo
62.2007 367.456 62.1904 367.456 62.1704 367.456 cv
57.3706 366.826 52.7905 365.477 48.5605 363.506 cv
48.2104 363.347 47.8608 363.177 47.5107 363.006 cv
40.6206 359.597 34.7007 354.517 30.2705 348.307 cv
39.2505 335.996 46.5903 332.406 48.7905 331.557 cv
49.2407 331.376 49.4707 331.316 49.4707 331.316 cv
62.2207 367.466 li
cp
f
69.2681 301.722 mo
69.2681 301.722 79.8447 302.493 80.6982 292.353 cv
81.6069 281.557 71.6294 280.271 67.2725 284.535 cv
62.9155 288.8 63.5903 293.266 63.5903 293.266 cv
63.5903 293.266 60.6963 290.522 57.3843 293.72 cv
54.9541 296.066 56.0786 300.03 56.0786 300.03 cv
56.0786 300.03 50.6226 299.683 51.0122 304.465 cv
51.4018 309.247 54.7519 311.753 54.7519 311.753 cv
69.2681 301.722 li
cp
0 0 0 rgb
f
59.1191 320.178 mo
59.938 331.457 li
59.938 331.457 62.2075 334.551 68.8447 334.608 cv
73.7891 334.651 75.4355 333.414 75.4355 333.414 cv
74.3354 327.752 li
73.2549 322.23 li
61.1499 320.475 li
59.1191 320.178 li
cp
.956863 .517647 .384314 rgb
f
61.1499 320.475 mo
61.2007 320.78 61.3442 321.135 61.5566 321.539 cv
64.4897 326.989 71.478 327.703 74.3354 327.752 cv
73.2549 322.23 li
61.1499 320.475 li
cp
0 0 0 rgb
f
73.9033 296.338 mo
73.9033 296.338 80.8496 310.05 79.0864 318.076 cv
77.3237 326.103 70.0547 325.271 65.6611 323.988 cv
61.2671 322.707 59.1177 320.18 59.1177 320.18 cv
59.1177 320.18 55.1724 321.773 52.2681 318.187 cv
49.3638 314.599 50.7754 310.208 53.0166 309.093 cv
55.2573 307.978 58.0835 309.48 58.0835 309.48 cv
55.7095 305.516 li
55.7095 305.516 63.5317 284.232 73.9033 296.338 cv
cp
.956863 .517647 .384314 rgb
f
58.0757 315.65 mo
57.9863 315.65 57.896 315.627 57.8144 315.576 cv
53.4175 312.875 li
53.1821 312.73 53.1084 312.423 53.2529 312.188 cv
53.3975 311.952 53.7056 311.877 53.9409 312.023 cv
58.3379 314.725 li
58.5732 314.869 58.647 315.177 58.5024 315.412 cv
58.4077 315.565 58.2436 315.65 58.0757 315.65 cv
cp
0 0 0 rgb
f
54.4243 315.948 mo
54.2393 315.948 54.062 315.846 53.9751 315.669 cv
53.8535 315.421 53.9556 315.121 54.2036 314.999 cv
56.5034 313.87 li
56.7519 313.75 57.0503 313.852 57.1724 314.099 cv
57.2939 314.347 57.1919 314.646 56.9438 314.769 cv
54.644 315.897 li
54.5732 315.932 54.498 315.948 54.4243 315.948 cv
cp
f
75.7559 301.699 mo
75.6558 301.699 75.5547 301.669 75.4668 301.606 cv
74.2363 300.732 73.0659 301.504 73.0171 301.537 cv
72.7881 301.689 72.478 301.632 72.3232 301.405 cv
72.1684 301.179 72.2241 300.869 72.4502 300.713 cv
72.5225 300.663 74.2349 299.505 76.0459 300.792 cv
76.271 300.951 76.3237 301.264 76.1641 301.489 cv
76.0664 301.626 75.9126 301.699 75.7559 301.699 cv
cp
f
73.9258 314.472 mo
73.8901 314.472 73.854 314.468 73.8179 314.46 cv
73.5478 314.4 73.3774 314.134 73.437 313.864 cv
74.3569 309.689 71.9897 306.899 71.9658 306.871 cv
71.7851 306.663 71.8076 306.347 72.0161 306.166 cv
72.2246 305.985 72.5395 306.008 72.7217 306.217 cv
72.833 306.345 75.4404 309.42 74.4136 314.079 cv
74.3623 314.313 74.1553 314.472 73.9258 314.472 cv
cp
f
75.5976 308.341 mo
75.3252 308.341 75.1025 308.123 75.0976 307.85 cv
75.0503 305.161 li
75.0454 304.885 75.2656 304.657 75.5415 304.652 cv
75.8306 304.684 76.0454 304.867 76.0503 305.144 cv
76.0976 307.832 li
76.1025 308.108 75.8823 308.336 75.6064 308.341 cv
75.6035 308.341 75.6006 308.341 75.5976 308.341 cv
cp
f
68.1938 308.861 mo
67.9214 308.861 67.6987 308.644 67.6938 308.37 cv
67.6465 305.683 li
67.6416 305.406 67.8613 305.179 68.1377 305.174 cv
68.395 305.143 68.6416 305.389 68.6465 305.665 cv
68.6938 308.353 li
68.6987 308.629 68.479 308.856 68.2026 308.861 cv
68.1997 308.861 68.1968 308.861 68.1938 308.861 cv
cp
f
75.3218 299.438 mo
75.3218 299.438 73.9326 297.26 71.1172 297.445 cv
68.3022 297.63 66.8032 299.731 66.8032 299.731 cv
66.8032 299.731 68.3818 304.38 64.7383 307.174 cv
61.0952 309.969 58.0835 309.48 58.0835 309.48 cv
55.2368 308.692 li
52.9062 304.785 li
60.3066 295.55 li
70.2993 289.311 li
75.9434 293.733 li
75.3218 299.438 li
cp
f
71.6289 317.297 mo
70.686 317.297 68.9018 317.03 67.8652 315.182 cv
67.73 314.941 67.8159 314.637 68.0566 314.501 cv
68.2988 314.367 68.602 314.452 68.7373 314.693 cv
69.814 316.611 71.9932 316.282 72.085 316.268 cv
72.3569 316.218 72.6143 316.407 72.6592 316.679 cv
72.7046 316.951 72.522 317.208 72.2505 317.254 cv
72.2178 317.259 71.9824 317.297 71.6289 317.297 cv
cp
f
78.5732 303.571 mo
77.5952 303.571 76.6689 303.954 75.9556 304.655 cv
75.2148 305.384 74.7925 306.367 74.7661 307.426 cv
74.7114 309.602 76.373 311.415 78.4697 311.468 cv
79.4883 311.505 80.4453 311.108 81.1811 310.385 cv
81.9219 309.656 82.3442 308.673 82.3706 307.615 cv
82.4253 305.438 80.7637 303.625 78.667 303.572 cv
78.6357 303.571 78.6045 303.571 78.5732 303.571 cv
cp
78.5644 312.469 mo
78.5244 312.469 78.4844 312.469 78.4443 312.468 cv
75.7964 312.401 73.6977 310.128 73.7661 307.4 cv
73.7993 306.082 74.3276 304.854 75.2544 303.942 cv
76.1855 303.027 77.4072 302.535 78.6924 302.572 cv
81.3403 302.639 83.439 304.912 83.3706 307.641 cv
83.3374 308.959 82.8091 310.187 81.8823 311.098 cv
80.98 311.984 79.8061 312.469 78.5644 312.469 cv
cp
1 1 1 rgb
f
67.1504 304.387 mo
66.1333 304.387 65.1709 304.771 64.4311 305.474 cv
63.667 306.201 63.2314 307.183 63.2051 308.237 cv
63.1787 309.291 63.5644 310.293 64.2915 311.058 cv
65.0185 311.821 65.9995 312.257 67.0542 312.283 cv
69.2217 312.333 71.0459 310.611 71.1006 308.435 cv
71.1553 306.258 69.4287 304.442 67.2515 304.388 cv
67.2178 304.387 67.1841 304.387 67.1504 304.387 cv
cp
67.1548 313.284 mo
67.1128 313.284 67.0713 313.284 67.0288 313.283 cv
65.7075 313.25 64.478 312.704 63.5669 311.746 cv
62.6558 310.789 62.1724 309.533 62.2051 308.212 cv
62.2383 306.891 62.7842 305.66 63.7422 304.749 cv
64.7002 303.838 65.96 303.361 67.2768 303.388 cv
70.0049 303.456 72.1689 305.731 72.1006 308.46 cv
72.0332 311.146 69.8262 313.284 67.1548 313.284 cv
cp
f
71.1352 308.42 mo
70.8721 308.42 70.6514 308.214 70.6367 307.948 cv
70.6211 307.673 70.8315 307.437 71.1074 307.421 cv
74.5923 307.224 li
74.8603 307.188 75.1045 307.419 75.1196 307.694 cv
75.1352 307.97 74.9243 308.206 74.6489 308.222 cv
71.1641 308.419 li
71.1543 308.42 71.145 308.42 71.1352 308.42 cv
cp
f
62.6885 309.379 mo
62.6079 309.379 62.5259 309.359 62.4502 309.318 cv
62.4048 309.293 57.7837 306.827 55.5918 309.044 cv
55.3979 309.24 55.0815 309.242 54.8848 309.048 cv
54.6885 308.854 54.6865 308.537 54.8809 308.341 cv
57.6001 305.591 62.7119 308.322 62.9277 308.439 cv
63.1704 308.571 63.2598 308.875 63.1284 309.117 cv
63.0376 309.284 62.8657 309.379 62.6885 309.379 cv
cp
f
69.2764 335.343 mo
66.3872 335.343 62.7851 334.545 58.8374 331.859 cv
58.6089 331.704 58.5498 331.394 58.7051 331.165 cv
58.8608 330.938 59.1719 330.878 59.3999 331.033 cv
68.5185 337.236 75.3848 332.969 75.6724 332.785 cv
75.9058 332.635 76.2139 332.702 76.3633 332.935 cv
76.5127 333.166 76.4463 333.476 76.2148 333.625 cv
76.1699 333.654 73.4775 335.343 69.2764 335.343 cv
cp
f
64.8545 303.023 mo
64.7598 303.023 64.6641 302.997 64.5791 302.94 cv
64.3486 302.788 64.2856 302.478 64.438 302.247 cv
65.8413 300.128 67.938 300.349 68.8501 300.758 cv
69.1016 300.871 69.2139 301.168 69.1006 301.419 cv
68.9873 301.67 68.6919 301.781 68.4414 301.671 cv
68.3594 301.634 66.5459 300.872 65.272 302.8 cv
65.1758 302.944 65.0166 303.023 64.8545 303.023 cv
cp
0 0 0 rgb
f
363.181 321.218 mo
363.181 327.478 361.95 333.448 359.711 338.898 cv
359.511 339.398 359.29 339.888 359.061 340.378 cv
353.44 352.848 342.49 362.408 329.101 366.128 cv
328.15 366.398 327.181 366.638 326.2 366.838 cv
325.87 366.908 325.551 366.968 325.221 367.028 cv
322.41 367.568 319.511 367.838 316.561 367.838 cv
314.91 367.838 313.28 367.758 311.67 367.588 cv
310.621 367.478 309.581 367.328 308.55 367.148 cv
307.19 366.908 305.86 366.618 304.541 366.268 cv
302.761 365.798 301.011 365.218 299.32 364.538 cv
295.411 362.988 291.761 360.918 288.451 358.418 cv
283.18 354.438 278.791 349.357 275.61 343.528 cv
271.99 336.898 269.93 329.298 269.93 321.218 cv
269.93 295.468 290.811 274.598 316.561 274.598 cv
342.311 274.598 363.181 295.468 363.181 321.218 cv
cp
.909804 .882353 .937255 rgb
f
329.101 366.126 mo
325.11 367.246 320.9 367.836 316.561 367.836 cv
313.831 367.836 311.15 367.606 308.551 367.146 cv
307.19 366.906 305.861 366.616 304.541 366.267 cv
302.761 365.796 301.011 365.216 299.32 364.536 cv
302.63 331.206 li
320.681 326.946 li
327.86 329.076 li
329.101 366.126 li
cp
.639216 .482353 .564706 rgb
f
322.98 321.128 mo
318.25 320.248 304.71 298.468 304.71 298.468 cv
304.71 298.468 297.97 290.158 299.791 289.058 cv
301.61 287.968 303.34 289.638 303.34 289.638 cv
303.34 289.638 309.371 288.688 314.891 288.468 cv
315.59 288.438 316.28 288.418 316.951 288.418 cv
318.98 288.408 320.82 288.538 322.091 288.898 cv
327.101 290.318 330.461 298.528 330.461 298.528 cv
330.461 298.528 332.971 298.298 334.03 301.718 cv
335.101 305.148 327.7 322.008 322.98 321.128 cv
cp
0 0 0 rgb
f
322.923 318.412 mo
323.155 329.882 li
323.155 329.882 321.153 333.222 314.454 333.902 cv
309.463 334.41 307.685 333.315 307.685 333.315 cv
308.264 327.492 li
308.836 321.813 li
320.899 318.902 li
322.923 318.412 li
cp
.956863 .517647 .384314 rgb
f
320.899 318.902 mo
320.877 319.216 320.766 319.588 320.589 320.016 cv
318.138 325.798 311.146 327.175 308.264 327.492 cv
308.836 321.813 li
320.899 318.902 li
cp
0 0 0 rgb
f
305.75 295.719 mo
305.75 295.719 300.021 310.223 302.556 318.165 cv
305.09 326.107 312.354 324.583 316.673 322.876 cv
320.99 321.169 322.925 318.414 322.925 318.414 cv
322.925 318.414 327.06 319.653 329.656 315.757 cv
332.253 311.86 330.415 307.558 328.047 306.642 cv
325.678 305.726 322.965 307.509 322.965 307.509 cv
324.99 303.281 li
324.99 303.281 315.09 282.518 305.75 295.719 cv
cp
.956863 .517647 .384314 rgb
f
305.75 295.719 mo
305.75 295.719 310.214 293.923 312.119 295.497 cv
314.024 297.071 316.27 310.367 322.965 307.509 cv
329.659 304.65 326.195 296.132 326.195 296.132 cv
326.195 296.132 309.357 281.713 305.75 295.719 cv
cp
0 0 0 rgb
f
308.318 326.955 mo
308.318 326.955 306.84 346.566 304.541 366.267 cv
292.07 362.956 281.661 354.606 275.611 343.526 cv
279.311 339.646 285.23 333.156 290.34 331.086 cv
299.261 327.466 308.318 326.955 308.318 326.955 cv
cp
.25098 .313726 .498039 rgb
f
312.558 334.407 mo
310.119 334.407 308.331 334.027 308.155 333.988 cv
307.886 333.929 307.716 333.662 307.775 333.393 cv
307.835 333.124 308.1 332.954 308.371 333.012 cv
308.472 333.033 318.482 335.152 323.719 329.007 cv
323.899 328.796 324.215 328.771 324.424 328.95 cv
324.634 329.13 324.659 329.445 324.48 329.655 cv
321.13 333.586 316.141 334.407 312.558 334.407 cv
cp
.572549 .705882 .917647 rgb
f
359.061 340.378 mo
353.44 352.848 342.49 362.408 329.101 366.128 cv
328.15 366.398 327.181 366.638 326.2 366.838 cv
325.87 366.908 325.551 366.968 325.221 367.028 cv
323.87 351.778 323.091 325.118 323.091 325.118 cv
323.091 325.118 343.86 325.428 359.061 340.378 cv
cp
.25098 .313726 .498039 rgb
f
323.478 313.913 mo
323.353 313.913 323.228 313.866 323.13 313.772 cv
322.932 313.581 322.926 313.265 323.118 313.065 cv
326.731 309.324 li
326.922 309.126 327.238 309.121 327.438 309.313 cv
327.637 309.504 327.643 309.82 327.45 310.02 cv
323.837 313.761 li
323.739 313.862 323.608 313.913 323.478 313.913 cv
cp
0 0 0 rgb
f
328.366 313 mo
328.324 313 328.282 312.995 328.24 312.983 cv
325.12 312.168 li
324.853 312.099 324.692 311.825 324.763 311.559 cv
324.832 311.29 325.107 311.127 325.372 311.201 cv
328.492 312.017 li
328.76 312.086 328.92 312.359 328.85 312.626 cv
328.791 312.852 328.589 313 328.366 313 cv
cp
f
304.805 302.242 mo
304.699 302.242 304.593 302.208 304.503 302.14 cv
304.287 301.973 304.241 301.668 304.403 301.449 cv
304.442 301.397 305.379 300.176 307.756 300.51 cv
308.029 300.549 308.219 300.803 308.18 301.076 cv
308.14 301.35 307.878 301.528 307.613 301.5 cv
305.868 301.249 305.228 302.019 305.201 302.052 cv
305.102 302.176 304.953 302.242 304.805 302.242 cv
cp
f
315.609 302.378 mo
315.496 302.378 315.383 302.34 315.289 302.262 cv
314.039 301.219 312.613 301.585 312.554 301.601 cv
312.29 301.673 312.014 301.515 311.941 301.249 cv
311.869 300.983 312.024 300.71 312.289 300.637 cv
312.369 300.614 314.266 300.107 315.93 301.494 cv
316.142 301.671 316.17 301.986 315.993 302.198 cv
315.895 302.316 315.752 302.378 315.609 302.378 cv
cp
f
305.28 307.958 mo
304.964 307.934 304.759 307.692 304.781 307.418 cv
304.998 304.747 li
305.02 304.472 305.266 304.271 305.536 304.289 cv
305.812 304.312 306.017 304.553 305.994 304.827 cv
305.777 307.498 li
305.757 307.76 305.538 307.958 305.28 307.958 cv
cp
f
313.179 308.283 mo
312.862 308.259 312.657 308.018 312.68 307.743 cv
312.896 305.073 li
312.918 304.798 313.168 304.602 313.435 304.615 cv
313.71 304.638 313.915 304.879 313.893 305.153 cv
313.676 307.823 li
313.655 308.085 313.437 308.283 313.179 308.283 cv
cp
f
307.197 314.332 mo
307.006 314.332 306.824 314.222 306.741 314.036 cv
305.065 310.284 307.578 307.261 307.687 307.134 cv
307.865 306.925 308.179 306.897 308.39 307.077 cv
308.601 307.255 308.627 307.57 308.449 307.781 cv
308.358 307.889 306.239 310.462 307.653 313.628 cv
307.767 313.88 307.653 314.176 307.401 314.288 cv
307.335 314.318 307.266 314.332 307.197 314.332 cv
cp
f
310.322 316.732 mo
310.046 316.732 309.822 316.509 309.822 316.232 cv
309.822 315.957 310.045 315.733 310.32 315.732 cv
310.391 315.731 312.052 315.702 312.649 314.275 cv
312.756 314.021 313.047 313.901 313.304 314.008 cv
313.559 314.114 313.678 314.407 313.571 314.662 cv
312.715 316.709 310.42 316.732 310.322 316.732 cv
cp
f
239.13 79.1382 mo
239.13 84.0078 238.391 88.708 237 93.1177 cv
235.17 98.938 232.23 104.268 228.42 108.848 cv
227.831 109.578 227.21 110.278 226.57 110.968 cv
226.47 111.088 226.371 111.198 226.261 111.308 cv
226.141 111.428 li
226.041 111.538 225.93 111.648 225.831 111.748 cv
224.49 113.108 223.07 114.398 221.57 115.598 cv
221.201 115.888 220.831 116.178 220.451 116.458 cv
220.07 116.748 219.68 117.028 219.291 117.298 cv
218.891 117.578 218.5 117.848 218.101 118.108 cv
217.701 118.368 217.291 118.628 216.88 118.878 cv
216.72 118.978 216.55 119.078 216.391 119.178 cv
216.18 119.308 215.96 119.438 215.74 119.558 cv
215.65 119.608 215.57 119.658 215.48 119.708 cv
215.201 119.868 214.92 120.018 214.641 120.168 cv
214.261 120.378 213.871 120.588 213.48 120.778 cv
213.201 120.918 212.92 121.058 212.63 121.198 cv
212.46 121.278 212.291 121.368 212.11 121.438 cv
211.84 121.568 211.57 121.698 211.291 121.808 cv
210.9 121.988 210.511 122.158 210.11 122.318 cv
209.831 122.428 209.561 122.548 209.28 122.648 cv
208.96 122.768 208.65 122.888 208.331 122.998 cv
208.21 123.048 208.09 123.088 207.97 123.128 cv
207.57 123.268 207.17 123.408 206.761 123.538 cv
206.411 123.658 206.05 123.768 205.69 123.858 cv
205.4 123.958 205.11 124.038 204.82 124.118 cv
204.74 124.138 204.661 124.158 204.59 124.178 cv
204.15 124.298 203.71 124.408 203.271 124.508 cv
201.851 124.848 200.4 125.118 198.94 125.318 cv
198.42 125.388 197.891 125.458 197.36 125.508 cv
196.831 125.568 196.291 125.608 195.761 125.648 cv
194.68 125.718 193.601 125.758 192.511 125.758 cv
190.73 125.758 188.96 125.658 187.23 125.468 cv
186.99 125.448 186.761 125.418 186.53 125.388 cv
186.511 125.378 186.5 125.378 186.48 125.378 cv
184.271 125.088 182.11 124.648 180.011 124.058 cv
177.541 123.378 175.15 122.488 172.871 121.428 cv
172.521 121.268 172.17 121.098 171.82 120.928 cv
169.57 119.818 167.43 118.528 165.42 117.078 cv
163.4 115.638 161.5 114.038 159.74 112.288 cv
159.011 111.568 158.311 110.828 157.641 110.058 cv
156.541 108.838 155.53 107.558 154.581 106.228 cv
154.201 105.688 153.82 105.148 153.46 104.588 cv
152.561 103.228 151.74 101.818 151 100.368 cv
147.73 93.998 145.891 86.7881 145.891 79.1382 cv
145.891 53.3882 166.761 32.5181 192.511 32.5181 cv
218.261 32.5181 239.13 53.3882 239.13 79.1382 cv
cp
.909804 .882353 .937255 rgb
f
182.45 59.8237 mo
182.45 59.8237 166.531 65.9121 165.719 83.9297 cv
164.545 109.972 195.755 103.935 195.755 103.935 cv
195.755 103.935 213.432 105.769 218.321 92.7373 cv
223.211 79.7061 207.495 71.8398 207.495 71.8398 cv
207.495 71.8398 188.438 55.0596 182.45 59.8237 cv
cp
0 0 0 rgb
f
228.42 108.848 mo
224.391 98.0381 212.92 81.5981 193.8 82.2979 cv
192.5 82.3481 191.24 82.4678 190.03 82.6479 cv
189.99 82.6582 189.95 82.668 189.911 82.668 cv
173 85.3179 161.811 100.448 157.641 110.058 cv
158.311 110.828 159.01 111.568 159.74 112.288 cv
161.5 114.038 163.4 115.638 165.42 117.078 cv
167.43 118.528 169.57 119.818 171.82 120.928 cv
172.17 121.098 172.521 121.268 172.871 121.428 cv
175.15 122.488 177.541 123.378 180.01 124.058 cv
182.11 124.648 184.271 125.088 186.48 125.378 cv
186.5 125.378 186.51 125.378 186.53 125.388 cv
186.76 125.418 186.99 125.448 187.22 125.468 cv
188.96 125.658 190.73 125.758 192.51 125.758 cv
193.601 125.758 194.68 125.718 195.76 125.648 cv
196.291 125.608 196.831 125.568 197.36 125.508 cv
197.891 125.458 198.42 125.388 198.94 125.318 cv
200.4 125.118 201.851 124.848 203.271 124.508 cv
203.71 124.408 204.15 124.298 204.59 124.178 cv
204.661 124.158 204.74 124.138 204.82 124.118 cv
205.11 124.038 205.4 123.958 205.69 123.858 cv
206.05 123.768 206.411 123.658 206.76 123.538 cv
207.17 123.408 207.57 123.268 207.97 123.128 cv
208.09 123.088 208.21 123.048 208.331 122.998 cv
208.65 122.888 208.96 122.768 209.28 122.648 cv
209.561 122.548 209.831 122.428 210.11 122.318 cv
210.51 122.158 210.9 121.988 211.291 121.808 cv
211.57 121.698 211.84 121.568 212.11 121.438 cv
212.291 121.368 212.46 121.278 212.63 121.198 cv
212.92 121.058 213.2 120.918 213.48 120.778 cv
213.871 120.588 214.26 120.378 214.641 120.168 cv
214.92 120.018 215.2 119.868 215.48 119.708 cv
215.57 119.658 215.65 119.608 215.74 119.558 cv
215.96 119.438 216.18 119.308 216.391 119.178 cv
216.55 119.078 216.72 118.978 216.88 118.878 cv
217.291 118.628 217.7 118.368 218.101 118.108 cv
218.5 117.848 218.891 117.578 219.291 117.298 cv
219.68 117.028 220.07 116.748 220.45 116.458 cv
220.831 116.178 221.2 115.888 221.57 115.598 cv
223.07 114.398 224.49 113.108 225.831 111.748 cv
228.42 108.848 li
cp
.407843 .713726 .847059 rgb
f
216.39 119.176 mo
209.41 123.356 201.24 125.756 192.51 125.756 cv
190.729 125.756 188.959 125.656 187.229 125.466 cv
186.99 125.446 186.76 125.417 186.53 125.386 cv
186.51 125.376 186.5 125.376 186.479 125.376 cv
184.27 125.086 182.11 124.646 180.01 124.057 cv
177.54 123.376 175.15 122.486 172.87 121.426 cv
172.52 121.267 172.17 121.096 171.82 120.926 cv
169.57 119.816 167.43 118.526 165.42 117.076 cv
165.33 110.207 165.28 104.787 165.28 104.787 cv
183.04 91.6064 li
191.76 85.1362 li
191.87 85.1362 191.979 85.1362 192.09 85.1465 cv
196.89 85.2466 200.94 86.2266 204.129 87.4063 cv
204.64 87.6064 205.129 87.7964 205.6 87.9966 cv
210.03 89.8765 212.43 91.9863 212.43 91.9863 cv
212.43 91.9863 214.51 105.767 216.39 119.176 cv
cp
f
189.625 75.8452 mo
189.993 85.6929 li
189.993 85.6929 191.838 88.7173 197.997 88.9873 cv
202.584 89.188 204.213 87.8843 204.213 87.8843 cv
203.5 83.3716 li
202.678 78.2119 li
191.501 76.187 li
189.625 75.8452 li
cp
.956863 .517647 .384314 rgb
f
189.625 75.3447 mo
189.663 75.6304 189.784 75.9644 189.968 76.3462 cv
192.513 81.5005 200.85 83.2339 203.5 83.3716 cv
202.678 78.2119 li
189.625 75.3447 li
cp
0 0 0 rgb
f
204.125 54.2026 mo
204.125 54.2026 210.124 67.1553 208.226 74.5474 cv
206.328 81.939 199.609 80.9287 195.573 79.5962 cv
191.537 78.2632 189.624 75.8477 189.624 75.8477 cv
189.624 75.8477 185.911 77.1978 183.333 73.7739 cv
180.754 70.3496 182.208 66.3208 184.324 65.3584 cv
186.44 64.3965 189.014 65.8833 189.014 65.8833 cv
186.94 62.1265 li
186.94 62.1265 194.895 42.6294 204.125 54.2026 cv
cp
.956863 .517647 .384314 rgb
f
206.062 59.585 mo
206.037 59.585 206.013 59.583 205.988 59.5796 cv
203.427 59.1997 li
203.154 59.1592 202.965 58.9048 203.006 58.6318 cv
203.047 58.3584 203.301 58.1763 203.574 58.2104 cv
206.134 58.5903 li
206.408 58.6309 206.596 58.8853 206.556 59.1582 cv
206.519 59.4067 206.305 59.585 206.062 59.585 cv
cp
0 0 0 rgb
f
196.51 60.6436 mo
196.315 60.6436 196.13 60.5283 196.049 60.3374 cv
195.942 60.0825 196.062 59.7896 196.316 59.6826 cv
199.289 58.4341 li
199.543 58.3286 199.836 58.4468 199.943 58.7012 cv
200.05 58.9561 199.931 59.249 199.676 59.356 cv
196.704 60.6045 li
196.641 60.6309 196.575 60.6436 196.51 60.6436 cv
cp
f
204.046 70.207 mo
204.029 70.207 204.012 70.2061 203.995 70.2046 cv
203.72 70.1768 203.52 69.9312 203.548 69.6567 cv
203.958 65.6138 202.283 63.5786 202.266 63.5586 cv
202.088 63.3481 202.113 63.0332 202.323 62.8545 cv
202.532 62.6758 202.846 62.6992 203.025 62.9077 cv
203.106 63.0015 205 65.2568 204.543 69.7573 cv
204.517 70.0151 204.299 70.207 204.046 70.207 cv
cp
f
198.708 72.7061 mo
198.869 73.0454 199.146 73.4009 199.62 73.5361 cv
200.093 73.6743 200.536 73.4922 200.871 73.2661 cv
198.708 72.7061 li
cp
199.962 74.5854 mo
199.764 74.5854 199.558 74.5586 199.345 74.498 cv
197.691 74.0254 197.505 72.1294 197.499 72.0488 cv
197.484 71.8867 197.549 71.7285 197.673 71.6235 cv
197.797 71.5181 197.965 71.4795 198.122 71.521 cv
202.005 72.5269 li
202.167 72.5688 202.297 72.689 202.352 72.8467 cv
202.407 73.0049 202.379 73.1797 202.278 73.313 cv
202.233 73.3721 201.294 74.5854 199.962 74.5854 cv
cp
f
189.031 71.2861 mo
188.962 71.2861 188.892 71.272 188.825 71.2412 cv
183.551 68.8442 li
183.3 68.73 183.189 68.4336 183.303 68.1821 cv
183.417 67.9316 183.712 67.8179 183.965 67.9341 cv
189.239 70.3311 li
189.49 70.4453 189.601 70.7417 189.487 70.9932 cv
189.403 71.1772 189.222 71.2861 189.031 71.2861 cv
cp
f
184.333 72.5049 mo
184.205 72.5049 184.076 72.4556 183.978 72.3564 cv
183.784 72.1602 183.786 71.8433 183.982 71.6494 cv
186.307 69.3516 li
186.503 69.1567 186.82 69.1587 187.014 69.3555 cv
187.208 69.5518 187.206 69.8687 187.01 70.0625 cv
184.685 72.3604 li
184.587 72.457 184.46 72.5049 184.333 72.5049 cv
cp
f
196.51 55.6045 mo
196.51 55.6045 199.513 55.1758 202.646 56.959 cv
205.78 58.7417 206.423 60.4795 206.423 60.4795 cv
206.423 60.4795 208.361 55.8755 204.114 51.8135 cv
199.866 47.7515 191.716 46.625 187.018 51.4307 cv
182.32 56.2368 182.608 60.4795 182.608 60.4795 cv
189.014 65.8833 li
189.014 65.8833 198.907 64.0903 196.51 55.6045 cv
cp
f
185.875 52.7227 mo
185.875 52.7227 179.831 41.2441 173.705 46.0947 cv
167.578 50.9453 174.4 60.7363 180.485 61.4502 cv
186.571 62.1646 185.875 52.7227 185.875 52.7227 cv
cp
f
187.229 125.466 mo
186.99 125.446 186.76 125.417 186.53 125.386 cv
186.51 125.376 186.5 125.376 186.479 125.376 cv
184.27 125.086 182.11 124.646 180.01 124.057 cv
183.04 91.6064 li
183.14 90.5762 li
189.625 87.3145 li
188.457 84.4814 li
188.457 84.4814 195.34 111.526 187.229 125.466 cv
cp
.407843 .713726 .847059 rgb
f
216.879 118.876 mo
216.72 118.977 216.55 119.076 216.39 119.176 cv
216.18 119.307 215.959 119.437 215.74 119.557 cv
217.91 108.227 213.47 101.736 213.42 101.667 cv
213.26 101.437 213.3 101.106 213.52 100.937 cv
213.75 100.767 214.06 100.816 214.22 101.046 cv
214.42 101.326 218.76 107.626 216.879 118.876 cv
cp
.968627 .701961 .411765 rgb
f
198.558 89.4878 mo
192.88 89.4878 189.667 86.0767 189.625 86.0308 cv
189.438 85.8276 189.452 85.5122 189.655 85.3252 cv
189.859 85.1387 190.174 85.1514 190.361 85.3545 cv
190.572 85.5825 195.637 90.9097 204.589 87.2002 cv
204.843 87.0962 205.138 87.2153 205.243 87.4707 cv
205.349 87.7256 205.228 88.0181 204.972 88.124 cv
202.582 89.1147 200.435 89.4878 198.558 89.4878 cv
cp
f
190.336 75.3447 mo
190.336 76.3828 189.495 77.2241 188.457 77.2241 cv
187.419 77.2241 186.578 76.3828 186.578 75.3447 cv
186.578 74.3071 187.419 73.4653 188.457 73.4653 cv
189.495 73.4653 190.336 74.3071 190.336 75.3447 cv
cp
.901961 .956863 1 rgb
f
197.997 66.0332 mo
197.72 66.0332 197.497 65.8096 197.497 65.5332 cv
197.497 63.2339 li
197.497 63.1025 197.548 62.9766 197.64 62.8828 cv
198.658 61.8496 li
198.852 61.6528 199.167 61.6504 199.365 61.8442 cv
199.562 62.0381 199.564 62.355 199.371 62.5518 cv
198.497 63.439 li
198.497 65.5332 li
198.497 65.8096 198.273 66.0332 197.997 66.0332 cv
cp
0 0 0 rgb
f
205.552 66.0332 mo
205.276 66.0332 205.052 65.8096 205.052 65.5332 cv
205.052 63.2339 li
205.052 63.1025 205.104 62.9766 205.196 62.8828 cv
206.214 61.8496 li
206.407 61.6528 206.723 61.6499 206.921 61.8447 cv
207.118 62.0386 207.12 62.355 206.926 62.5518 cv
206.052 63.439 li
206.052 65.5332 li
206.052 65.8096 205.829 66.0332 205.552 66.0332 cv
cp
f
239 200.176 mo
239 208.687 236.721 216.666 232.73 223.536 cv
232.581 223.796 232.42 224.057 232.261 224.316 cv
231.891 224.937 231.5 225.557 231.09 226.156 cv
230.92 226.406 230.75 226.656 230.561 226.906 cv
224.48 235.616 215.48 242.116 205 245.066 cv
204.78 245.126 204.551 245.187 204.331 245.246 cv
200.521 246.256 196.511 246.796 192.38 246.796 cv
176.271 246.796 162.061 238.626 153.71 226.196 cv
152.92 225.046 152.19 223.847 151.521 222.626 cv
147.851 215.966 145.761 208.316 145.761 200.176 cv
145.761 174.426 166.63 153.556 192.38 153.556 cv
218.13 153.556 239 174.426 239 200.176 cv
cp
.909804 .882353 .937255 rgb
f
227.23 209.688 mo
227.391 233.488 203.701 229.488 203.701 229.488 cv
181.271 220.618 li
181.271 220.618 158.8 208.738 173.53 194.988 cv
173.53 194.988 168.38 171.858 186.621 167.218 cv
186.701 167.188 186.78 167.168 186.86 167.148 cv
187.46 167.008 188.041 166.888 188.601 166.808 cv
205.49 164.188 206.94 186.918 206.94 186.918 cv
206.94 186.918 227.101 190.648 227.23 209.688 cv
cp
0 0 0 rgb
f
230.561 226.91 mo
224.48 235.62 215.48 242.12 205 245.069 cv
204.781 245.13 204.551 245.189 204.331 245.25 cv
200.521 246.26 196.511 246.8 192.38 246.8 cv
190.451 246.8 188.551 246.68 186.681 246.46 cv
185.111 246.26 183.561 245.989 182.041 245.649 cv
170.281 242.989 160.221 235.89 153.71 226.199 cv
159.971 217.64 167.82 211.16 173.161 208.859 cv
181.061 205.46 193.591 203.18 205.161 206.489 cv
205.19 206.5 205.23 206.5 205.271 206.51 cv
208.75 207.51 212.13 209.01 215.281 211.14 cv
222.091 215.739 227.051 221.08 230.561 226.91 cv
cp
.407843 .462745 .666667 rgb
f
183.874 198.357 mo
183.876 198.628 li
184.104 203.73 li
184.266 207.732 li
184.266 207.732 184.954 209.337 189.612 209.035 cv
195.854 208.606 196.836 205.25 196.836 205.25 cv
197.103 195.871 li
195.21 196.231 li
183.874 198.357 li
cp
.956863 .517647 .384314 rgb
f
183.876 198.628 mo
184.104 203.73 li
187.137 203.362 192.658 202.049 194.888 197.278 cv
195.06 196.89 195.173 196.541 195.21 196.251 cv
183.895 198.55 li
183.876 198.628 li
cp
0 0 0 rgb
f
181.897 174.204 mo
181.897 174.204 176.092 187.491 178.183 194.956 cv
180.275 202.421 187.076 201.245 191.145 199.803 cv
195.214 198.359 197.103 195.864 197.103 195.864 cv
197.103 195.864 200.904 197.153 203.446 193.618 cv
205.989 190.083 204.423 186.024 202.253 185.094 cv
200.083 184.164 197.502 185.731 197.502 185.731 cv
199.524 181.87 li
199.524 181.87 191.014 162.246 181.897 174.204 cv
cp
.956863 .517647 .384314 rgb
f
183.699 172.237 mo
183.699 172.237 183.279 179.306 190.39 182.519 cv
197.502 185.731 202.253 185.094 202.253 185.094 cv
201.791 175.875 li
192.136 167.592 li
184.93 168.741 li
183.699 172.237 li
cp
0 0 0 rgb
f
197.021 183.692 mo
197.047 187.718 li
200.628 184.187 li
197.021 183.692 li
cp
f
232.261 224.316 mo
231.891 224.937 231.5 225.557 231.09 226.156 cv
230.92 226.406 230.75 226.656 230.561 226.906 cv
224.48 235.616 215.48 242.116 205 245.066 cv
204.78 245.126 204.551 245.187 204.331 245.246 cv
204.971 206.456 li
204.971 206.456 205.041 206.466 205.161 206.486 cv
205.19 206.496 205.23 206.496 205.271 206.506 cv
207.57 206.896 222.641 209.876 230.73 221.736 cv
231.28 222.526 231.78 223.396 232.261 224.316 cv
cp
.407843 .462745 .666667 rgb
f
180.246 179.079 mo
180.033 179.079 179.836 178.942 179.769 178.729 cv
179.687 178.465 179.833 178.184 180.097 178.102 cv
182.745 177.274 li
183.008 177.19 183.289 177.338 183.371 177.602 cv
183.454 177.865 183.307 178.146 183.043 178.228 cv
180.396 179.056 li
180.346 179.072 180.295 179.079 180.246 179.079 cv
cp
0 0 0 rgb
f
197.773 191.955 mo
197.639 191.955 197.504 191.901 197.406 191.793 cv
197.219 191.59 197.231 191.274 197.435 191.087 cv
201.531 187.318 li
201.734 187.13 202.051 187.144 202.238 187.347 cv
202.424 187.55 202.412 187.867 202.208 188.053 cv
198.112 191.823 li
198.016 191.912 197.895 191.955 197.773 191.955 cv
cp
f
201.923 191.459 mo
201.856 191.459 201.788 191.445 201.722 191.417 cv
199.277 190.344 li
199.025 190.232 198.91 189.938 199.021 189.685 cv
199.132 189.433 199.426 189.317 199.68 189.428 cv
202.125 190.501 li
202.377 190.612 202.492 190.907 202.381 191.16 cv
202.299 191.347 202.115 191.459 201.923 191.459 cv
cp
f
181.065 185.781 mo
181.031 185.781 180.997 185.777 180.963 185.771 cv
180.692 185.714 180.519 185.45 180.575 185.179 cv
181.061 182.838 li
180.107 181.739 li
179.926 181.531 179.949 181.215 180.157 181.034 cv
180.366 180.853 180.682 180.875 180.862 181.084 cv
181.978 182.37 li
182.081 182.487 182.122 182.646 182.09 182.799 cv
181.554 185.382 li
181.505 185.619 181.297 185.781 181.065 185.781 cv
cp
f
189.076 186.188 mo
189.042 186.188 189.008 186.185 188.974 186.178 cv
188.704 186.122 188.53 185.857 188.586 185.587 cv
189.071 183.246 li
188.118 182.147 li
187.938 181.938 187.96 181.623 188.168 181.441 cv
188.377 181.261 188.692 181.283 188.874 181.492 cv
189.989 182.777 li
190.091 182.895 190.133 183.054 190.101 183.207 cv
189.565 185.79 li
189.516 186.026 189.308 186.188 189.076 186.188 cv
cp
f
182.649 191.615 mo
182.417 191.615 182.21 191.454 182.161 191.218 cv
181.269 186.958 183.334 184.81 183.423 184.72 cv
183.617 184.523 183.933 184.521 184.13 184.716 cv
184.326 184.91 184.328 185.226 184.135 185.422 cv
184.051 185.51 182.367 187.321 183.139 191.013 cv
183.196 191.283 183.022 191.548 182.752 191.604 cv
182.718 191.612 182.683 191.615 182.649 191.615 cv
cp
f
185.609 193.642 mo
186.349 194.406 186.84 194.7 186.989 194.701 cv
187.341 194.653 188.202 193.57 188.321 193.073 cv
188.038 193.077 187.215 193.182 185.609 193.642 cv
cp
186.967 195.703 mo
186.68 195.703 185.994 195.57 184.572 193.997 cv
184.402 193.809 184.342 193.555 184.408 193.316 cv
184.478 193.069 184.673 192.875 184.931 192.799 cv
188.35 191.775 188.804 192.116 189.021 192.28 cv
189.195 192.411 189.458 192.728 189.266 193.376 cv
189.034 194.156 187.965 195.638 187.053 195.699 cv
187.03 195.701 187.001 195.703 186.967 195.703 cv
cp
f
169.796 224.097 mo
169.746 224.155 164.969 229.276 165.876 238.482 cv
165.589 238.298 165.312 238.104 165.036 237.898 cv
164.957 237.848 164.887 237.786 164.808 237.725 cv
164.221 228.584 169.017 223.473 169.078 223.404 cv
169.271 223.207 169.582 223.202 169.789 223.386 cv
169.985 223.579 169.99 223.899 169.796 224.097 cv
cp
.572549 .705882 .917647 rgb
f
190.23 209.88 mo
186.681 246.46 li
185.111 246.26 183.561 245.989 182.041 245.649 cv
186.9 210.72 li
190.23 209.88 li
cp
f
184.182 205.658 mo
184.182 205.658 179.441 216.15 180.575 215.986 cv
181.709 215.822 188.696 210.142 188.696 210.142 cv
188.696 210.142 193.27 216.569 194.865 216.688 cv
196.46 216.808 196.981 205.185 196.981 205.185 cv
196.981 205.185 195.774 208.472 189.819 209.028 cv
183.865 209.586 184.182 205.658 184.182 205.658 cv
cp
.901961 .956863 1 rgb
f
239 321.216 mo
239 330.116 236.5 338.437 232.181 345.517 cv
223.991 358.906 209.23 367.836 192.38 367.836 cv
178.331 367.836 165.73 361.616 157.19 351.786 cv
150.07 343.606 145.761 332.906 145.761 321.216 cv
145.761 295.466 166.63 274.597 192.38 274.597 cv
218.13 274.597 239 295.466 239 321.216 cv
cp
.909804 .882353 .937255 rgb
f
197.504 308.98 mo
197.504 308.98 204.9 305.478 205.711 311.278 cv
206.652 317.999 198.591 318.374 198.591 318.374 cv
197.504 308.98 li
cp
.956863 .517647 .384314 rgb
f
201.468 314.965 mo
201.389 314.965 201.308 314.946 201.233 314.906 cv
200.989 314.776 200.897 314.474 201.027 314.229 cv
203.37 309.831 li
203.5 309.588 203.802 309.494 204.046 309.625 cv
204.29 309.755 204.382 310.058 204.252 310.302 cv
201.91 314.7 li
201.82 314.869 201.646 314.965 201.468 314.965 cv
cp
0 0 0 rgb
f
202.19 313.609 mo
201.919 313.609 201.697 313.393 201.69 313.12 cv
201.685 312.845 201.903 312.615 202.179 312.609 cv
204.326 312.562 li
204.648 312.534 204.831 312.774 204.837 313.051 cv
204.843 313.326 204.625 313.556 204.349 313.562 cv
202.202 313.609 li
202.198 313.609 202.194 313.609 202.19 313.609 cv
cp
f
232.181 345.517 mo
229.23 350.336 225.431 354.576 220.991 358.017 cv
220.701 358.256 220.411 358.477 220.111 358.687 cv
212.361 364.446 202.771 367.836 192.38 367.836 cv
186.15 367.836 180.201 366.616 174.771 364.396 cv
174.46 364.267 174.15 364.137 173.84 363.996 cv
167.4 361.206 161.721 357.006 157.19 351.786 cv
159.061 345.977 162.551 340.456 168.771 336.956 cv
184.65 328.026 208.431 328.026 219.011 333.046 cv
225.511 336.126 229.801 341.646 232.181 345.517 cv
cp
.639216 .482353 .564706 rgb
f
200.539 302.31 mo
200.539 302.31 205.427 294.426 204.44 291.06 cv
203.454 287.694 199.052 290.993 199.052 290.993 cv
199.052 290.993 198.05 283.743 192.651 285.15 cv
185.463 287.024 178.324 299.683 178.324 299.683 cv
178.324 299.683 174.664 298.765 173.425 301.974 cv
171.983 305.709 173.248 309.899 175.557 313.628 cv
177.865 317.355 184.117 314.281 184.117 314.281 cv
200.539 302.31 li
cp
0 0 0 rgb
f
185.366 325.132 mo
185.626 333.768 li
185.626 333.768 188.824 335.438 192.738 335.353 cv
198.023 335.237 199.724 332.912 199.724 332.912 cv
199.257 321.71 li
185.366 325.132 li
cp
.956863 .517647 .384314 rgb
f
185.361 324.93 mo
185.361 324.93 188.702 331.42 194.663 330.291 cv
199.468 329.382 199.271 322.576 199.271 322.576 cv
185.361 324.93 li
cp
0 0 0 rgb
f
200.539 302.31 mo
200.539 302.31 203.183 317.326 200.507 323.196 cv
197.504 329.781 189.819 328.899 187.063 326.946 cv
183.346 324.311 181.743 320.051 181.743 320.051 cv
181.743 320.051 176.819 321.23 175.008 317.249 cv
173.106 313.066 176.063 309.517 178.536 309.218 cv
181.01 308.919 181.317 309.36 181.317 309.36 cv
180.413 304.85 li
180.413 304.85 194.849 287.495 200.539 302.31 cv
cp
.956863 .517647 .384314 rgb
f
181.317 309.36 mo
181.317 309.36 184.534 309.474 188.165 306.586 cv
192.425 303.197 191.752 297.604 191.752 297.604 cv
191.752 297.604 199.506 302.051 201.434 307.911 cv
203.361 313.771 203.333 293.885 194.756 294.605 cv
186.179 295.325 174.734 300.927 181.317 309.36 cv
cp
0 0 0 rgb
f
180.739 315.995 mo
180.63 315.995 180.521 315.96 180.429 315.887 cv
176.473 312.751 li
176.256 312.58 176.22 312.266 176.391 312.049 cv
176.564 311.832 176.878 311.796 177.094 311.968 cv
181.05 315.104 li
181.267 315.274 181.303 315.589 181.132 315.806 cv
181.033 315.931 180.887 315.995 180.739 315.995 cv
cp
f
177.227 316.737 mo
177.082 316.737 176.938 316.675 176.839 316.553 cv
176.665 316.339 176.697 316.024 176.911 315.85 cv
179.105 314.063 li
179.32 313.89 179.635 313.92 179.809 314.135 cv
179.983 314.349 179.951 314.663 179.737 314.838 cv
177.542 316.625 li
177.45 316.7 177.338 316.737 177.227 316.737 cv
cp
f
188.943 311.595 mo
188.689 311.595 188.471 311.401 188.446 311.144 cv
188.209 308.718 li
188.183 308.442 188.384 308.198 188.658 308.171 cv
188.939 308.155 189.178 308.346 189.205 308.62 cv
189.441 311.046 li
189.468 311.321 189.267 311.565 188.992 311.593 cv
188.976 311.594 188.959 311.595 188.943 311.595 cv
cp
f
198.392 311.24 mo
198.137 311.24 197.919 311.047 197.895 310.789 cv
197.658 308.363 li
197.631 308.088 197.832 307.844 198.106 307.816 cv
198.382 307.803 198.626 307.992 198.653 308.266 cv
198.89 310.691 li
198.917 310.967 198.715 311.211 198.44 311.238 cv
198.424 311.239 198.408 311.24 198.392 311.24 cv
cp
f
194.929 317.251 mo
194.903 317.251 194.877 317.249 194.851 317.245 cv
194.578 317.202 194.392 316.946 194.434 316.673 cv
195 313.082 193.725 310.176 193.711 310.146 cv
193.599 309.895 193.712 309.599 193.964 309.486 cv
194.217 309.37 194.512 309.487 194.625 309.738 cv
194.682 309.867 196.033 312.947 195.422 316.829 cv
195.383 317.075 195.171 317.251 194.929 317.251 cv
cp
f
199.221 306.164 mo
199.111 306.164 199 306.128 198.908 306.054 cv
198.107 305.41 196.66 305.475 196.645 305.476 cv
196.373 305.516 196.135 305.278 196.12 305.003 cv
196.106 304.728 196.317 304.492 196.592 304.478 cv
196.668 304.472 198.434 304.391 199.534 305.274 cv
199.75 305.447 199.784 305.762 199.611 305.978 cv
199.512 306.101 199.367 306.164 199.221 306.164 cv
cp
f
188.142 306.533 mo
187.993 306.533 187.845 306.467 187.747 306.34 cv
187.577 306.121 187.617 305.808 187.835 305.638 cv
188.952 304.772 190.716 304.888 190.791 304.892 cv
191.066 304.911 191.273 305.15 191.254 305.425 cv
191.235 305.7 191.003 305.913 190.721 305.89 cv
190.706 305.89 189.26 305.799 188.448 306.429 cv
188.357 306.499 188.249 306.533 188.142 306.533 cv
cp
f
180.173 309.429 mo
180.173 309.429 181.905 313.825 182.476 313.62 cv
183.046 313.416 181.801 306.425 180.111 306.207 cv
178.421 305.988 180.173 309.429 180.173 309.429 cv
cp
f
193.14 321.037 mo
191.688 321.037 190.903 320.145 190.667 319.563 cv
190.563 319.308 190.686 319.016 190.942 318.912 cv
191.194 318.808 191.485 318.93 191.591 319.183 cv
191.65 319.314 192.193 320.42 194.033 319.903 cv
194.297 319.832 194.576 319.984 194.649 320.25 cv
194.724 320.516 194.569 320.792 194.303 320.866 cv
193.875 320.985 193.489 321.037 193.14 321.037 cv
cp
f
175.9 358.466 mo
174.771 364.396 li
174.46 364.267 174.15 364.137 173.84 363.996 cv
174.931 358.276 li
174.98 358.006 175.241 357.826 175.521 357.876 cv
175.791 357.937 175.96 358.187 175.9 358.466 cv
cp
.968627 .701961 .411765 rgb
f
199.631 331.233 mo
199.631 331.233 204.815 341.703 203.563 341.545 cv
202.31 341.387 194.62 335.74 194.62 335.74 cv
194.62 335.74 188.546 342.521 186.783 342.648 cv
185.02 342.775 185.49 330.825 185.49 330.825 cv
185.49 330.825 186.786 334.7 193.384 334.633 cv
200.144 334.564 199.631 331.233 199.631 331.233 cv
cp
f
114.96 79.0781 mo
114.96 87.978 112.46 96.2979 108.141 103.378 cv
107.391 104.608 106.581 105.788 105.73 106.938 cv
105.101 107.778 104.451 108.588 103.761 109.378 cv
101.97 111.478 99.9902 113.408 97.8603 115.168 cv
97.1606 115.738 96.4404 116.298 95.7007 116.828 cv
95.3003 117.128 94.8906 117.418 94.4702 117.698 cv
93.7505 118.178 93.0205 118.648 92.2705 119.088 cv
92.1304 119.188 91.9805 119.268 91.8306 119.358 cv
91.6802 119.448 91.5205 119.538 91.3603 119.628 cv
89.8804 120.478 88.3306 121.238 86.7505 121.918 cv
83.4204 123.358 79.8804 124.408 76.2007 125.028 cv
75.7905 125.108 75.3906 125.168 74.9805 125.228 cv
73.9404 125.378 72.8906 125.488 71.8306 125.568 cv
71.7202 125.578 71.6103 125.588 71.5005 125.588 cv
70.7705 125.638 70.0205 125.668 69.2705 125.678 cv
68.9604 125.698 68.6504 125.698 68.3403 125.698 cv
64.5806 125.698 60.9106 125.248 57.4106 124.408 cv
54.5605 123.728 51.8203 122.778 49.2007 121.578 cv
47.1206 120.658 45.1206 119.568 43.2104 118.348 cv
42.5005 117.898 41.8003 117.418 41.1103 116.918 cv
40.3003 116.338 39.5107 115.728 38.7402 115.078 cv
36.7305 113.438 34.8603 111.618 33.1504 109.648 cv
32.7705 109.208 32.4004 108.768 32.0405 108.318 cv
31.6504 107.838 31.2705 107.348 30.9004 106.848 cv
30.7402 106.638 30.5903 106.438 30.4404 106.228 cv
29.2104 104.518 28.1006 102.718 27.1103 100.838 cv
26.7104 100.098 26.3403 99.3379 25.9902 98.5781 cv
23.2402 92.6382 21.7202 86.0278 21.7202 79.0781 cv
21.7202 53.3281 42.5903 32.458 68.3403 32.458 cv
94.0903 32.458 114.96 53.3281 114.96 79.0781 cv
cp
.909804 .882353 .937255 rgb
f
95.7007 116.828 mo
95.3003 117.128 94.8906 117.418 94.4702 117.698 cv
93.6103 118.278 92.7305 118.838 91.8306 119.358 cv
86.7505 122.328 81.0605 124.358 74.9805 125.228 cv
74.6904 125.268 74.4004 125.308 74.1006 125.338 cv
72.5503 125.538 70.9702 125.648 69.3603 125.678 cv
69.2705 125.678 li
68.9604 125.698 68.6504 125.698 68.3403 125.698 cv
64.5806 125.698 60.9106 125.248 57.4106 124.408 cv
52.3003 123.178 47.5107 121.108 43.2104 118.348 cv
41.6504 117.358 40.1606 116.268 38.7402 115.078 cv
36.7305 113.438 34.8603 111.618 33.1504 109.648 cv
32.7705 109.208 32.4004 108.768 32.0405 108.318 cv
31.4507 100.328 38.9702 92.6279 40.3105 91.0581 cv
44.6206 85.958 56.7402 83.1177 68.6406 83.458 cv
68.6406 83.458 84.8506 83.3979 91.6006 90.6079 cv
94.5703 93.7778 95.5605 105.078 95.7007 116.828 cv
cp
.572549 .705882 .917647 rgb
f
41.7207 89.6851 mo
41.1108 116.92 li
40.3008 116.34 39.5107 115.729 38.7407 115.08 cv
36.7305 113.439 34.8608 111.62 33.1504 109.649 cv
32.7705 109.209 32.4004 108.77 32.0405 108.32 cv
31.6504 107.84 31.2705 107.35 30.9004 106.85 cv
30.7407 106.64 30.5908 106.439 30.4404 106.229 cv
29.2104 104.52 28.1006 102.72 27.1108 100.84 cv
33.0649 95.1309 41.7207 89.6851 41.7207 89.6851 cv
cp
f
103.761 109.378 mo
101.97 111.478 99.9902 113.408 97.8603 115.168 cv
97.1606 115.738 96.4404 116.298 95.7007 116.828 cv
95.3003 117.128 94.8906 117.418 94.4702 117.698 cv
94.2803 117.828 94.0806 117.958 93.8906 118.078 cv
93.6504 118.238 93.4106 118.398 93.1704 118.538 cv
92.7305 118.828 92.2803 119.098 91.8306 119.358 cv
90.2007 120.318 88.5005 121.168 86.7505 121.918 cv
80.9604 117.148 li
92.0005 91.0581 li
103.761 109.378 li
cp
f
59.7544 75.0234 mo
58.9951 84.3774 li
58.9951 84.3774 59.6323 87.2144 65.7524 88.2148 cv
70.3115 88.9604 72.7993 86.209 72.7993 86.209 cv
72.7217 84.1899 li
72.5132 78.9375 li
61.5869 75.5874 li
59.7544 75.0234 li
cp
.956863 .517647 .384314 rgb
f
61.5869 75.5874 mo
61.5903 75.8774 61.6724 76.2256 61.8105 76.6284 cv
63.7402 82.0801 70.0903 83.7373 72.7217 84.1899 cv
72.5132 78.9375 li
61.5869 75.5874 li
cp
0 0 0 rgb
f
76.8091 55.124 mo
76.8091 55.124 81.2646 68.7759 78.4907 75.9351 cv
75.7163 83.0942 69.124 81.2871 65.2505 79.4766 cv
61.3765 77.666 59.7524 75.0254 59.7524 75.0254 cv
59.7524 75.0254 55.8823 75.9336 53.7134 72.2065 cv
51.5444 68.4795 53.4746 64.6274 55.7031 63.9175 cv
57.9311 63.2075 60.3262 64.9985 60.3262 64.9985 cv
58.7002 60.999 li
58.7002 60.999 68.9624 42.4658 76.8091 55.124 cv
cp
.956863 .517647 .384314 rgb
f
74.6372 71.791 mo
74.5718 71.791 74.5049 71.7783 74.4409 71.751 cv
74.187 71.6426 74.0688 71.3486 74.1772 71.0947 cv
75.1533 68.8062 73.6416 66.043 73.6265 66.0151 cv
73.4922 65.7739 73.5786 65.4697 73.8193 65.335 cv
74.0605 65.2012 74.3647 65.2866 74.499 65.5273 cv
74.5723 65.6572 76.2681 68.7417 75.0972 71.4873 cv
75.0161 71.6772 74.831 71.791 74.6372 71.791 cv
cp
0 0 0 rgb
f
59.1777 71.061 mo
59.0576 71.061 58.9394 71.0073 58.8613 70.9048 cv
55.6958 66.7686 li
55.562 66.5942 55.5952 66.3442 55.77 66.2109 cv
55.9443 66.0752 56.1943 66.1104 56.3276 66.2852 cv
59.4932 70.4214 li
59.6269 70.5957 59.5937 70.8457 59.4189 70.979 cv
59.3472 71.0347 59.2617 71.061 59.1777 71.061 cv
cp
f
55.5176 69.6616 mo
55.3066 69.6616 55.1304 69.4956 55.1206 69.2827 cv
55.1099 69.063 55.2798 68.8765 55.499 68.8662 cv
57.9971 68.748 li
58.2285 68.7251 58.4038 68.9072 58.4136 69.1265 cv
58.4243 69.3462 58.2544 69.5327 58.0351 69.543 cv
55.5371 69.6611 li
55.5303 69.6616 55.5239 69.6616 55.5176 69.6616 cv
cp
f
69.2119 66.2944 mo
68.9409 66.2944 68.7183 66.0781 68.7119 65.8062 cv
68.6533 63.335 li
68.647 63.0591 68.8652 62.8301 69.1416 62.8232 cv
69.4165 62.814 69.6465 63.0356 69.6533 63.3115 cv
69.7119 65.7827 li
69.7183 66.0586 69.5 66.2876 69.2236 66.2944 cv
69.2197 66.2944 69.2158 66.2944 69.2119 66.2944 cv
cp
f
76.5117 66.4629 mo
76.2456 66.4629 76.0244 66.2529 76.0127 65.9844 cv
75.9067 63.5146 li
75.895 63.2388 76.1089 63.0054 76.3848 62.9937 cv
76.6616 62.9741 76.894 63.1958 76.9058 63.4717 cv
77.0117 65.9414 li
77.0234 66.2173 76.8096 66.4507 76.5337 66.4624 cv
76.5264 66.4629 76.519 66.4629 76.5117 66.4629 cv
cp
f
68.0044 61.6582 mo
67.9062 61.6582 67.8071 61.6294 67.7202 61.5693 cv
67.4932 61.4121 67.4365 61.1006 67.5937 60.8735 cv
68.7393 59.2212 70.915 59.9766 71.0073 60.0098 cv
71.2671 60.1025 71.4014 60.3877 71.3091 60.647 cv
71.2173 60.9067 70.9331 61.042 70.6719 60.9517 cv
70.6089 60.9292 69.1226 60.4224 68.416 61.4429 cv
68.3188 61.583 68.1631 61.6582 68.0044 61.6582 cv
cp
f
77.5434 61.646 mo
77.3755 61.646 77.2119 61.5615 77.1177 61.4087 cv
77.0068 61.231 76.6186 60.7495 76.1577 60.6563 cv
75.9043 60.6069 75.6509 60.6738 75.3789 60.8652 cv
75.1543 61.0244 74.8408 60.9702 74.6821 60.7446 cv
74.5229 60.519 74.5771 60.207 74.8027 60.0479 cv
75.2998 59.6973 75.8393 59.5703 76.3643 59.6777 cv
77.3296 59.8779 77.9067 60.7827 77.9697 60.8853 cv
78.1138 61.1211 78.0395 61.4287 77.8037 61.5728 cv
77.7222 61.6226 77.6323 61.646 77.5434 61.646 cv
cp
f
76.8086 55.1255 mo
75.9648 53.8921 li
75.9648 53.8921 74.9282 54.603 72.6211 55.0903 cv
69.0781 55.8584 64.9165 55.6416 64.9165 55.6416 cv
64.9165 55.6416 65.6152 56.6567 65.4541 60.3091 cv
65.2939 63.9736 61.4932 66.0132 61.4932 66.0132 cv
60.1567 65.0728 59.0298 64.5386 58.083 64.2549 cv
57.6728 64.1387 57.3096 64.0649 56.9702 64.0244 cv
54.7773 63.8086 53.9609 65.1621 53.9609 65.1621 cv
53.9609 65.1621 48.916 57.1206 54.7524 51.3428 cv
58.8457 47.3091 64.3252 47.5674 67.2295 48.0884 cv
68.2163 48.2686 68.9009 48.4741 69.1523 48.5527 cv
69.2202 48.5718 69.2549 48.5815 69.2549 48.5815 cv
69.2549 48.5815 77.9932 46.5093 79.4473 47.8047 cv
80.9009 49.0889 77.8574 55.1792 76.8086 55.1255 cv
cp
f
70.5054 73.5933 mo
70.501 73.7183 70.5146 73.8477 70.562 73.9644 cv
70.6382 74.1528 70.7964 74.2944 71.0464 74.3965 cv
71.4897 74.5791 71.9209 74.5596 72.2739 74.4722 cv
70.5054 73.5933 li
cp
71.7534 75.5361 mo
71.4121 75.5361 71.0449 75.4771 70.6675 75.3223 cv
70.1655 75.1162 69.8071 74.7729 69.6309 74.3291 cv
69.3218 73.5503 69.6675 72.7471 69.708 72.6582 cv
69.7642 72.5347 69.8677 72.439 69.9956 72.3936 cv
70.1226 72.3481 70.2637 72.3564 70.3857 72.417 cv
73.6484 74.0386 li
73.8032 74.1157 73.9072 74.2671 73.9233 74.4395 cv
73.9399 74.6118 73.8657 74.7803 73.728 74.8848 cv
73.6831 74.9189 72.8525 75.5361 71.7534 75.5361 cv
cp
f
74.1006 125.338 mo
72.5503 125.538 70.9702 125.648 69.3603 125.678 cv
65.8906 88.668 li
69.3003 89.5581 li
74.1006 125.338 li
cp
.635294 .772549 .976471 rgb
f
72.9463 83.8936 mo
72.9463 83.8936 76.9184 94.9375 75.7593 94.7734 cv
74.6006 94.6089 67.4614 88.9282 67.4614 88.9282 cv
67.4614 88.9282 62.7876 95.356 61.1577 95.4756 cv
59.5278 95.5952 58.9951 83.9717 58.9951 83.9717 cv
58.9951 83.9717 60.2285 87.2583 66.3135 87.8154 cv
72.3984 88.3721 72.9463 83.8936 72.9463 83.8936 cv
cp
.901961 .956863 1 rgb
f
92.2705 119.088 mo
92.1304 119.188 91.9805 119.268 91.8306 119.358 cv
91.6802 119.448 91.5205 119.538 91.3603 119.628 cv
87.3706 100.938 li
87.3203 100.668 87.4902 100.408 87.7607 100.348 cv
88.0303 100.288 88.2905 100.458 88.3506 100.728 cv
92.2705 119.088 li
cp
f
363.311 79.1382 mo
363.311 85.8379 361.891 92.2178 359.351 97.978 cv
358.79 99.228 358.19 100.448 357.53 101.638 cv
357.2 102.248 356.851 102.848 356.49 103.438 cv
355.851 104.488 355.17 105.498 354.461 106.478 cv
354.341 106.638 354.23 106.798 354.12 106.948 cv
354.11 106.968 354.101 106.978 354.08 106.998 cv
351.801 110.048 349.15 112.808 346.211 115.228 cv
345.12 116.118 343.99 116.968 342.82 117.758 cv
341.961 118.338 341.08 118.898 340.181 119.418 cv
339.561 119.778 338.931 120.128 338.29 120.468 cv
333.7 122.868 328.67 124.528 323.33 125.288 cv
321.461 125.558 319.561 125.708 317.621 125.738 cv
317.311 125.758 317 125.758 316.69 125.758 cv
312.93 125.758 309.261 125.308 305.761 124.468 cv
300.65 123.238 295.86 121.168 291.561 118.408 cv
290 117.418 288.511 116.328 287.09 115.138 cv
285.081 113.498 283.21 111.678 281.5 109.708 cv
280.72 108.798 279.96 107.868 279.25 106.908 cv
279.09 106.698 278.94 106.498 278.791 106.288 cv
277.081 103.898 275.581 101.338 274.34 98.6382 cv
271.59 92.6982 270.07 86.0879 270.07 79.1382 cv
270.07 53.3882 290.94 32.5181 316.69 32.5181 cv
342.44 32.5181 363.311 53.3882 363.311 79.1382 cv
cp
.909804 .882353 .937255 rgb
f
346.21 115.227 mo
345.12 116.116 343.989 116.966 342.819 117.756 cv
341.96 118.336 341.08 118.896 340.18 119.417 cv
335.1 122.386 329.41 124.417 323.33 125.287 cv
321.46 125.557 319.56 125.707 317.62 125.736 cv
317.31 125.756 317 125.756 316.69 125.756 cv
312.93 125.756 309.26 125.307 305.76 124.466 cv
300.65 123.236 295.86 121.167 291.56 118.406 cv
290 117.417 288.51 116.326 287.09 115.136 cv
285.08 113.497 283.209 111.676 281.5 109.707 cv
280.72 108.796 279.959 107.866 279.25 106.906 cv
282.43 99.3765 288.24 88.5864 296.16 85.9463 cv
308.629 81.7866 335.199 87.6465 335.199 87.6465 cv
335.199 87.6465 344.3 92.0664 346.21 115.227 cv
cp
.25098 .313726 .498039 rgb
f
340.18 119.417 mo
335.1 122.386 329.41 124.417 323.33 125.287 cv
321.46 125.557 319.56 125.707 317.62 125.736 cv
317.31 125.756 317 125.756 316.69 125.756 cv
312.93 125.756 309.26 125.307 305.76 124.466 cv
300.65 123.236 295.86 121.167 291.56 118.406 cv
290 117.417 288.51 116.326 287.09 115.136 cv
287.17 102.946 288.09 91.8066 291.04 89.1465 cv
292.52 87.8066 294.29 86.7563 296.16 85.9463 cv
300.49 84.0762 305.33 83.4463 308.51 83.2363 cv
310.62 83.0962 311.99 83.1465 311.99 83.1465 cv
311.99 83.1465 314.82 83.2563 318.62 83.6763 cv
319.67 83.8066 320.729 83.9365 321.84 84.0962 cv
328.31 85.0264 335.89 86.8364 337.85 90.2563 cv
339.54 93.1963 340.08 106.366 340.18 119.417 cv
cp
f
325.641 58.728 mo
306.371 73.3179 li
306.371 73.3179 295.871 62.7778 300.141 56.7578 cv
302.791 53.0078 308.15 51.208 311.82 50.3779 cv
312.24 50.2881 312.63 50.208 313 50.1382 cv
314.581 49.8281 315.641 49.7378 315.641 49.7378 cv
315.65 49.7979 li
316.32 49.5479 323 44.7178 326.66 46.3179 cv
331.69 48.5078 325.641 58.728 325.641 58.728 cv
cp
0 0 0 rgb
f
308.37 75.5972 mo
307.734 85.9512 li
307.734 85.9512 309.419 89.042 315.446 89.9058 cv
319.936 90.5493 321.583 89.6265 321.583 89.6265 cv
321.275 84.3442 li
320.97 79.1929 li
310.18 76.1157 li
308.37 75.5972 li
cp
.956863 .517647 .384314 rgb
f
310.18 76.1157 mo
310.189 76.3999 310.276 76.7402 310.419 77.1333 cv
312.419 82.4473 318.685 83.9512 321.275 84.3442 cv
320.97 79.1929 li
310.18 76.1157 li
cp
0 0 0 rgb
f
324.727 55.7349 mo
324.727 55.7349 329.363 69.0493 326.778 76.1304 cv
324.194 83.2114 317.688 81.5649 313.851 79.8623 cv
310.013 78.1597 308.368 75.5996 308.368 75.5996 cv
308.368 75.5996 304.587 76.5654 302.386 72.9492 cv
300.185 69.3325 302.005 65.5142 304.179 64.7744 cv
306.352 64.0342 308.737 65.7461 308.737 65.7461 cv
307.064 61.8516 li
307.064 61.8516 316.779 43.4614 324.727 55.7349 cv
cp
.956863 .517647 .384314 rgb
f
308.037 71.3999 mo
307.926 71.3999 307.813 71.3628 307.721 71.2871 cv
303.262 67.6465 li
303.048 67.4722 303.017 67.1567 303.19 66.9429 cv
303.367 66.729 303.682 66.6987 303.895 66.8721 cv
308.354 70.5127 li
308.567 70.687 308.599 71.0024 308.425 71.2163 cv
308.325 71.3374 308.182 71.3999 308.037 71.3999 cv
cp
0 0 0 rgb
f
303.788 71.0815 mo
303.554 71.0815 303.345 70.9155 303.298 70.6763 cv
303.246 70.4053 303.423 70.1431 303.694 70.0908 cv
306.814 69.4883 li
307.082 69.4355 307.347 69.6123 307.4 69.8843 cv
307.452 70.1553 307.275 70.4175 307.004 70.4697 cv
303.884 71.0723 li
303.852 71.0786 303.82 71.0815 303.788 71.0815 cv
cp
f
315.757 61.3057 mo
315.64 61.3057 315.522 61.2651 315.428 61.1821 cv
315.22 61.0005 315.198 60.6846 315.381 60.4766 cv
316.933 58.7007 318.837 59.1621 319.627 59.6538 cv
319.861 59.7998 319.933 60.1084 319.787 60.3428 cv
319.64 60.5767 319.333 60.6475 319.1 60.5039 cv
318.936 60.4048 317.483 59.5928 316.133 61.1348 cv
316.034 61.248 315.896 61.3057 315.757 61.3057 cv
cp
f
325.816 60.8809 mo
325.694 60.8809 325.571 60.8364 325.475 60.7461 cv
324.489 59.8228 323.351 60.3662 323.304 60.3892 cv
323.057 60.5117 322.758 60.4111 322.634 60.166 cv
322.511 59.9204 322.607 59.6221 322.852 59.4971 cv
322.924 59.46 324.646 58.605 326.158 60.0156 cv
326.359 60.2041 326.37 60.5205 326.182 60.7222 cv
326.083 60.8276 325.95 60.8809 325.816 60.8809 cv
cp
f
323.468 70.6235 mo
323.411 70.6235 323.353 70.6138 323.296 70.5933 cv
323.036 70.498 322.903 70.2109 322.998 69.9517 cv
324.313 66.3589 322.602 64.2764 322.528 64.1895 cv
322.351 63.9795 322.375 63.6646 322.584 63.4858 cv
322.793 63.3057 323.106 63.3286 323.286 63.5381 cv
323.376 63.6416 325.463 66.1265 323.938 70.2954 cv
323.863 70.498 323.672 70.6235 323.468 70.6235 cv
cp
f
325.464 65.8525 mo
325.232 65.8525 325.024 65.6904 324.976 65.4546 cv
324.473 63.04 li
324.465 63.0059 324.462 62.9712 324.462 62.9375 cv
324.462 62.7056 324.624 62.4976 324.86 62.4487 cv
325.124 62.3931 325.396 62.5649 325.451 62.8359 cv
325.954 65.2505 li
325.962 65.2847 325.965 65.3193 325.965 65.353 cv
325.965 65.585 325.803 65.793 325.566 65.8418 cv
325.532 65.8491 325.498 65.8525 325.464 65.8525 cv
cp
f
317.9 66.0283 mo
317.669 66.0283 317.461 65.8662 317.412 65.6304 cv
316.909 63.2163 li
316.853 62.9458 317.026 62.6812 317.297 62.625 cv
317.562 62.5679 317.832 62.7417 317.888 63.0122 cv
318.391 65.4263 li
318.447 65.6968 318.273 65.9614 318.003 66.0176 cv
317.969 66.0249 317.935 66.0283 317.9 66.0283 cv
cp
f
325.637 58.7271 mo
325.637 58.7271 324.64 56.5767 322.059 56.4004 cv
319.477 56.2241 317.857 57.9507 317.857 57.9507 cv
317.857 57.9507 318.723 62.3696 315.069 64.4644 cv
311.416 66.5591 308.737 65.7461 308.737 65.7461 cv
306.246 64.6821 li
304.605 60.8452 li
312.462 53.355 li
322.31 48.9058 li
326.899 53.6167 li
325.637 58.7271 li
cp
f
320.611 74.5889 mo
320.208 74.5889 317.823 74.4873 316.894 72.1411 cv
316.792 71.8843 316.918 71.5938 317.174 71.4922 cv
317.43 71.3906 317.721 71.5161 317.823 71.7729 cv
318.562 73.6362 320.594 73.5884 320.633 73.5889 cv
320.918 73.5884 321.14 73.8013 321.149 74.0713 cv
321.158 74.3472 320.942 74.5786 320.666 74.5879 cv
320.659 74.5884 320.641 74.5889 320.611 74.5889 cv
cp
f
318.757 90.71 mo
311.978 90.71 306.819 86.0151 306.569 85.7837 cv
306.367 85.5962 306.354 85.2803 306.542 85.0776 cv
306.73 84.875 307.045 84.8628 307.249 85.0498 cv
307.315 85.1118 314.068 91.251 321.931 89.3291 cv
322.196 89.2632 322.469 89.4282 322.534 89.6963 cv
322.6 89.9644 322.436 90.2354 322.167 90.3008 cv
320.998 90.5864 319.855 90.71 318.757 90.71 cv
cp
1 1 1 rgb
f
354.461 106.478 mo
354.33 106.658 354.211 106.828 354.08 106.998 cv
351.801 110.048 349.15 112.808 346.211 115.228 cv
345.131 116.108 344.011 116.958 342.851 117.738 cv
334.17 114.038 li
337.279 89.4712 li
354.461 106.478 li
cp
.25098 .313726 .498039 rgb
f
487.489 79.1362 mo
487.489 85.3965 486.26 91.3662 484.02 96.8164 cv
482.38 100.807 480.199 104.526 477.569 107.876 cv
471.529 115.586 463.109 121.346 453.41 124.046 cv
449.42 125.167 445.21 125.756 440.87 125.756 cv
439.22 125.756 437.59 125.676 435.979 125.506 cv
434.93 125.396 433.89 125.247 432.859 125.066 cv
431.72 124.866 430.6 124.626 429.489 124.346 cv
429.279 124.296 429.06 124.247 428.85 124.187 cv
427.069 123.716 425.319 123.136 423.63 122.457 cv
420.649 121.276 417.81 119.787 415.17 118.037 cv
414.35 117.497 413.54 116.926 412.76 116.336 cv
411.199 115.156 409.72 113.886 408.319 112.517 cv
404.989 109.276 402.16 105.546 399.92 101.446 cv
396.3 94.8164 394.239 87.2163 394.239 79.1362 cv
394.239 53.3862 415.12 32.5166 440.87 32.5166 cv
466.62 32.5166 487.489 53.3862 487.489 79.1362 cv
cp
.909804 .882353 .937255 rgb
f
429.386 57.9287 mo
429.386 57.9287 424.925 61.6714 424.503 65.4263 cv
424.082 69.1812 424.082 69.1812 424.082 69.1812 cv
424.082 69.1812 418.734 70.8887 417.12 77.3496 cv
414.929 86.1201 420.907 89.1704 420.907 89.1704 cv
467.344 94.1836 li
467.344 94.1836 472.801 89.4014 471.708 81.7158 cv
470.616 74.0298 466.117 71.5845 466.117 71.5845 cv
466.117 71.5845 466.858 66.644 464.372 61.6802 cv
461.502 55.9517 455.611 55.895 455.611 55.895 cv
429.386 57.9287 li
cp
0 0 0 rgb
f
477.569 107.876 mo
471.529 115.586 463.109 121.346 453.41 124.046 cv
449.42 125.167 445.21 125.756 440.87 125.756 cv
439.22 125.756 437.59 125.676 435.979 125.506 cv
434.93 125.396 433.89 125.247 432.859 125.066 cv
431.72 124.866 430.6 124.626 429.489 124.346 cv
429.279 124.296 429.06 124.247 428.85 124.187 cv
427.069 123.716 425.319 123.136 423.63 122.457 cv
420.649 121.276 417.81 119.787 415.17 118.037 cv
415.27 115.546 415.439 114.136 415.439 114.136 cv
422.97 90.3862 li
423.71 88.0464 li
424.149 86.6465 425.05 85.4766 426.239 84.6963 cv
426.85 84.2866 427.54 83.9863 428.279 83.8262 cv
429.66 83.5063 431.38 83.1563 433.33 82.8262 cv
433.939 82.7363 434.55 82.6362 435.199 82.5464 cv
437.22 82.2666 439.439 82.0464 441.729 81.9463 cv
443.109 81.8862 444.489 81.8765 445.88 81.9263 cv
446.5 81.9463 447.12 81.9766 447.739 82.0166 cv
448.46 82.0762 449.17 82.1465 449.89 82.2266 cv
450.689 82.3262 451.479 82.4463 452.27 82.6064 cv
454.069 82.9463 455.83 83.4263 457.5 84.0762 cv
461.93 85.8066 465.779 89.3662 468.949 93.3564 cv
472.989 98.4463 475.93 104.247 477.569 107.876 cv
cp
.968627 .701961 .411765 rgb
f
447.882 79.7905 mo
447.882 79.7905 451.146 80.8604 452.137 82.3799 cv
453.246 84.0835 451.171 88.5684 445.265 92.0571 cv
440.95 94.605 437.308 95.5059 437.308 95.5059 cv
437.308 95.5059 433.551 90.3101 432.83 87.1514 cv
432.109 83.9927 434.754 79.8491 434.754 79.8491 cv
447.882 79.7905 li
cp
.639216 .482353 .564706 rgb
f
458.45 65.248 mo
455.101 79.498 442.591 75.2378 442.591 75.2378 cv
442.591 75.2378 423.351 72.6582 430.591 63.7681 cv
430.591 63.7681 426.67 57.7681 426.7 54.8281 cv
426.721 52.7979 430.99 48.0679 437 46.2778 cv
437.601 46.0981 438.211 45.9482 438.841 45.8379 cv
441.061 45.4277 443.471 45.4482 445.95 46.1479 cv
456.211 49.0278 459.75 59.708 458.45 65.248 cv
cp
0 0 0 rgb
f
434.721 78.5889 mo
434.754 78.8491 li
435.568 83.7305 li
436.191 87.5596 li
436.191 87.5596 435.972 88.4941 440.416 87.6602 cv
446.369 86.5195 447.992 83.7056 447.992 83.7056 cv
447.152 74.6538 li
445.375 75.2217 li
434.721 78.5889 li
cp
.956863 .517647 .384314 rgb
f
434.754 78.8491 mo
435.568 83.7305 li
438.443 83.022 443.6 81.1147 445.188 76.2656 cv
445.307 75.8726 445.376 75.5239 445.377 75.2402 cv
434.764 78.7725 li
434.754 78.8491 li
cp
0 0 0 rgb
f
430.001 55.5913 mo
430.001 55.5913 425.968 69.0474 428.851 75.9819 cv
431.733 82.917 438.138 80.9932 441.882 79.1304 cv
445.627 77.2676 447.152 74.6475 447.152 74.6475 cv
447.152 74.6475 450.959 75.4434 452.991 71.7471 cv
455.023 68.0513 453.044 64.3301 450.849 63.689 cv
448.652 63.0479 446.354 64.856 446.354 64.856 cv
447.849 60.9063 li
447.849 60.9063 437.373 43.0273 430.001 55.5913 cv
cp
.956863 .517647 .384314 rgb
f
432.089 71.5132 mo
431.899 71.5132 431.718 71.4043 431.634 71.2202 cv
430.422 68.5591 432.01 65.498 432.077 65.3691 cv
432.206 65.1245 432.509 65.0317 432.752 65.1606 cv
432.996 65.2891 433.09 65.5913 432.962 65.8354 cv
432.947 65.8628 431.538 68.5962 432.544 70.8062 cv
432.658 71.0571 432.548 71.354 432.296 71.4683 cv
432.229 71.499 432.158 71.5132 432.089 71.5132 cv
cp
0 0 0 rgb
f
447.611 70.8677 mo
447.509 70.8677 447.406 70.8364 447.317 70.772 cv
447.094 70.6094 447.045 70.2969 447.207 70.0737 cv
450.204 65.9541 li
450.367 65.7305 450.68 65.6816 450.902 65.8438 cv
451.126 66.0063 451.175 66.3188 451.013 66.542 cv
448.016 70.6616 li
447.918 70.7964 447.766 70.8677 447.611 70.8677 cv
cp
f
451.156 69.4126 mo
451.145 69.4126 448.699 69.3564 448.699 69.3564 cv
448.424 69.3501 448.205 69.1211 448.211 68.8447 cv
448.219 68.5688 448.454 68.373 448.723 68.3564 cv
451.168 68.4126 li
451.443 68.4189 451.662 68.6479 451.656 68.9243 cv
451.649 69.1963 451.428 69.4126 451.156 69.4126 cv
cp
f
446.354 64.856 mo
446.354 64.856 440.416 62.7139 437.886 58.959 cv
435.355 55.2041 435.022 53.2007 435.022 53.2007 cv
435.022 53.2007 434.544 55.9375 432.592 56.8174 cv
430.64 57.6968 429.386 57.9287 429.386 57.9287 cv
428.568 61.8364 li
428.269 52.8076 li
428.269 52.8076 433.398 49.1602 434.135 49.0654 cv
434.872 48.9712 444.384 49.4468 444.993 49.9375 cv
445.603 50.4287 449.459 57.2749 449.459 57.2749 cv
450.08 60.5107 li
446.354 64.856 li
cp
f
447.596 80.4307 mo
447.596 80.4307 441.239 86.4229 437.516 86.4575 cv
433.793 86.4927 434.315 83.3965 434.315 83.3965 cv
434.93 90.5391 li
438.218 91.6167 li
446.438 88.3032 li
451.053 83.1396 li
447.596 80.4307 li
cp
.639216 .482353 .564706 rgb
f
440.871 91.9775 mo
440.871 91.9775 443.659 95.791 444.226 101.773 cv
444.792 107.756 441.318 114.479 441.318 114.479 cv
441.318 114.479 435.75 108.165 435.013 103.397 cv
434.275 98.6299 436.826 91.8623 436.826 91.8623 cv
436.826 91.8623 434.302 97.604 433.678 101.118 cv
433.055 104.631 432.193 109.148 432.193 109.148 cv
432.193 109.148 428.813 104.668 429.016 99.3501 cv
429.218 94.0317 434.93 90.5391 434.93 90.5391 cv
440.871 91.9775 li
cp
f
436.263 86.9961 mo
436.032 86.9961 435.966 87.0884 435.932 87.1348 cv
435.513 87.7144 435.927 89.5811 436.485 91.209 cv
436.951 89.7544 437.3 88.0054 436.867 87.2954 cv
436.756 87.1113 436.595 87.02 436.346 87 cv
436.316 86.9976 436.289 86.9961 436.263 86.9961 cv
cp
440.158 93.7349 mo
438.62 93.7349 436.64 93.1982 436.362 93.1206 cv
436.332 93.1118 436.309 93.103 436.285 93.0928 cv
436.177 93.0425 436.085 92.9526 436.035 92.8335 cv
435.698 92.0391 434.072 88.0005 435.121 86.5488 cv
435.325 86.2681 435.721 85.9502 436.428 86.0029 cv
436.995 86.0498 437.442 86.3169 437.722 86.7759 cv
438.557 88.1475 437.627 91.0571 437.167 92.2949 cv
438.247 92.5542 440.086 92.8994 440.937 92.6523 cv
441.835 92.3931 442.345 89.2974 441.985 87.5488 cv
441.931 87.2783 442.104 87.0142 442.375 86.9585 cv
442.64 86.9058 442.91 87.0767 442.966 87.3477 cv
443.289 88.9258 443.076 93.0752 441.214 93.6133 cv
440.915 93.6997 440.551 93.7349 440.158 93.7349 cv
cp
.572549 .705882 .917647 rgb
f
439.569 95.439 mo
439.244 97.5474 439.095 99.96 439.68 100.687 cv
439.767 100.796 439.844 100.811 439.981 100.84 cv
440.105 100.839 440.158 100.798 440.207 100.729 cv
440.68 100.05 440.213 97.627 439.569 95.439 cv
cp
439.979 101.84 mo
439.55 101.84 439.176 101.658 438.899 101.313 cv
437.571 99.6597 438.806 93.9634 438.951 93.3193 cv
438.999 93.1025 439.186 92.9443 439.406 92.9302 cv
439.623 92.9199 439.832 93.0488 439.908 93.2583 cv
440.293 94.3169 442.157 99.6797 441.027 101.3 cv
440.782 101.651 440.422 101.838 439.985 101.84 cv
439.983 101.84 439.981 101.84 439.979 101.84 cv
cp
f
429.489 124.346 mo
429.279 124.296 429.06 124.247 428.85 124.187 cv
427.069 123.716 425.319 123.136 423.63 122.457 cv
420.649 121.276 417.81 119.787 415.17 118.037 cv
414.35 117.497 413.54 116.926 412.76 116.336 cv
411.199 115.156 409.72 113.886 408.319 112.517 cv
408.34 112.386 408.37 112.256 408.399 112.126 cv
410.949 100.586 415.79 93.4863 419.79 89.3662 cv
423.41 85.6465 426.876 84.3262 426.876 84.3262 cv
426.836 84.4463 426.279 84.5664 426.239 84.6963 cv
425.85 86.1362 425.67 88.1865 425.66 90.6763 cv
425.63 99.2666 427.59 113.026 429.489 124.346 cv
cp
.968627 .701961 .411765 rgb
f
436.607 66.6289 mo
436.3 66.6021 436.106 66.3843 436.106 66.1294 cv
436.108 66.0815 436.343 63.6265 436.343 63.6265 cv
436.37 63.3511 436.619 63.1465 436.889 63.1763 cv
437.147 63.2007 437.341 63.4185 437.341 63.6733 cv
437.339 63.7212 437.104 66.1763 437.104 66.1763 cv
437.079 66.4351 436.861 66.6289 436.607 66.6289 cv
cp
0 0 0 rgb
f
429.386 66.4385 mo
429.364 66.4385 429.342 66.437 429.32 66.4341 cv
429.068 66.4014 428.885 66.1865 428.885 65.939 cv
428.885 65.9175 428.886 65.896 428.889 65.874 cv
429.207 63.4287 li
429.243 63.1543 429.496 62.9619 429.768 62.9976 cv
430.02 63.0303 430.203 63.2451 430.203 63.4927 cv
430.203 63.5142 430.202 63.5356 430.199 63.5576 cv
429.881 66.0029 li
429.848 66.2549 429.633 66.4385 429.386 66.4385 cv
cp
f
435.329 74.0132 mo
435.65 74.0972 436.013 74.1465 436.355 74.0977 cv
436.664 74.0522 436.863 73.6748 436.98 73.2637 cv
435.329 74.0132 li
cp
436.078 75.1172 mo
434.933 75.1172 433.859 74.501 433.809 74.4717 cv
433.647 74.3774 433.552 74.2012 433.562 74.0142 cv
433.57 73.8276 433.684 73.6616 433.854 73.5845 cv
437.409 71.9707 li
437.566 71.8989 437.749 71.9141 437.893 72.0093 cv
438.036 72.1045 438.121 72.2671 438.116 72.4395 cv
438.109 72.6875 438.005 74.8657 436.502 75.0869 cv
436.36 75.1079 436.219 75.1172 436.078 75.1172 cv
cp
f
428.666 61.8691 mo
428.437 61.8691 428.23 61.7109 428.178 61.4785 cv
428.118 61.209 428.287 60.9414 428.557 60.8813 cv
430.784 60.3823 li
431.06 60.3237 431.321 60.4917 431.382 60.7607 cv
431.441 61.0303 431.272 61.2979 431.003 61.3579 cv
428.775 61.8569 li
428.738 61.8652 428.702 61.8691 428.666 61.8691 cv
cp
f
438.785 62.3701 mo
438.74 62.3701 438.694 62.3643 438.648 62.3511 cv
435.131 61.3511 li
434.865 61.2754 434.711 60.999 434.787 60.7334 cv
434.862 60.4683 435.134 60.311 435.404 60.3892 cv
438.922 61.3892 li
439.188 61.4648 439.342 61.7412 439.266 62.0068 cv
439.203 62.2266 439.003 62.3701 438.785 62.3701 cv
cp
f
436.841 64.1738 mo
436.731 64.1738 436.622 64.1382 436.529 64.0654 cv
435.705 63.4102 li
435.489 63.2383 435.453 62.9233 435.625 62.7075 cv
435.798 62.4907 436.111 62.4575 436.328 62.627 cv
437.152 63.2822 li
437.368 63.4541 437.404 63.769 437.232 63.9849 cv
437.134 64.1094 436.987 64.1738 436.841 64.1738 cv
cp
f
429.703 63.9932 mo
429.58 63.9932 429.458 63.9482 429.361 63.8579 cv
428.675 63.2148 li
428.474 63.0264 428.463 62.71 428.651 62.5083 cv
428.841 62.3066 429.157 62.2964 429.358 62.4854 cv
430.045 63.1284 li
430.246 63.3169 430.257 63.6333 430.068 63.835 cv
429.97 63.9399 429.837 63.9932 429.703 63.9932 cv
cp
f
487.36 321.216 mo
487.36 329.586 485.15 337.446 481.28 344.246 cv
478.561 349.026 475.011 353.286 470.83 356.816 cv
466.4 360.566 461.261 363.506 455.641 365.406 cv
450.961 366.977 445.95 367.836 440.74 367.836 cv
426.931 367.836 414.511 361.826 405.98 352.286 cv
405.471 351.727 404.98 351.146 404.501 350.557 cv
403.12 348.856 401.86 347.057 400.73 345.177 cv
396.53 338.166 394.11 329.977 394.11 321.216 cv
394.11 295.466 414.99 274.597 440.74 274.597 cv
466.48 274.597 487.36 295.466 487.36 321.216 cv
cp
.909804 .882353 .937255 rgb
f
428.671 311.874 mo
428.671 311.874 418.003 319.92 417.209 329.691 cv
416.008 344.481 432.831 338.011 434.68 328.583 cv
436.528 319.154 428.671 311.874 428.671 311.874 cv
cp
0 0 0 rgb
f
427.715 310.867 mo
427.715 310.867 423.864 306.613 424.974 300.021 cv
425.726 295.552 427.715 294.105 427.715 294.105 cv
427.715 294.105 424.685 288.005 433.703 288.374 cv
442.721 288.744 448.027 293.172 448.027 293.172 cv
448.027 293.172 452.149 291.147 453.998 295.954 cv
455.847 300.76 453.998 307.851 453.998 307.851 cv
427.715 310.867 li
cp
f
470.83 356.818 mo
466.4 360.568 461.261 363.508 455.641 365.408 cv
450.961 366.978 445.95 367.838 440.74 367.838 cv
431.44 367.838 422.771 365.107 415.49 360.408 cv
415.091 360.158 414.7 359.898 414.32 359.628 cv
411.25 357.528 408.45 355.058 405.98 352.288 cv
405.471 351.728 404.98 351.148 404.5 350.558 cv
434.011 329.178 li
434.03 329.168 435.15 328.348 435.15 328.348 cv
446.74 329.288 li
451.551 329.678 li
470.83 356.818 li
cp
.968627 .701961 .411765 rgb
f
435.15 329.097 mo
405.98 352.286 li
405.471 351.727 404.98 351.146 404.501 350.557 cv
403.12 348.856 401.86 347.057 400.73 345.177 cv
401.631 344.366 402.57 343.557 403.54 342.746 cv
416.91 331.597 430.131 329.546 434.011 329.177 cv
434.761 329.106 435.15 329.097 435.15 329.097 cv
cp
f
447.512 318.298 mo
447.29 330.063 li
447.29 330.063 445.24 333.381 438.787 333.735 cv
433.979 334 432.509 331.318 432.509 331.318 cv
433.865 321.061 li
445.551 318.697 li
447.512 318.298 li
cp
.956863 .517647 .384314 rgb
f
481.28 344.246 mo
478.561 349.026 475.011 353.286 470.83 356.816 cv
466.4 360.566 461.261 363.506 455.641 365.406 cv
463.181 356.216 li
446.74 329.286 li
446.62 329.097 li
446.62 329.097 448.511 329.166 451.551 329.677 cv
458.471 330.826 471.33 334.236 481.28 344.246 cv
cp
.968627 .701961 .411765 rgb
f
447.512 317.626 mo
447.477 317.926 447.354 318.278 447.165 318.681 cv
444.563 324.117 435.838 326.188 433.062 326.367 cv
433.856 320.947 li
447.512 317.626 li
cp
0 0 0 rgb
f
432.032 295.793 mo
432.032 295.793 425.908 309.45 427.993 317.176 cv
430.078 324.901 437.11 323.756 441.324 322.307 cv
445.539 320.857 447.513 318.301 447.513 318.301 cv
447.513 318.301 451.424 319.668 454.083 316.045 cv
456.742 312.422 455.166 308.217 452.936 307.235 cv
450.704 306.254 448.025 307.846 448.025 307.846 cv
450.151 303.88 li
450.151 303.88 441.561 283.54 432.032 295.793 cv
cp
.956863 .517647 .384314 rgb
f
448.025 307.846 mo
448.025 307.846 442.127 309.036 438.03 302.473 cv
433.933 295.909 434.31 293.214 434.31 293.214 cv
430.228 299.989 li
430.228 299.989 429.314 295.291 431.193 292.297 cv
433.072 289.302 435.023 289.923 435.023 289.923 cv
448.027 293.172 li
451.451 303.595 li
448.025 307.846 li
cp
0 0 0 rgb
f
432.499 313.288 mo
432.285 313.288 432.087 313.149 432.021 312.935 cv
431.112 309.97 433.206 306.968 433.295 306.842 cv
433.455 306.616 433.765 306.564 433.991 306.723 cv
434.217 306.882 434.271 307.194 434.111 307.42 cv
434.093 307.446 432.214 310.151 432.978 312.642 cv
433.058 312.905 432.909 313.186 432.646 313.267 cv
432.597 313.281 432.547 313.288 432.499 313.288 cv
cp
f
448.591 314.343 mo
448.467 314.343 448.344 314.297 448.247 314.205 cv
448.046 314.016 448.038 313.699 448.229 313.499 cv
451.965 309.562 li
452.154 309.359 452.472 309.354 452.671 309.543 cv
452.872 309.732 452.88 310.049 452.689 310.249 cv
448.953 314.187 li
448.855 314.291 448.723 314.343 448.591 314.343 cv
cp
f
452.538 313.296 mo
452.513 313.296 452.486 313.294 452.461 313.29 cv
449.886 312.893 li
449.612 312.851 449.426 312.595 449.468 312.322 cv
449.51 312.049 449.772 311.866 450.038 311.904 cv
452.613 312.302 li
452.887 312.344 453.073 312.6 453.031 312.872 cv
452.993 313.119 452.78 313.296 452.538 313.296 cv
cp
f
435.797 315.775 mo
436.588 316.126 437.575 316.404 438.032 316.056 cv
438.536 315.669 438.56 314.906 438.5 314.364 cv
435.797 315.775 li
cp
437.438 317.212 mo
436.14 317.212 434.665 316.335 434.452 316.203 cv
434.299 316.108 434.208 315.939 434.214 315.76 cv
434.221 315.58 434.323 315.417 434.482 315.334 cv
438.634 313.166 li
438.765 313.097 438.92 313.089 439.06 313.148 cv
439.196 313.206 439.301 313.322 439.344 313.465 cv
439.372 313.56 440.024 315.789 438.64 316.849 cv
438.297 317.112 437.878 317.212 437.438 317.212 cv
cp
f
429.857 302.056 mo
429.619 302.056 429.408 301.885 429.366 301.642 cv
429.318 301.369 429.501 301.11 429.772 301.063 cv
432.208 300.641 li
432.482 300.584 432.739 300.774 432.786 301.047 cv
432.834 301.319 432.651 301.578 432.38 301.625 cv
429.944 302.048 li
429.915 302.054 429.886 302.056 429.857 302.056 cv
cp
f
439.982 303.655 mo
439.906 303.655 439.829 303.638 439.757 303.602 cv
435.763 301.579 li
435.516 301.454 435.417 301.153 435.542 300.907 cv
435.667 300.66 435.97 300.563 436.214 300.687 cv
440.208 302.709 li
440.455 302.834 440.554 303.135 440.429 303.381 cv
440.341 303.555 440.164 303.655 439.982 303.655 cv
cp
f
455.475 311.874 mo
455.475 311.874 463.98 319.247 462.779 331.264 cv
461.577 343.279 449.662 341.736 447.159 337.352 cv
443.368 330.709 447.513 318.301 447.513 318.301 cv
447.513 318.301 454.819 319.524 455.475 311.874 cv
cp
f
429.858 307.686 mo
429.81 307.686 429.761 307.679 429.712 307.663 cv
429.447 307.582 429.3 307.303 429.381 307.039 cv
430.063 304.819 li
429.472 304.096 li
429.297 303.882 429.328 303.567 429.542 303.393 cv
429.755 303.218 430.071 303.249 430.245 303.463 cv
431.006 304.394 li
431.112 304.523 431.146 304.697 431.097 304.856 cv
430.336 307.332 li
430.271 307.548 430.072 307.686 429.858 307.686 cv
cp
f
437.313 308.351 mo
437.264 308.351 437.215 308.344 437.166 308.328 cv
436.901 308.248 436.754 307.968 436.835 307.704 cv
437.514 305.491 li
436.643 304.475 li
436.463 304.265 436.487 303.949 436.697 303.77 cv
436.906 303.591 437.224 303.614 437.402 303.824 cv
438.452 305.05 li
438.563 305.18 438.601 305.358 438.55 305.521 cv
437.79 307.997 li
437.725 308.212 437.526 308.351 437.313 308.351 cv
cp
f
438.714 333.973 mo
434.458 333.973 431.937 331.651 431.9 331.617 cv
431.7 331.428 431.691 331.112 431.881 330.911 cv
432.07 330.711 432.386 330.702 432.587 330.89 cv
432.788 331.078 437.563 335.425 445.319 331.071 cv
445.563 330.935 445.866 331.021 446 331.262 cv
446.136 331.503 446.05 331.808 445.81 331.942 cv
443.111 333.457 440.72 333.973 438.714 333.973 cv
cp
1 1 1 rgb
f
419.721 344.198 mo
419.42 344.448 413.11 350.078 415.49 360.408 cv
415.091 360.158 414.7 359.898 414.32 359.628 cv
412.45 349.288 418.99 343.498 419.07 343.438 cv
419.28 343.258 419.591 343.278 419.771 343.488 cv
419.95 343.698 419.931 344.018 419.721 344.198 cv
cp
f
487.36 200.176 mo
487.36 209.387 484.69 217.977 480.07 225.216 cv
476.74 230.437 472.4 234.946 467.32 238.477 cv
464.601 240.366 461.671 241.977 458.57 243.267 cv
453.08 245.536 447.061 246.796 440.74 246.796 cv
440.381 246.796 440.011 246.796 439.641 246.786 cv
428.421 246.526 418.181 242.307 410.271 235.466 cv
408.891 234.276 407.591 233.006 406.36 231.666 cv
398.751 223.376 394.11 212.316 394.11 200.176 cv
394.11 174.426 414.99 153.556 440.74 153.556 cv
466.48 153.556 487.36 174.426 487.36 200.176 cv
cp
.909804 .882353 .937255 rgb
f
467.32 238.477 mo
464.601 240.366 461.671 241.977 458.57 243.267 cv
453.08 245.536 447.061 246.796 440.74 246.796 cv
440.381 246.796 440.011 246.796 439.641 246.786 cv
428.421 246.526 418.181 242.307 410.271 235.466 cv
408.891 234.276 407.591 233.006 406.36 231.666 cv
409.641 224.557 417.251 211.146 429.15 207.927 cv
429.29 207.887 429.431 207.856 429.561 207.816 cv
443.33 204.336 462.011 207.586 465.73 210.376 cv
467.261 211.637 467.53 224.146 467.32 238.477 cv
cp
.572549 .705882 .917647 rgb
f
432.73 184.161 mo
432.73 184.161 425.227 174.881 428.376 171.199 cv
431.524 167.517 436.392 171.199 436.392 171.199 cv
436.392 171.199 436.66 166.842 441.515 167.292 cv
446.37 167.742 449.295 172.915 449.295 172.915 cv
449.295 172.915 453.566 168.641 456.491 172.915 cv
459.415 177.188 457.391 184.161 457.391 184.161 cv
457.391 184.161 460.765 183.662 459.865 187.623 cv
458.966 191.583 453.659 195.667 453.659 195.667 cv
432.73 184.161 li
cp
0 0 0 rgb
f
449.154 198.772 mo
449.295 209.237 li
449.295 209.237 447.448 212.271 441.333 212.852 cv
436.777 213.284 435.161 212.274 435.161 212.274 cv
435.725 206.966 li
436.282 201.788 li
447.305 199.208 li
449.154 198.772 li
cp
.956863 .517647 .384314 rgb
f
447.305 199.208 mo
447.282 199.494 447.178 199.833 447.015 200.221 cv
444.743 205.48 438.356 206.694 435.725 206.966 cv
436.282 201.788 li
447.305 199.208 li
cp
0 0 0 rgb
f
433.627 177.965 mo
433.627 177.965 428.312 191.161 430.575 198.422 cv
432.839 205.683 439.475 204.337 443.425 202.807 cv
447.374 201.275 449.155 198.774 449.155 198.774 cv
449.155 198.774 452.92 199.93 455.313 196.392 cv
457.705 192.853 456.055 188.917 453.9 188.066 cv
451.745 187.216 449.259 188.826 449.259 188.826 cv
451.133 184.981 li
451.133 184.981 442.228 165.979 433.627 177.965 cv
cp
.956863 .517647 .384314 rgb
f
449.716 194.554 mo
449.563 194.554 449.412 194.484 449.313 194.352 cv
449.149 194.129 449.196 193.816 449.418 193.652 cv
453.361 190.735 li
453.584 190.572 453.896 190.617 454.062 190.839 cv
454.226 191.062 454.179 191.375 453.957 191.539 cv
450.014 194.456 li
449.924 194.522 449.819 194.554 449.716 194.554 cv
cp
0 0 0 rgb
f
454.013 194.438 mo
453.974 194.438 453.935 194.433 453.895 194.423 cv
450.778 193.666 li
450.51 193.601 450.346 193.331 450.41 193.062 cv
450.476 192.794 450.743 192.628 451.015 192.694 cv
454.131 193.452 li
454.399 193.517 454.563 193.787 454.499 194.056 cv
454.443 194.284 454.238 194.438 454.013 194.438 cv
cp
f
442.117 184.117 mo
441.912 184.117 441.719 183.99 441.646 183.785 cv
440.951 181.834 439.281 182.062 439.09 182.091 cv
438.821 182.135 438.56 181.957 438.512 181.686 cv
438.464 181.415 438.643 181.157 438.913 181.107 cv
439.834 180.936 441.79 181.21 442.588 183.449 cv
442.681 183.709 442.545 183.996 442.285 184.088 cv
442.229 184.108 442.173 184.117 442.117 184.117 cv
cp
f
432.304 183.095 mo
432.162 183.095 432.021 183.035 431.923 182.918 cv
431.744 182.708 431.77 182.392 431.98 182.213 cv
432.448 181.816 433.692 180.759 434.26 181.406 cv
434.442 181.613 434.423 181.929 434.215 182.112 cv
434.082 182.229 433.903 182.262 433.746 182.217 cv
433.639 182.25 433.314 182.393 432.627 182.976 cv
432.533 183.056 432.418 183.095 432.304 183.095 cv
cp
f
434.201 193.027 mo
434.051 193.027 433.902 192.959 433.804 192.831 cv
432.096 190.592 435.371 187.059 435.512 186.909 cv
435.701 186.708 436.017 186.699 436.218 186.887 cv
436.419 187.076 436.43 187.392 436.24 187.594 cv
435.447 188.44 433.605 190.922 434.599 192.224 cv
434.767 192.444 434.724 192.757 434.505 192.925 cv
434.414 192.994 434.308 193.027 434.201 193.027 cv
cp
f
433.347 188.355 mo
433.322 188.355 433.299 188.354 433.274 188.35 cv
433.002 188.311 432.812 188.058 432.851 187.784 cv
433.203 185.321 li
433.243 185.047 433.497 184.858 433.77 184.897 cv
434.042 184.936 434.232 185.189 434.193 185.463 cv
433.841 187.926 li
433.805 188.175 433.591 188.355 433.347 188.355 cv
cp
f
440.56 188.365 mo
440.252 188.347 440.043 188.109 440.061 187.833 cv
440.219 185.35 li
440.236 185.076 440.433 184.877 440.75 184.883 cv
441.025 184.9 441.234 185.138 441.217 185.414 cv
441.059 187.897 li
441.042 188.162 440.821 188.365 440.56 188.365 cv
cp
f
432.564 180.937 mo
432.564 180.937 433.673 178.818 436.283 178.765 cv
438.894 178.711 440.443 180.529 440.443 180.529 cv
440.443 180.529 439.357 184.941 442.938 187.229 cv
446.521 189.516 449.259 188.826 449.259 188.826 cv
451.821 187.874 li
453.659 184.085 li
446.102 176.158 li
436.392 171.199 li
431.538 175.726 li
432.564 180.937 li
cp
f
437.563 196.026 mo
437.856 196.189 438.195 196.302 438.513 196.23 cv
438.871 196.151 439.158 195.845 439.381 195.467 cv
437.563 196.026 li
cp
438.315 197.252 mo
437.146 197.252 436.175 196.219 436.13 196.169 cv
436.014 196.043 435.97 195.866 436.015 195.7 cv
436.059 195.534 436.186 195.403 436.351 195.352 cv
440.124 194.192 li
440.302 194.138 440.497 194.187 440.627 194.32 cv
440.758 194.453 440.804 194.648 440.746 194.826 cv
440.291 196.213 439.611 197.015 438.724 197.208 cv
438.586 197.238 438.449 197.252 438.315 197.252 cv
cp
f
480.07 225.216 mo
476.74 230.437 472.4 234.946 467.32 238.477 cv
464.601 240.366 461.671 241.977 458.57 243.267 cv
465.73 210.376 li
466.221 210.716 473.86 216.106 480.07 225.216 cv
cp
.572549 .705882 .917647 rgb
f
433.859 212.47 mo
433.089 214.41 432.162 217.412 432.572 218.326 cv
432.619 218.432 432.664 218.447 432.683 218.454 cv
433.517 218.748 437.158 215.955 440.115 213.147 cv
437.236 213.209 434.818 212.703 433.859 212.47 cv
cp
440.979 213.113 mo
444.223 215.793 449.306 219.205 450.674 218.523 cv
451.912 217.909 451.198 213.194 450.231 209.675 cv
448.842 210.608 445.201 212.802 441.289 213.093 cv
441.186 213.1 441.082 213.106 440.979 213.113 cv
cp
450.295 219.59 mo
447.578 219.59 442.33 215.505 440.583 214.081 cv
438.738 215.814 434.062 219.989 432.356 219.399 cv
432.047 219.292 431.806 219.063 431.659 218.735 cv
430.917 217.077 432.729 212.569 433.101 211.683 cv
433.198 211.449 433.457 211.325 433.699 211.396 cv
433.733 211.405 437.226 212.391 441.215 212.095 cv
445.808 211.754 450.175 208.495 450.219 208.462 cv
450.35 208.362 450.521 208.332 450.676 208.387 cv
450.831 208.438 450.952 208.562 450.999 208.719 cv
451.464 210.285 453.656 218.159 451.119 219.42 cv
450.884 219.536 450.605 219.59 450.295 219.59 cv
cp
.968627 .701961 .411765 rgb
f
611.339 199.822 mo
611.339 209.032 608.669 217.622 604.049 224.862 cv
603.229 226.143 602.349 227.382 601.419 228.582 cv
598.539 232.242 595.129 235.462 591.299 238.122 cv
590.879 238.412 590.448 238.702 590.019 238.982 cv
587.669 240.502 585.169 241.822 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
575.549 245.482 570.249 246.442 564.719 246.442 cv
564.358 246.442 563.988 246.442 563.618 246.432 cv
558.999 246.322 554.539 245.542 550.339 244.182 cv
544.608 242.332 539.368 239.393 534.858 235.622 cv
534.658 235.462 534.448 235.282 534.249 235.112 cv
532.868 233.922 531.568 232.652 530.339 231.313 cv
530.179 231.143 530.028 230.972 529.879 230.792 cv
522.539 222.563 518.089 211.712 518.089 199.822 cv
518.089 174.072 538.969 153.202 564.719 153.202 cv
590.459 153.202 611.339 174.072 611.339 199.822 cv
cp
.909804 .882353 .937255 rgb
f
550.339 244.182 mo
544.608 242.332 539.368 239.393 534.858 235.622 cv
534.658 235.462 534.448 235.282 534.249 235.112 cv
532.868 233.922 531.568 232.652 530.339 231.313 cv
530.179 231.143 530.028 230.972 529.879 230.792 cv
534.578 217.102 542.389 206.192 551.389 206.222 cv
562.618 206.313 556.769 227.412 550.339 244.182 cv
cp
.25098 .313726 .498039 rgb
f
570.592 178.535 mo
570.592 178.535 583.937 174.944 593.862 187.101 cv
603.789 199.257 597.62 214.222 581.895 213.792 cv
566.169 213.362 562.513 197.291 562.513 197.291 cv
570.592 178.535 li
cp
0 0 0 rgb
f
590.019 238.982 mo
587.669 240.502 585.169 241.822 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
575.549 245.482 570.249 246.442 564.719 246.442 cv
564.358 246.442 563.988 246.442 563.618 246.432 cv
552.688 246.182 542.679 242.162 534.858 235.622 cv
535.799 225.122 537.068 216.682 538.759 214.252 cv
542.309 209.143 546.479 207.262 551.389 206.222 cv
554.009 205.682 556.778 205.393 559.778 204.962 cv
564.179 204.352 569.479 204.482 574.219 205.022 cv
574.278 205.022 li
578.919 205.563 583.028 206.512 585.209 207.582 cv
587.019 208.462 588.759 222.522 590.019 238.982 cv
cp
.25098 .313726 .498039 rgb
f
553.421 196.448 mo
552.863 198.998 551.332 200.829 550.001 200.537 cv
548.671 200.246 548.044 197.943 548.603 195.393 cv
549.16 192.843 550.691 191.012 552.022 191.303 cv
553.354 191.595 553.979 193.897 553.421 196.448 cv
cp
.572549 .705882 .917647 rgb
f
601.419 228.582 mo
598.539 232.242 595.129 235.462 591.299 238.122 cv
588.578 240.012 585.648 241.622 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
571.889 205.022 li
571.889 205.022 572.738 204.952 574.219 205.022 cv
574.278 205.022 li
578.969 205.282 592.139 205.102 601.419 228.582 cv
cp
.25098 .313726 .498039 rgb
f
550.558 188.54 mo
550.558 188.54 546.764 184.506 547.711 178.123 cv
548.354 173.796 550.246 172.363 550.246 172.363 cv
550.246 172.363 547.209 166.532 555.919 166.721 cv
564.629 166.911 571.765 166.167 575.646 173.659 cv
577.933 178.073 577.022 187.66 577.022 187.66 cv
550.558 188.54 li
cp
0 0 0 rgb
f
569.801 195.343 mo
569.739 205.973 li
569.739 205.973 567.805 209.017 561.584 209.485 cv
556.949 209.835 555.497 207.447 555.497 207.447 cv
556.673 198.153 li
567.915 195.749 li
569.801 195.343 li
cp
.956863 .517647 .384314 rgb
f
569.789 194.695 mo
569.76 194.985 569.647 195.327 569.474 195.719 cv
567.064 201.015 558.682 203.175 556.006 203.399 cv
556.673 198.153 li
569.789 194.695 li
cp
0 0 0 rgb
f
554.444 173.912 mo
554.444 173.912 548.788 187.206 550.944 194.623 cv
553.1 202.04 559.864 200.804 563.904 199.327 cv
567.945 197.85 569.803 195.346 569.803 195.346 cv
569.803 195.346 573.603 196.593 576.102 193.047 cv
578.6 189.501 577.002 185.472 574.83 184.566 cv
572.659 183.66 570.103 185.247 570.103 185.247 cv
572.081 181.38 li
572.081 181.38 563.412 161.91 554.444 173.912 cv
cp
.956863 .517647 .384314 rgb
f
570.103 185.247 mo
570.103 185.247 564.433 186.504 560.356 180.247 cv
556.281 173.989 556.594 171.381 556.594 171.381 cv
552.78 177.996 li
552.78 177.996 551.813 173.479 553.57 170.553 cv
555.328 167.628 557.222 168.191 557.222 168.191 cv
569.832 171.085 li
573.33 181.081 li
570.103 185.247 li
cp
0 0 0 rgb
f
555.211 190.805 mo
555.001 190.805 554.805 190.671 554.735 190.46 cv
553.802 187.608 555.77 184.666 555.854 184.542 cv
556.01 184.315 556.32 184.256 556.548 184.41 cv
556.776 184.564 556.836 184.875 556.682 185.104 cv
556.663 185.13 554.906 187.769 555.687 190.149 cv
555.772 190.412 555.629 190.694 555.366 190.78 cv
555.314 190.797 555.263 190.805 555.211 190.805 cv
cp
f
570.76 191.523 mo
570.64 191.523 570.519 191.48 570.423 191.393 cv
570.219 191.207 570.204 190.89 570.391 190.686 cv
573.924 186.817 li
574.11 186.614 574.427 186.6 574.63 186.786 cv
574.834 186.972 574.849 187.288 574.662 187.492 cv
571.129 191.361 li
571.03 191.469 570.896 191.523 570.76 191.523 cv
cp
f
574.55 190.44 mo
574.527 190.44 574.505 190.439 574.482 190.436 cv
571.989 190.1 li
571.715 190.063 571.523 189.812 571.561 189.538 cv
571.597 189.264 571.853 189.072 572.122 189.109 cv
574.615 189.445 li
574.89 189.482 575.081 189.733 575.044 190.007 cv
575.011 190.258 574.796 190.44 574.55 190.44 cv
cp
f
552.453 180.014 mo
552.219 180.014 552.01 179.848 551.963 179.609 cv
551.911 179.338 552.088 179.076 552.359 179.023 cv
554.702 178.569 li
554.961 178.516 555.234 178.693 555.288 178.965 cv
555.34 179.236 555.163 179.499 554.892 179.551 cv
552.549 180.005 li
552.518 180.011 552.485 180.014 552.453 180.014 cv
cp
f
562.254 181.369 mo
562.181 181.369 562.106 181.353 562.037 181.319 cv
558.145 179.441 li
557.896 179.322 557.791 179.022 557.911 178.774 cv
558.031 178.524 558.333 178.421 558.578 178.541 cv
562.471 180.419 li
562.72 180.539 562.824 180.838 562.704 181.086 cv
562.618 181.265 562.439 181.369 562.254 181.369 cv
cp
f
552.559 185.447 mo
552.514 185.447 552.467 185.441 552.421 185.428 cv
552.155 185.352 552.002 185.075 552.078 184.81 cv
552.691 182.664 li
552.114 181.984 li
551.936 181.773 551.961 181.458 552.171 181.279 cv
552.384 181.101 552.698 181.127 552.876 181.336 cv
553.627 182.22 li
553.735 182.348 553.772 182.521 553.727 182.682 cv
553.039 185.085 li
552.977 185.304 552.776 185.447 552.559 185.447 cv
cp
f
559.257 185.96 mo
559.212 185.96 559.165 185.954 559.119 185.941 cv
558.854 185.865 558.7 185.588 558.776 185.323 cv
559.389 183.184 li
558.535 182.226 li
558.352 182.02 558.369 181.704 558.575 181.521 cv
558.782 181.336 559.098 181.355 559.281 181.561 cv
560.318 182.725 li
560.433 182.853 560.474 183.03 560.426 183.195 cv
559.737 185.598 li
559.675 185.817 559.475 185.96 559.257 185.96 cv
cp
f
557.133 194.256 mo
556.814 194.256 556.502 194.19 556.205 194.035 cv
555.96 193.907 555.865 193.604 555.993 193.36 cv
556.123 193.116 556.428 193.021 556.668 193.149 cv
557.697 193.685 559.59 192.048 560.171 191.43 cv
560.361 191.229 560.677 191.219 560.878 191.408 cv
561.079 191.598 561.089 191.914 560.899 192.115 cv
560.662 192.368 558.83 194.256 557.133 194.256 cv
cp
f
555.754 205.418 mo
550.454 206.344 li
550.454 206.344 550.565 213.446 560.535 214.343 cv
570.506 215.24 577.201 205.305 577.201 205.305 cv
566.73 204.036 li
555.754 205.418 li
cp
.956863 .517647 .384314 rgb
f
574.988 197.044 mo
575.15 199.649 574.179 201.83 572.819 201.914 cv
571.46 201.999 570.227 199.956 570.064 197.35 cv
569.903 194.745 570.874 192.564 572.233 192.48 cv
573.593 192.396 574.826 194.439 574.988 197.044 cv
cp
.572549 .705882 .917647 rgb
f
545.852 241.335 mo
545.719 241.335 545.586 241.282 545.488 241.178 cv
536.296 231.432 544.021 221.534 544.1 221.436 cv
544.272 221.222 544.588 221.188 544.802 221.357 cv
545.018 221.53 545.053 221.845 544.881 222.061 cv
544.581 222.437 537.628 231.387 546.215 240.492 cv
546.404 240.692 546.396 241.009 546.194 241.198 cv
546.098 241.29 545.975 241.335 545.852 241.335 cv
cp
f
611.469 78.7822 mo
611.469 85.042 610.238 91.0122 607.999 96.4619 cv
606.358 100.452 604.179 104.172 601.549 107.522 cv
601.499 107.582 601.459 107.642 601.408 107.692 cv
597.839 112.212 593.448 116.062 588.448 118.972 cv
585.019 121.002 581.309 122.602 577.389 123.692 cv
574.738 124.432 571.999 124.942 569.179 125.192 cv
567.759 125.332 566.309 125.402 564.849 125.402 cv
563.198 125.402 561.568 125.322 559.959 125.152 cv
558.908 125.042 557.868 124.892 556.839 124.712 cv
555.698 124.512 554.578 124.272 553.469 123.992 cv
553.259 123.942 553.039 123.892 552.828 123.832 cv
551.049 123.362 549.299 122.782 547.608 122.102 cv
547.568 122.082 547.528 122.072 547.488 122.052 cv
545.209 121.142 543.019 120.062 540.938 118.802 cv
540.328 118.442 539.738 118.072 539.148 117.682 cv
539.129 117.672 539.118 117.662 539.099 117.642 cv
538.578 117.302 538.049 116.942 537.539 116.572 cv
537.269 116.372 536.999 116.182 536.738 115.982 cv
535.179 114.802 533.698 113.532 532.299 112.162 cv
532.078 111.952 531.858 111.732 531.658 111.512 cv
528.599 108.422 525.988 104.922 523.898 101.092 cv
520.278 94.4619 518.219 86.8618 518.219 78.7822 cv
518.219 53.0322 539.099 32.1621 564.849 32.1621 cv
590.599 32.1621 611.469 53.0322 611.469 78.7822 cv
cp
.909804 .882353 .937255 rgb
f
574.892 53.2656 mo
574.892 53.2656 579.897 52.4507 579.999 65.6924 cv
580.101 78.9336 579.999 80.3599 579.999 80.3599 cv
567.711 80.3599 li
570.042 56.8813 li
574.892 53.2656 li
cp
0 0 0 rgb
f
555.227 49.3901 mo
555.227 49.3901 550.396 55.5864 548.169 64.3701 cv
546.387 71.396 545.181 78.7886 545.181 78.7886 cv
558.679 80.3599 li
559.077 56.7695 li
555.227 49.3901 li
cp
f
560.108 90.6357 mo
557.144 90.6357 555.085 89.7876 555.046 89.771 cv
554.813 89.6719 554.705 89.4033 554.804 89.1704 cv
554.902 88.9375 555.175 88.8281 555.404 88.9272 cv
555.474 88.9565 562.497 91.8296 569.148 86.4658 cv
569.345 86.3076 569.635 86.3374 569.793 86.5352 cv
569.952 86.7319 569.921 87.0205 569.725 87.1797 cv
566.328 89.9185 562.835 90.6357 560.108 90.6357 cv
cp
.968627 .772549 .215686 rgb
f
588.448 118.972 mo
585.019 121.002 581.309 122.602 577.389 123.692 cv
574.738 124.432 571.999 124.942 569.179 125.192 cv
567.759 125.332 566.309 125.402 564.849 125.402 cv
563.198 125.402 561.568 125.322 559.959 125.152 cv
558.908 125.042 557.868 124.892 556.839 124.712 cv
555.698 124.512 554.578 124.272 553.469 123.992 cv
553.259 123.942 553.039 123.892 552.828 123.832 cv
551.049 123.362 549.299 122.782 547.608 122.102 cv
547.568 122.082 547.528 122.072 547.488 122.052 cv
545.209 121.142 543.019 120.062 540.938 118.802 cv
540.328 118.442 539.738 118.072 539.148 117.682 cv
539.129 117.672 539.118 117.662 539.099 117.642 cv
539.559 111.812 540.658 104.982 543.118 99.2822 cv
543.179 99.1421 543.238 99.002 543.309 98.8618 cv
546.679 91.3418 551.979 87.772 555.629 86.1323 cv
558.009 85.0723 559.688 84.812 559.688 84.812 cv
559.688 84.812 563.839 84.0322 568.868 83.9619 cv
575.269 83.8721 583.089 84.9219 585.568 90.2222 cv
587.469 94.292 588.209 106.442 588.448 118.972 cv
cp
.639216 .482353 .564706 rgb
f
556.539 84.9419 mo
556.249 85.1323 555.948 85.5322 555.629 86.1323 cv
553.278 90.5518 550.299 105.572 547.488 122.052 cv
545.209 121.142 543.019 120.062 540.938 118.802 cv
540.328 118.442 539.738 118.072 539.148 117.682 cv
539.129 117.672 539.118 117.662 539.099 117.642 cv
538.578 117.302 538.049 116.942 537.539 116.572 cv
537.759 114.342 537.879 113.052 537.879 113.052 cv
543.858 94.252 li
543.858 94.252 546.578 90.542 549.889 88.1821 cv
553.188 85.832 556.539 84.9419 556.539 84.9419 cv
cp
.407843 .713726 .847059 rgb
f
601.408 107.692 mo
597.839 112.212 593.448 116.062 588.448 118.972 cv
585.019 121.002 581.309 122.602 577.389 123.692 cv
574.738 124.432 571.999 124.942 569.179 125.192 cv
569.559 104.322 569.769 85.4121 569.039 84.7422 cv
568.828 84.5518 568.809 84.272 568.868 83.9619 cv
569.059 83.1821 569.868 82.2422 569.868 82.2422 cv
588.289 81.5122 595.839 94.292 597.049 97.0918 cv
598.769 101.072 600.188 104.312 601.408 107.692 cv
cp
f
569.669 74.5425 mo
569.437 84.9893 li
569.437 84.9893 567.486 87.9507 561.363 88.3115 cv
556.803 88.5806 555.227 87.5156 555.227 87.5156 cv
555.979 82.2388 li
556.719 77.0933 li
567.808 74.9111 li
569.669 74.5425 li
cp
.956863 .517647 .384314 rgb
f
567.808 74.9111 mo
567.775 75.1958 567.659 75.5298 567.482 75.9121 cv
565.028 81.0786 558.613 82.062 555.979 82.2388 cv
556.719 77.0933 li
567.808 74.9111 li
cp
0 0 0 rgb
f
554.918 53.2295 mo
554.918 53.2295 549.145 66.2061 551.145 73.5313 cv
553.144 80.8564 559.813 79.75 563.809 78.3633 cv
567.804 76.9771 569.67 74.5449 569.67 74.5449 cv
569.67 74.5449 573.385 75.8325 575.897 72.3867 cv
578.411 68.9414 576.905 64.9556 574.785 64.0303 cv
572.665 63.105 570.127 64.6226 570.127 64.6226 cv
572.134 60.854 li
572.134 60.854 563.927 41.5771 554.918 53.2295 cv
cp
.956863 .517647 .384314 rgb
f
555.408 69.855 mo
555.194 69.855 554.997 69.7173 554.931 69.5029 cv
554.058 66.6802 556.041 63.8164 556.126 63.6958 cv
556.285 63.4697 556.596 63.4165 556.822 63.5752 cv
557.048 63.7334 557.103 64.0454 556.944 64.2715 cv
556.927 64.2969 555.159 66.8589 555.886 69.207 cv
555.968 69.4712 555.819 69.751 555.556 69.8325 cv
555.507 69.8477 555.457 69.855 555.408 69.855 cv
cp
0 0 0 rgb
f
570.681 70.812 mo
570.558 70.812 570.435 70.7666 570.338 70.6758 cv
570.137 70.4863 570.128 70.1694 570.317 69.9688 cv
573.853 66.2227 li
574.04 66.0229 574.357 66.0127 574.559 66.2021 cv
574.76 66.3916 574.769 66.7085 574.579 66.9092 cv
571.044 70.6553 li
570.946 70.7593 570.813 70.812 570.681 70.812 cv
cp
f
574.424 69.8081 mo
574.398 69.8081 574.373 69.8062 574.348 69.8022 cv
571.902 69.4321 li
571.63 69.3911 571.441 69.1362 571.483 68.8633 cv
571.524 68.5898 571.781 68.3984 572.053 68.4438 cv
574.498 68.814 li
574.771 68.855 574.959 69.1099 574.917 69.3828 cv
574.88 69.6304 574.667 69.8081 574.424 69.8081 cv
cp
f
563.564 60.3525 mo
563.384 60.3525 563.209 60.2539 563.12 60.0815 cv
562.556 58.9829 560.994 59.3062 560.979 59.3101 cv
560.708 59.3716 560.441 59.1963 560.385 58.9268 cv
560.326 58.6572 560.497 58.3911 560.768 58.3325 cv
560.862 58.3125 563.097 57.8516 564.009 59.6235 cv
564.136 59.8691 564.039 60.1709 563.793 60.2974 cv
563.72 60.335 563.642 60.3525 563.564 60.3525 cv
cp
f
552.852 59.2622 mo
552.747 59.2622 552.642 59.23 552.553 59.1626 cv
552.333 58.9976 552.286 58.688 552.449 58.4673 cv
552.943 57.7988 554.354 56.8428 556.145 58.0093 cv
556.376 58.1597 556.441 58.4692 556.291 58.7007 cv
556.141 58.9336 555.83 58.9985 555.6 58.8472 cv
554.18 57.9258 553.342 58.9458 553.251 59.0649 cv
553.152 59.1943 553.003 59.2622 552.852 59.2622 cv
cp
f
561.069 88.999 mo
557.778 88.999 555.098 88.002 555.047 87.9829 cv
554.789 87.8843 554.66 87.5952 554.759 87.3374 cv
554.857 87.0791 555.146 86.9536 555.403 87.0483 cv
555.493 87.082 564.255 90.3296 569.055 84.666 cv
569.235 84.4551 569.55 84.4302 569.76 84.6079 cv
569.971 84.7861 569.996 85.1021 569.818 85.3125 cv
567.352 88.2227 563.973 88.999 561.069 88.999 cv
cp
1 .698039 .333333 rgb
f
561.306 65.001 mo
561.284 65.001 561.263 64.9995 561.241 64.9971 cv
560.968 64.9619 560.773 64.7114 560.809 64.4375 cv
561.096 62.1909 li
560.45 61.1724 li
560.303 60.939 560.372 60.6299 560.605 60.4824 cv
560.837 60.334 561.146 60.4028 561.296 60.6372 cv
562.037 61.8081 li
562.099 61.9067 562.125 62.0234 562.11 62.1392 cv
561.801 64.5645 li
561.769 64.8169 561.554 65.001 561.306 65.001 cv
cp
0 0 0 rgb
f
554.107 64.4229 mo
554.083 64.4229 554.059 64.4214 554.034 64.4175 cv
553.761 64.3774 553.571 64.1235 553.611 63.8501 cv
553.937 61.6396 li
553.142 60.5967 li
552.974 60.377 553.017 60.0635 553.236 59.896 cv
553.453 59.7285 553.768 59.77 553.937 59.9902 cv
554.859 61.2007 li
554.941 61.3076 554.977 61.4434 554.957 61.5767 cv
554.602 63.9956 li
554.564 64.2441 554.351 64.4229 554.107 64.4229 cv
cp
f
552.294 56.2192 mo
552.294 56.2192 556.495 56.0156 558.992 56.2192 cv
561.489 56.4233 561.489 56.4233 561.489 56.4233 cv
562.781 53.2656 li
562.781 56.9326 li
562.781 56.9326 565.349 57.9487 566.1 58.7646 cv
566.851 59.5806 567.909 61.6177 567.909 61.6177 cv
569.271 59.8525 li
568.458 67.4238 li
568.458 67.4238 569.737 63.938 572.197 63.9839 cv
574.657 64.0303 575.44 64.501 575.44 64.501 cv
575.44 64.501 577.532 57.2378 577.177 55.2007 cv
576.821 53.1636 574.892 53.2656 574.892 53.2656 cv
574.892 53.2656 572.863 46.3389 562.887 46.3389 cv
552.91 46.3389 552.294 56.2192 552.294 56.2192 cv
cp
f
543.858 94.252 mo
543.309 98.8618 li
540.938 118.802 li
540.328 118.442 539.738 118.072 539.148 117.682 cv
539.129 117.672 539.118 117.662 539.099 117.642 cv
538.578 117.302 538.049 116.942 537.539 116.572 cv
537.269 116.372 536.999 116.182 536.738 115.982 cv
535.179 114.802 533.698 113.532 532.299 112.162 cv
532.078 111.952 531.858 111.732 531.658 111.512 cv
537.368 101.172 543.858 94.252 543.858 94.252 cv
cp
.407843 .713726 .847059 rgb
f
558.576 73.1802 mo
558.111 73.1802 557.698 73.0967 557.41 72.9946 cv
557.149 72.9023 557.014 72.6167 557.105 72.3564 cv
557.198 72.0972 557.48 71.9604 557.742 72.0513 cv
557.813 72.0762 559.472 72.627 560.469 71.2563 cv
560.633 71.0337 560.945 70.9849 561.168 71.1475 cv
561.391 71.3101 561.439 71.623 561.277 71.8462 cv
560.521 72.8818 559.456 73.1802 558.576 73.1802 cv
cp
0 0 0 rgb
f
611.339 320.862 mo
611.339 329.232 609.129 337.092 605.259 343.893 cv
604.158 345.822 602.919 347.672 601.559 349.422 cv
599.559 352.002 597.299 354.362 594.809 356.462 cv
594.738 356.522 594.669 356.582 594.599 356.632 cv
591.578 359.162 588.238 361.313 584.639 363.022 cv
583.019 363.792 581.339 364.472 579.618 365.052 cv
574.938 366.622 569.929 367.482 564.719 367.482 cv
560.249 367.482 555.929 366.852 551.839 365.672 cv
548.238 364.643 544.818 363.192 541.639 361.372 cv
537.249 358.872 533.299 355.672 529.959 351.932 cv
529.759 351.712 529.568 351.492 529.379 351.272 cv
529.068 350.922 528.769 350.563 528.479 350.202 cv
527.099 348.502 525.839 346.702 524.709 344.822 cv
520.509 337.813 518.089 329.622 518.089 320.862 cv
518.089 295.112 538.969 274.242 564.719 274.242 cv
590.459 274.242 611.339 295.112 611.339 320.862 cv
cp
.909804 .882353 .937255 rgb
f
557.521 300.947 mo
557.521 300.947 549.438 294.485 553.118 289.13 cv
556.799 283.774 564.688 289.223 564.688 289.223 cv
564.688 289.223 567.763 286.148 572.11 288.636 cv
576.458 291.124 576.955 297.192 576.955 297.192 cv
576.955 297.192 581.385 297.091 581.638 302.48 cv
581.892 307.87 576.09 312.67 576.09 312.67 cv
557.521 300.947 li
cp
0 0 0 rgb
f
594.599 356.632 mo
591.578 359.162 588.238 361.313 584.639 363.022 cv
583.019 363.792 581.339 364.472 579.618 365.052 cv
574.938 366.622 569.929 367.482 564.719 367.482 cv
560.249 367.482 555.929 366.852 551.839 365.672 cv
548.238 364.643 544.818 363.192 541.639 361.372 cv
541.089 330.212 li
553.429 321.552 565.398 323.712 565.398 323.712 cv
565.398 323.712 581.118 321.922 589.328 329.432 cv
590.528 330.532 591.549 331.792 592.339 333.282 cv
593.648 335.732 594.299 345.572 594.599 356.632 cv
cp
.407843 .462745 .666667 rgb
f
571.709 315.636 mo
571.811 325.906 li
571.811 325.906 569.987 328.878 563.984 329.426 cv
559.512 329.833 557.93 328.837 557.93 328.837 cv
558.502 323.629 li
559.067 318.551 li
569.893 316.057 li
571.709 315.636 li
cp
.956863 .517647 .384314 rgb
f
569.893 316.057 mo
569.869 316.338 569.767 316.67 569.604 317.051 cv
567.356 322.204 561.085 323.372 558.502 323.629 cv
559.067 318.551 li
569.893 316.057 li
cp
0 0 0 rgb
f
556.545 295.163 mo
556.545 295.163 551.282 308.094 553.479 315.227 cv
555.674 322.36 562.191 321.063 566.072 319.575 cv
569.953 318.087 571.71 315.639 571.71 315.639 cv
571.71 315.639 575.4 316.786 577.761 313.322 cv
580.121 309.857 578.516 305.989 576.404 305.146 cv
574.292 304.305 571.847 305.876 571.847 305.876 cv
573.699 302.11 li
573.699 302.11 565.028 283.431 556.545 295.163 cv
cp
.956863 .517647 .384314 rgb
f
572.276 311.508 mo
572.123 311.508 571.972 311.438 571.873 311.304 cv
571.71 311.081 571.758 310.769 571.98 310.604 cv
576.575 307.231 li
576.796 307.069 577.109 307.114 577.274 307.339 cv
577.438 307.562 577.39 307.874 577.167 308.038 cv
572.572 311.411 li
572.483 311.477 572.38 311.508 572.276 311.508 cv
cp
0 0 0 rgb
f
576.494 311.409 mo
576.455 311.409 576.415 311.404 576.374 311.395 cv
573.318 310.641 li
573.051 310.574 572.887 310.304 572.953 310.035 cv
573.019 309.769 573.282 309.604 573.559 309.67 cv
576.614 310.424 li
576.882 310.49 577.046 310.761 576.979 311.029 cv
576.924 311.257 576.719 311.409 576.494 311.409 cv
cp
f
565.197 300.586 mo
565.141 300.586 565.083 300.576 565.026 300.556 cv
564.269 300.279 562.086 300.158 561.309 300.135 cv
561.033 300.126 560.816 299.896 560.824 299.619 cv
560.833 299.344 561.043 299.132 561.339 299.135 cv
561.642 299.145 564.323 299.235 565.368 299.616 cv
565.628 299.711 565.762 299.998 565.667 300.257 cv
565.593 300.46 565.401 300.586 565.197 300.586 cv
cp
f
555.229 300.202 mo
554.988 300.202 554.775 300.026 554.736 299.78 cv
554.693 299.508 554.88 299.251 555.152 299.208 cv
556.51 298.994 556.921 299.014 556.989 299.019 cv
557.265 299.042 557.468 299.284 557.444 299.56 cv
557.421 299.832 557.184 300.039 556.912 300.016 cv
556.886 300.012 556.517 300.005 555.309 300.196 cv
555.282 300.2 555.256 300.202 555.229 300.202 cv
cp
f
557.843 311.626 mo
557.629 311.626 557.432 311.488 557.365 311.273 cv
556.081 307.11 558.225 304.114 558.316 303.989 cv
558.479 303.768 558.79 303.717 559.014 303.881 cv
559.236 304.043 559.285 304.355 559.124 304.578 cv
559.104 304.605 557.189 307.312 558.32 310.979 cv
558.402 311.242 558.254 311.522 557.99 311.604 cv
557.941 311.619 557.892 311.626 557.843 311.626 cv
cp
f
555.326 305.136 mo
555.284 305.136 555.242 305.131 555.199 305.119 cv
554.933 305.05 554.772 304.776 554.843 304.509 cv
555.462 302.147 li
555.531 301.88 555.803 301.717 556.072 301.791 cv
556.339 301.86 556.499 302.134 556.429 302.401 cv
555.81 304.763 li
555.751 304.987 555.548 305.136 555.326 305.136 cv
cp
f
561.827 305.199 mo
561.785 305.199 561.743 305.194 561.7 305.183 cv
561.434 305.113 561.273 304.84 561.344 304.572 cv
561.963 302.21 li
562.032 301.942 562.303 301.781 562.573 301.854 cv
562.84 301.923 563 302.196 562.93 302.464 cv
562.311 304.826 li
562.252 305.051 562.049 305.199 561.827 305.199 cv
cp
f
555.493 298.076 mo
555.493 298.076 556.588 296 559.149 295.957 cv
561.711 295.914 563.226 297.704 563.226 297.704 cv
563.226 297.704 562.144 302.029 565.65 304.286 cv
569.157 306.544 571.847 305.876 571.847 305.876 cv
574.364 304.95 li
576.182 301.239 li
568.793 293.434 li
559.282 288.533 li
554.504 292.958 li
555.493 298.076 li
cp
f
559.818 314.025 mo
559.695 314.025 559.618 314.02 559.601 314.018 cv
559.326 313.994 559.122 313.752 559.146 313.477 cv
559.17 313.201 559.433 313.009 559.685 313.021 cv
559.78 313.027 561.735 313.156 562.551 311.371 cv
562.665 311.119 562.965 311.013 563.214 311.124 cv
563.465 311.239 563.575 311.536 563.461 311.787 cv
562.519 313.847 560.49 314.025 559.818 314.025 cv
cp
f
558.502 323.629 mo
558.502 323.629 556.384 325.876 555.122 330.019 cv
554.406 332.368 554.581 335.836 555.075 335.841 cv
555.568 335.845 559.267 330.122 561.625 329.773 cv
563.984 329.426 565.958 336.276 566.965 336.516 cv
567.972 336.756 571.889 334.061 573.278 330.157 cv
574.668 326.255 572.175 323.739 572.175 323.739 cv
572.175 323.739 559.999 332.98 558.502 323.629 cv
cp
.968627 .701961 .411765 rgb
f
551.839 365.672 mo
548.238 364.643 544.818 363.192 541.639 361.372 cv
537.249 358.872 533.299 355.672 529.959 351.932 cv
529.759 351.712 529.568 351.492 529.379 351.272 cv
529.818 349.922 530.299 348.572 530.828 347.262 cv
535.639 335.282 541.089 330.212 541.089 330.212 cv
551.839 365.672 li
cp
.407843 .462745 .666667 rgb
f
601.559 349.422 mo
599.559 352.002 597.299 354.362 594.809 356.462 cv
594.738 356.522 594.669 356.582 594.599 356.632 cv
591.578 359.162 588.238 361.313 584.639 363.022 cv
589.328 329.432 li
589.328 329.432 595.908 334.502 601.559 349.422 cv
cp
f
540.99 359.479 mo
540.973 359.479 540.955 359.479 540.938 359.477 cv
540.663 359.448 540.464 359.203 540.492 358.929 cv
541.444 349.679 li
541.473 349.402 541.733 349.2 541.992 349.232 cv
542.268 349.261 542.467 349.506 542.438 349.78 cv
541.486 359.03 li
541.46 359.288 541.243 359.479 540.99 359.479 cv
cp
.968627 .701961 .411765 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.302B.p1.302-temp_01.eps)
%%CreationDate: 4/8/2022 6:38 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26Ro/QZ\ra"-'LBM-$$,)sK:c&PGPYFEu`?o:AP0GQ'k_oIRIqh!A]9<5/*5.OiE<\r`B<+'nF_^6+\[bt?>;'(C(V.OM
%CFLjC@VK#g0s-]6fDj+?4g,h0mG8Tr%K?abd*-0hVfV/jUXZCLp!,k(;$u%EI&#D/[F\=P++?A\lX.FTId138XZ$/Rjf3do$Mn;B
%mF,O@)AF-mRbp[s)3'1/.<U*qL0cP6^6\9UHE#UM#7&U?-u[_qo/;"@:?g##d-8>D@9+CMFL[To0*W$,rt[g="rEPJVr`+PNV]P!
%Cms1'Gg`@[l15-6(lSRs/]*:B6?)@:WuYM@.V],?4%h"B@QCjR6qEen3A?Rjs(V$gI]'e$5lJ0dj8Vu__,pEc8=:obk;bLMi#Dq[
%E3tj@_oIMuTFX_HO@<=uddT5p2620RTFEc$Og.h8L8MeZp`%a#G)%!=G]q(?2LK>O?H,MB_ol]t9T8FNj+mehn!2i"[FFf`0*a)>
%dFhR`W:CT[<3f4*=@dm_fW>@[fC_`@B]frNj5&@)P_1ISVAu=4ol5KA'Z/b-`Ne=3#Wfc0NG97g@kHesZg;gM48t;6eQ)cuVu+`3
%IbZoV`ND0<;fc5#V&L<.E<OWmpDhg?6Wgj83/rGQL74Ac=,r7Bi@o!JJNIuS/@jZ<>ZC!(/%T/$4BmH?[cN+ZkuOi_N`]=!.@5P3
%";s/lj/F-2DP0=o'@[a@\oF1rNCJNugYJ3;*+*l)B6Ct@<&EBpCSb9@=q2gN?LU$?Jo+/5XnjE1qp?R464l.Nr9ZK=g[joY5-LWV
%M18555;c15e27!M@Ze6C2oiaHNe?d?#Fd^`2KPBt;%;f9fZ*NeN<fK^]B<TYcbjAi$@cQlHled=o@Ppma%u8OCf;nEVo>Cj;"nE2
%)\e4cM&4E0jq[EVr$cehT:70La$82bn\X29%.R6Jnn3amrl-jP'`KH7'fic[ie>/;*?p3PE@<.L%uj-=Do*N%+;jXc=dc/"!c3Ui
%iGWO2/0[dT&hT\(c*V"ZiG\/,fJ<TAHsRi>:Q&:YV4-m<Ckaq/D]FWnOtl.GjMp-dCkapLSS$;hB>bC3j#]Yjq#Gof`?PY<@l)%8
%J+I8-].e5M"ZWF>"^8Ru,dhd-7&E+*A)\rk0_UG*/Y8<K1\976gUN+:LM[Sg`M853F_AqoA&Jt/@l*7i`0'<$SaeYI5m3mnic6>:
%9Ko&#3F/nr@N*40[!61#AdTh0C2]O:]KW2Uccj>&`N+tqq!mp[R@9b'k5k@!r[/N.K$'V.Hd;iS+c>oQ=ZMXomK;:1oL<kuL_\#4
%F1RNcL_Hb7`(`kpUYStXNckNVUrZ-`,Ef"eW[4^6H!p'?lXU$1pfFIf?2cVgr[@Wds"')c7t:=VFLQ)k7=Y-*&H"`gbPth6hn*bc
%].<nmZi!\mQiH/fr''u#s.F_4^nBmEs4c>ipX*@IVhP/HT#X"4hn6`%?G5C6LneD?/\>+5,#ru=HU-8cS'P[%n8CVEJ]^!#O$C]k
%nmhYIf!MC63)qV:%7U0K#;0UOprK,CoL&MEPAiNDs)<1"`j9p'h830;gne,3[u\,44gX)(K!*3aHhj0[5]\HiF=g"Y@uqjM>cs"b
%`L7JbP]1#-YROH+K,+j)5rg!YRq,gZ_#GU1C8s;n(cVLhiUO-7HU6Cc)!,gn^h":$:5.^Tc<GCK0Jn.a/#<u*C@Qt4>S-fJ"`..[
%Ki#_:$Ap$$!urL[GojbZm56`:ji-GRO,s?&\Ms_6[m1H")+#!6;ju%K`]Yod*j,keV28Mn(Gn]]*m>1MUR%PF_MqLSafZZr8V;aM
%rn"WIfnbIjGG_B=bSsmTUMrd"_l[m+?<5]epGh+G;1Rr?C(c\)Y)\:G%F;A:o!+11)R;nE4[\.40GG""Lp^)('2dE)=ZL6`7,g8;
%'?K*#(YWK7/9Jq;#Id+gLQsYP(_f)pXO3dLBLnS_6-sk_ki1r8(>#7GMkAH&p@*[!F,ILjS`;\^-nn5=2b/a@(3]rV"j%Xu=lMb^
%8#fcR@HWVThTNe+P7<dE*.PM]:6BMA)d,;qZ_<uTgMcRLBLnX6FJhMURU*l)NG[[R?5=F]\RMQ^ADjsuAC@.P?m'oHH<)X8he-6:
%:/4j5jfpCp&9D,F1-<oH%"k6^-+Na9GTk'b<ZVRf,<J=]lP13rFDQ)=Sn?XUj"57jo3r*R7cYd0VH(E8]LWf/hBPY1er^(@#ImGp
%effB+n[XI/L35\'#?kcJ]GZ:\@Y7"b&r<&#UoKNVZ=i3n.^Wo>o7j@dRopuEpn!J?1BFnCMkYhR^r^o*FoB>AF1-p@ctjAWaoT93
%#*9HV:5Ibd;rj\u_\ASC4dQDf/&3\(QAn6X#^chNZap]N%8JL+#=D%A:gB6<B!JseJ=gu9E\uD1`Q'ls(cL]::"L0OP_W9tXsBWt
%:75eU>gmk<(s:"d=TO/,cPq^s+u@M_\-@,sO0a/h_m`*WZ4nKK"r_9&(JrfgUi]_>LHL-?WnCmf%&-sJ[&i\,Zau]MkXQgC%k?08
%m7'=IEJP":'h(3BeEp7s^^HW$ObV9!0%SDT`?@OTp#,6n5(c'SYmE?,[b&Ta^qrET',Ffr1QEA)Im?;44e.e=:S+,+B^p'K_[U'c
%"Dq$.hR.^,_9j5Zba:MqNGm?SAMVmb/:J7]]<Ru&7L1@M/ZZONGB$8`ELS*FpmQ\sQBQC\AAji((S+9+D*r!6'_*44L.!<\UKSh5
%o&@(6+4n@O[3K)Dgor$C-?3>0iOiRR$UCG:qnV[lDVTcXH%AUHKgPn\h[3Vkj=ZLZ*n"?mAN3IVMV8B)1]AU+LkJqJ0=Pj1ODXIt
%Ls78*7"#t@+he1B/;`)R*:a4l45h'LQ^1YXQQOr_r[Wj\PF)[(qdVZ@+PKE8hDF#'WDC+.+>"<j(5q.g2+;S:GnE7PbmSJ#'SIU;
%@1_k6F9ma9Pnj%g_GUZY#qWWIUmLI`Q[)c^Q=&+f"^7T9P*-!7?FiPT9p-_1q)KWHZRPc0dAh^IMfd+'b>C[-7Z;u+Ta(ZeKI\19
%0E%n5roZjq_6TC$PUcr%"3llo1"JC3F>01:jBjQ&@;0Fh;t`5&Ai;bI$b@??5\5<?Mi/B7T[5fq)']foTUS)&/e*`p@pjGB,-8Op
%c[0pUWA?.^_IIIrjFB[SEobh#gj;_g\AtV<7BU@[.?eCLHraO2An+!!N7HeQC]W5o3T.U3cpBdd6cP*QP/S4jEVIfgL`Ba/GVi@G
%jbt?,fiif!NYpMhdL8t5$*@u$rn2'cT1=(>ZKFC4kZm9uX81BO/X!`ieuj,pj).t]h2TJU;_-R$ef7G=4oh!?\F=IpQ!"YS`g&L7
%mg.$`=-b*a9KKjnmm(ng60=;f4/MX!4QC++/j!=F*]LMDq)DjI(kEU$G!rojCFr9`Cof&Bj6aci?r*5E0&bL,VBY^TGC(!O-oIZl
%quHCuP8qo,H-<@t2LE(fRQZ]]-&WU#74S`?oGM<"X?#XS^i"Z;&@oRYNY]ka(C4g'`+Ca`H*>lDo0r5@f_nW$Jd?G:bW$mE\G./K
%5Z/Y5,]VsGhCCPci/43qk\Qu[GFa6&mf+Ud&XtRgZj%b`8MN#,8r/+[Yu?lNlqMi1\tH*WNY%?($fN/=s)rn`4Sb0(@53e9\G#`"
%]^NFRZ&HbfNVcf$d--e$e"R%G!o%4ao3_']%<>1fIX-n%3jB-SR*1\oRHp!F*Zp;A8aSE9J-6<;ToPjrs-Ql=MrkcH"JnL31?8^<
%`5osc;fWn!H&lH/_b1dd2_L"0jR!nQa,C.EanDkig,L_q7`N6/L][@U13uF>#ed:#kE.#,?3&:X(r'/#UZ91`Ql.r%=`@-Pk7]#b
%9>\Z"&G-bi)5MqPm=iT50Tj/f%l0uWEU94a'4_VSWKGNqd2Air*.Nq#eM/!&!@$`0!,;eJkH[S.kjr6!:Ik"(bHKliKuO[Z+0OFX
%/2@gkF[Z]sp?ZThU?-?e.<*++NEh/k`hiSm-OM8Z:!E\c#!X]+"(sDceuOnQ<DT]X""sjgUWbGN$&(bA6":l3B=-pUQN?[m?3=qF
%_[U*V]YA:JJ_f`+DM"t7Cqob.[R$8$a9o69EP^'rlB=)7)"QL=l6<TZM,HIJ3l,pK1#W=*J(7"3\St&XO75[1]R4LW?-V0n.GJ1i
%fmB%)CGroDcnGhJ%uUuJnDDSQPapCp;32m?05XXFCS%n\J`s<2+oI7jn8PgK;t``@JQnmUo8c3amK.nQOd46HFpG=8&l__ka9dq-
%APN5h%#r-FO,O#T7@Ftc_s#j5T"f%#4?B?sZt*)ffo;:-lsn,8!glJ5DGf?djA#+EM=02BDBFU$a;)iq3$<=)n-:BaD?G^;VR0KK
%7IBj\_N^aI>]4-'O!r;*+DFSlje@P4di61;XsNh8(cnADi_?d,8lM5[\QhQUiXlTf?!>YP!5HE9Ou7E<M6Jh4*):<*cPLi"aQ5Zk
%l!P.;Mm@CY,%O)@F\EK_JY(hSIe"i`GjNsRhp*N;G&WFD,:aF5&a>Z[4nSjPe#:mNX&MnVIu7)?6KTUSpVi(^GbKQ3St&F/7E-f;
%L&@AMWM0N@nW2@&m7Ap"iHAof'CNFm@ADVuFc")9SK"1abkB!dC#p]T*)g[N<7JlNj!<2,Q;CP;_fuYH>]aXnnAZ3<78"kbh>QiU
%Q\":$*`,eU6kn/47,<!25e63754^M;GaHn^2<jWL_Yb86.si7'\bOE/5%.JAMU!!eTn1sr*40K[>08FZ:-_Tf2))*s:>"/]lU?Xn
%SimLaa1Ni\BfMN:iBDl<Y!)bXbfWi_A<]39Nf>G3#)8LDjR(>O<7cO>/2FFK=k@C/4^m3'`[[fB0P`Qf*[&q18E6GX(1Z0llsF'/
%L&M0$0I&b]R?<m(b_L>t;"KIiKg%-sc3@!(,LUdsGtg#H3.@tYs43!O>'S2#j*2fND&lkhSIC`HOc<RMR/E/XUZZ)G=gt<.)d-D?
%(VMd"p<`>BO$=8F5/Rp,S,F[MhBO@ebF?(U3WI2M`?+%nju(OHi*a&*cr/C)>hRP@FqopKStkh:^P*?;#@/\AN_R@/0sQ#TNAZ]@
%9fP5rXuPMgZ]mV5=AR^'bFTs4o0&CecTZ>m0PSph]fhoWS?GkcS*R,\1j`TBXN0-C33<0Dl)YYm)2F5$.ukY/kU6JUMkTJlJcdV=
%D&dkVkj%99I1),5:!u9Of//F,7R<q9Tn+60b$;1&,><+?e5cAU/eDn,rYL<9#5fhENR8/,C*I[<ZSIH$8G:%rW=+H0ZE^^##dJj$
%(GQ2(APpM'<([a>U@_m#rMQWhEmJHg-#Eb%(M(%d(m!:ffY`dX&K?KKYdh[\H/gPXm=QaCaEq%]A[(4DWusc4E%q?apMdHE1s"?#
%]1u%5,BW!p15O_WK3Z>_7bKY`.PrT:7?Gm\p@rG)NMOB+",hjSZlro5&X-fb<AEruAuK_fMW*e@if:P]9\+d,j1:OliTjT035u=C
%qF.MRM%;9ZAQ"ATX]XH%2Dn!M3+ts?7Q;]EU*195ZXJjo>VM1tK!L40O?srtAD;DiUr]ULN()SjaH$($PWJ+,@C5):aln;_TaRA_
%M`G'0Bm`1eMpbd^XA826!eoJ6Z`hE05j3`,hUdnYZV!1*!?LpjHMt@T/5\aoGVEnM-5.VoC!llSYbQA3Y0H9R6FfD;7l$g+"m?op
%l!<rEPsZ<[.Zs"oXGeKY%gG$TjJ>MAQG&&uVO%7:M,Yd&rQ\LB-_FCTV0l$Cr$M;W8l.i5e0B[(!=6(8rI9`A<K_i&BtDR1T*tTY
%90%bY%G+E?9]tL_$TT]s(Z,=+WejGnQIq+k0M<Z*[Lu,,$#;qGqQ&f>#!"6@&.<,=J#.3ORCXHBB-.Tq@Ylm;L1;A2H;/K60V-Uh
%P?DgV$-`&";l83:@8rcAVRd1c=n1#kpQ/Y<./PLcIpm4Cl\=8tK6i86;36<a.t\A;/7XtPL:ddVaKS*V'4kjqj>[89^iZ0jq@t7T
%&/S(J7b7(!9Ir[&QrSE+.B8Jp4EI"b1-QKt?fi:bI%ge:MVr+o%U+j,j$J25]qNc4JkifN(I&HtJCD19FK!^Z\W"<&Di[,(:CjI2
%pi*:akVfp9kDd7UD_YI6S->mUT[[\_.R/Q+CB*WN]NIiYdW8-^j-F&(1#RK4-KA0r91&n7<rH'\i_Q7$]iBQGoIg@1NE.VLJ>&J*
%mm4A/N"+"uP)OW^p$7&W73@0bmSpp<-U,m+)A3tnS[XHq$sN$FOG-/t2LXWCdNJ6\U8dXeRoV\[=g#Omgb@KbD3"Vh4/L,kb#pgJ
%I!NJ1X^&72k%1BRb-ehJbLCO,;%;^"k4=[dn^$DDm!8K(Yk6-19"c4O;FfP8-]$o!e=-.P@-Zt(D^%/UH#s;&mFSW#FbhH?p#2!L
%Fgt46"@b+Mf^$,:i58-TjetS3\SdGaO2?/fGRS4n@TA&,\K)1+Dkh;Lo.V`C\pr5T)V%Hl(+hHL3Ug7D8uW^KrFgD,+j,nSG\Xic
%ap5=BX-(PKgRUeC2`&tT\$jpQ3;p"jg1b`bYYP4<XA_L<%*_Fn>Qeo6!hT\RV>dXI*UD``ZlJrW%^,TC['DIZaO2sFnE=D`=K-K5
%Oj;MHF_VBB^"qMtCQnpI?)X"Wd7_7IA&q1+WPs@%eN/)f!o)J0S96mom+!=oQu08/r\gUr9"!F]lI<[AX_u%%&UoPN3^6G"_2!r[
%VTg]h<f^Y8qF,=tms_Yp>?qGuMp'BTmHT.[S&#G2_abq<-ODOm'&`:i]M\GO!=Jjc%YY,?A?k=VLLYF$&jfAP-buj^or,)g-9?WX
%b+6]Y.*6Y-670<mR]SJ$rDS,(8sODuI'D"nA1J][S_328cA#8k'stU',W\d[*19.8B_HCecMVi^C^&_-6+rLN6h[o0'lq<5bj+$<
%I];@W&!CUlGiMZ[<,Wb!.cC148$,MQnEPiU\Fm3M'lk^->qdNs_/T%Vf20,s_>hc[p"NM1r:gVZLZ&tPna3\*A"?]#h^!,'WZPH)
%MSG/ih,YuW@W+F:7YqZp*BlD70SVuj)74d1I1i1c2'&s7:nXUYTp#W=nqU73B&rFbX;6EZeG@[[)`p8tlH2h,\Z%*'P:L9??+G=F
%asD#Q-e+>Q^o^O2DO`i"o9KpZXmS%rmAV`tGtN#?bPfcWRJLr&?S8$<C>CCIDT0*jhHVf]`n[1Z``SGbl/[Hb61sHi0/rm%VQR`.
%YBFj4JWo<d,k),oST5nK?D/mh'3WWNk+aeMa@lQHB$Da+J1\OjDHHa^mUdL[DnEQ"IbkPq[k.QNMGQ=TR8k<eTp5b9,fW2sK[rLG
%brdG\^/(IYO]%3NK)=Aneinp7?:ElqlOuq`jW/hXhX$*l*1T6n8Kopqh5HE.:qG*C[a+hLE)cCl+k5!=roetHAPNm)%nKs7lF/\O
%Bf>6B4c)]=Fr;0LammP5lKsU]-iB\k'C'P<cn59]n(ZTRYS_HEI`4jd)*\e-nT3bL`^-@tn*D<XE'=&=b;bZZ\g(#(WR3L;7aE)\
%kcrHV,i56"2[Q?aNcEPKeOkT<*5+ili!pqep>V_&e@rLC$kc&3)iZW`2jr,X39XjhmU%8KVQ1=";A'tn,WM0d52Pa(lJHM[3g[7I
%P6@<Ro\hcd:@MO%#EoeZh$mO(!E/K[><DS#5Q9jrVH#h/.\CLo:PmF9qab)r*6()Np`Fcp6bd!)9_h/QRVN)CcNMA%qd.=-+Jq(P
%@1#/]i$%cZ?`nL7Ln8?@>0#t?PV.puRrY@j-V9X(W_57Q_XkD4`uhWH)m/6K?6,EKC)B;sj?>_RG/)PZ<-aJ&nk/K6dStMj:NdpJ
%*-l##f?1e*+h\+Q.g]9OML\KA($o(d_gG@8>>&Fo9^$!V$0klqO2XcIrWA5#O0?hMqh$8INgQ&`B>Q;M34l0d?kO!B7!plk"\8s.
%Un.,YM\/0VEA+\!K)N3;[Mhk<,=+4AJ*GSN61lY)dd?EnP(NjB7YT`.JkY.ZnJggMimXc$BfE)A.DYCrg%ChuH/p7?s!QsMWVJ5Q
%Ju%gF(mdfNh70M$/Z&G>%D:2;?4KJk?7'Z9<5Xjcg^#MLr)5X/O,qTShBl<6Y29l1#pr-V-$eWn'!M7),V\8]lB6,?]e<0\rpB`q
%8O`AG>fUb/'KL%kWbnk=l@GS#IMmOFdV^:$)/?8;W0":ulqodbD)L*`ACa0N1sU]27&iV_)\jjc#n,P6/(JC?6H&0QO@aBs`D?mh
%h]i8Yimu_1A29CbcY+To1)aY>:n5!5[3Q/NbsmCW.j.>E!O%d3(&Y)W,]"5S*>MWJ7Qh&MV,FeR]qs_b#H:hcOa7dl]i%M1j@=]7
%"o$qa[aMjh6uf,i-tD5W,iPap$"$AF,tdEN<MJ:/n(LETf@RAF7H-5-72_fM*rD^F>)P-oa3T1677kF!j'R_-^d=WS>*SoXXerKS
%2dnPF7JS$t2YWm\V)5;C)->kh?Ikk7s++@<,Vh5+(A4KTU6MO_.-"ZmP"9!#?.C7[Zq6DVhjL=/`1!,_H[,jN*9CL%p>pRV._MW?
%0mU6-9[6-*d8c-G"o%<]_X-u1JaOX@rQPqK8NabN`/uG/G+AGQqspAn.;,H6okq7_9_I+FoU7SdCC*NceSA*s2UuRVU";2,!1B9k
%;fcfGeQRJs3n7tDX`cY*2Ds'_`nFCm9sr]'d;&31d-1i,gZ(bd"=3cOWS!&"!)CMsmU@H=@[)BG;_a_u;%M"N2ni/1el$[CU,ZKF
%@A:?C=PH\]"Y0#7nkW(FW;8_R8+=a_\FK,Q]Y()s`9UW^UGPi7\*-Dd4dk0`o"RSh("=-\?7I[D\$lcEj-+t89;Pr)c7ARW^Ql8u
%gGK)J;b/0/Z*pFf`9BuE^N("1BJb!,?T5?VDSpBE"[D>B)ZHnW#H9rZ&AmWnOLs<C12`u:=e`+(Ss\71s+.(0_T;M#q$tDT9_VmF
%iu^u9I\YJ1[)$A,mj@i+oSLs!GKqOprDW7nj_!;es2G4;GYTfnjCmP\^jWeBm>a^"fIMLUiQA3jnn)keYgGGjE"`cUi1Q.X`CYSI
%&n\]n+YP.XiMNok*ZWDOiG^aAAaBpt^K'N'eq-X0PN>#W85<V<if7[<oLZg^PCD!Ymkk&k=0-`=^E^75E85^6*p.t@jd10bo=rcP
%mkk&+c2ZY9M:;Ck`8lEiY/1UOTrf]LZ)0P=nOb$"9Rq>Uo::QEehlPO<]ZmY3BusZq20]Z;$.-aBbKZXUCQ-b4UG!g4[sUf-;\a=
%ei=R<7nN/@mqFu*]>fep'WmtXA$51<?"a0CWn#,H_\&kK/hT64@&8PNfHrk`^Vcu]9WSDq&[G4KV\-43WlsZ$gJ/u(IoL(oB_#l)
%C`4XiL<4n:J[KsS$A/+8(lc?mE+\4+Z2VGbW!8gc<`!+@[/Bc[H0o>DC_Tt=,`$%:<Hsiag_=Nc1:tCtJ<U#>;X8LDqVK.3fhsCl
%*2Y/aaDKhN;f/><.0XlOG3&0SO_iom"sqW_Xo%dUJ::iM/,(:n!Cu'2%R;<!4t1]Fs"qP!8ee]RlnU=!':^Rf[<IGM%X+6E?D`:?
%C#EP@GaSbBY.)KMJX:*/AK#fMnKEWi3:J,e0GK#)#%#=%".]X&mLja^h)TY.l?pSuJ93%WSnS=Allo!pm/cf?mF'Y-O/A7<N2%_u
%<]UJ7ji1-C,cZFV[7'&Y!q*rH'1qUM)#$*=P3g)rh_C5rLN1(=ikBgqan1aQ8N7^Ydk+7;1b,CNjI"jZmO.)f(8gU]+d3l;e&1^i
%*0-5MDnj3C3k]rUHMc-hf^upuqbhV7o]X^V2u]Ct8^4qq.R1bW;q%Z8a5mSpprD&,kND6*K?J0:jb0*Z0qsoj>;45Z*=tAfBE*oL
%%LKjAQ5Y_iLYlH94\D."-^"3Xq>e:)/1+q0n)b%;gWo`53;_cQb1&eJ":n3c[CP69H5S!/*"!XFl>0\Pm0)Vu3MArf5USoCM5`<u
%9Bj4MqWh/pnbKdp:/pp8gPnCW0thE!^;VgsBcLW'%'=4`A"6!0]a&P9,WJKX(t1Ia\13D.g!sdVA)]FY)TS4u36$Hch*_dUj!Q>@
%\aTN#.=mO@0d``_8T97'RGSL3Xl*DBW0`\"Aps&:(*Z=HT3:X6p.HG+H_T\aj,HQ_<5!;$WH:`k"a,.(C2A*!W@#KaVtI!M4)ap[
%hs+OCP2nVGmPbidE;7goMr.bf2mt4)^8q4s770Y"D=eVRh332?ma^D]8IUEs^RIa:,kr^W:*[lCeJK;Bp\9K:7)nY?X&2M6:t0<'
%g0o;/d]_Gk1qMVk?*4Y5;h:S$DX4B."W]_I6,EG>:Il\1HJDeYl1H0K:h&lnTN'P2<P_`LAB):;.gZR3@]qMB^*aSbaXQq@%$B#.
%T$.*D7@#u"NI-pgd-bgI+[PqH1o2=7)iKqIB:.$:0+nVeZqmU6gqX4M8ma3=%\J&g;f?R=c!A@=;f?R=btYm^M>--F)#dHPDSj&s
%"?-ibW&'b?Z`,`>:<qXeXUgo4F&R:#lHW,[\c8HeBAY4`DFM;F%UCh8VCp[a\9*SGB6%7g2iU<&U?*a_5OQ-JGL*F%8Ds)5n9#06
%k8P`\5%?c"?NW7#=(9$h_V!`r0teZMCfFKr[L4B.:jN#2$Sk1M@[uf.YU;n=SQEW]jfeGc40/4SX7[0Z)GRtGl24XV'Wu=tIT2M!
%#%bDD+e*HB-:NlN\5<ng7JHZJs0YL=`]f!D<-ZF]0`@1YglW`/VMcMepIhtip@mYproVaf;/-Ci?'%V?)g2"3ng(A(IudH8Q_;Kq
%h//_[V;S<5-aRo@RZI!A0k2LuX/GX?X8>t3r-b!sOmjhII\=O"D$P#"Vu@1$_Ct`::Z(bo\!,b(UnA(`'#o]:D+CI*bQKEEs&l=D
%'BNlDQD;<PA7bsgo)'s.WDK9%FXL=8q9bg>#Ut<FWKS[WR_.$-"]((GG@,3YWHBm,ej5J2"I7n^rmP]5K1%?2@$`UV^"$T\i%bab
%R2SLmUZ`4,78o]>[kHf5b4*n/)EX_X^6N!]BpZir-CRtBO/"$u?XSAEe3NTOebH1q"ErAH9e$'$'%glVD<\*jg@X<rO7tg`@A^([
%kG=[9+6p\Y*;'nnJ*L59<i'k?$PIlO`:S#=*fg89RrWg?NX63UIR#5?jN%4L9S10l+-=TEf(<dk05';j7ZaNT2E:M%ci)X[5Iu`/
%jG9M=ED3)MI%RTRSUT,DoI?L+;1I-N^&1@p$,;j@$[T:#.0uA17:,Ro\-2P>9SCdJjes2H#>S'/o"XKsKok8\d`WoI>W!M3B3/rW
%G&QEanQ$=to\$tUIG)Y(4)$)ANf<r6r0ZinICLP4-%Q:\p:"SfcOee5?S[1@?/1\)qfVN#YGec6a<09T,8toUHWji:meS'B6Y[:0
%&G.5T+$>\Zo\DA!U`??IDc#K&]KHd/`CfG[`NT9f#rIK1iJrDRKFAM+aYQg$Ot_RY8^cg':[8U.P@D"-3h/_uEhA^M,>q_1^9cMD
%Pg)\BB);I-B"=$>LQIFHO$"Mnr-J6&aYtZ-+jVAK*/qUE2VO]D3uIk)a5)^=C$9%FqY5bMToum$[JFMm_'F=dGL_e=&mUg2'$EMH
%JieDfdTgs"f1n9jjm^HT#\G=FFK\P+J5POAQPBhQ"W*GMr0+npDm)a)\bt,H[0sbDl!%b-6.p;=/4el+h=bDpf<>&f5qBA#.`30[
%I@0"io7")N\_qO)2Ebq7WiPX$>IqK0j40u*7P4t.kZuIU5ja=!+U0m-E/?&CFG'SE2#<(-p\WS2nRpNUk6Q"QDM('cX>g-]dlS8d
%`=K`p5,bkb^cHhX-7#ofQ!1L4KT3@g55nG[2#,s4+!HF/.jHT@(gs1Q*9$.R75$KJ_$a&f/R-;VDmS(b(#ch(JaZp\X02O#)b?+F
%9muf4V94;(LPI8f0M<9!6P\S$Z>naoO;K^ZL=>>$Y6LOm^k`u#h.>]+*tD_4G,IdF@A"=/nb+>.YP3[arpQK_5IkGjiN.7XW#Z_^
%B6+9>jsIja(EiSHiR*_?=egjArI8gPcj.6u#.`qaUXZDss%r2H^_LpgWsXBiK5Z)H2unV%_V?Rg6U3'mqXo"ToePH1p-9!>I`iHG
%mjP,d1^)pi;5_f8D:ctI5Oi'b;tZSnDa'qB-iDj1o:'@&kqJMe^"!se4'eA[[njd9XnMTf9)omj#=CZ?E&I%>[hDQ;ZUu7Q12V9D
%+LD<8*X/)tU.GE,`LHm&-N8-ul](a[it0pE)l9TCkRC:o'%QVu1<%!U`3&aaghF(-Y$`Y,O^o`jh2uXTh3Gk2pZ-&igPuN&,G(`L
%]@3^<Jbo8=/@sF+d?_\V)&,ec:AnP@c-c#9X8hj=m[#?2ci5$grgj*ahQBmOpIC3Ii)[!%#(H4\N0A[@0J+LB'uH`dD']L/6ORO@
%!Pd<+pgo\Ej"n'2R:dTTHlUVZJ/bU$74ZcpnBsXtn)59MH@T)"dC9XhZUP0NMk/e=Zeqcf%$.13@KnoRN=eJ1O[I1]p!Mf.7DRk?
%(@.n&*PW$FeSeQKpTGAh>F)O\6p)9$h)@WC>Lue^*!ZnIDDP:o!XAr&TTqQO"mqtHMRfj_%a/a:WSO4qR6'upSY0!Y8YNE=@F/mk
%]4#Pf?\eStVqLG_kX*e0DJ_IarM&Ub"K@#CZeOi=,?G>+15aXSN)mWa*]KPX%rM!u<jcr0<tBpq\(\Q.p!i^Icc:9K,@%47l<mZ+
%l*p/er7"09;GOVM5=8FbgSQ!,m'f#g%DPn<d3\*-*BF<hCf4:rfWsa#@3aKk>.<e;BVaNFR*llNqD'%uk-qPjBC`)<V/.\C1(:&"
%1*&f<VI*C']r@uZ.Q8lGI\#/02EDHMA[bUkDPn(aHq8\'1>JA@@\h:Y4#O*VS:j8o*?06:gK#0?M!YVTV@on."W5n\">FLS!MlMA
%*]idj]hu@UJAb^")BlTU4`*bY>Mk(_EUZaO[99YSr3K#'dSWJpm[1-p/j`-.hQMG'gIKXd`!7$VUMdCEj0hm)n4Ns`qqm$,ZW.=^
%8$>nQkWnHt\8X,RFWROr^nb/5#H81a[?'((5#UjB?@(/p&Vnk2n3*][WWhGT#l'<"JSgX8:>>3D)HYmk)K5#]>5Rtf,mCXPWhJg7
%p`9Pi]\KYgq&X@'KV+Dof_hW\C"?K,UL*5"]4b:a,878,]#nn,]@Eq8V%X[H6l8,$8Z;M;K;5+9h![N&SOU`)U=sK`KBqo\YVhM"
%BPeQ3g;Z?A7].-%^1eJ33(sgt8#uFH$8&9lb-p7/Bh,FTrJ!IM.Q2/m?Ft*Ii]Toa8eWHVK-(&C,[J33g4Pn.n'N?HZgo.1"N1hX
%]hcti96=Uo8rZk3-sqU:C3?`-l2=kr@jda`Ud2nQkmP74Q=j_-d:R+q]loJp0fO]t8;ILsp!0D32@ki94rJQ;0\`.Z?_q(PJA,0c
%j0f?ICcLCCa*l.SI66fK[pI=6bMAMZHdj:O_N$8]g[W+cHGWmUle0uu6-#`+,s7(u*pMs/lD(rJ"K_q,hX^],5%"5l)jDl/>)Z^Y
%Q?pb'6LHb\8WOtZogZmaWCi]u=Vft$F!/CmE?$FR?HfY$Ff<9Y7>ng<=F*2Cp\X&l3$l)p&1b&Q.BYsSJ8qaT"hbGWJb9L.eL_b#
%<9iR]X-&IOqR(=/Tc*fD<?:W.R]*ta=9*"h%%-)RmF6Ag>@%G"`b]!^RV/jk=$oJp@N@pS`*laWRCEEUFK6E=W3.@Wo9"0Ir;E@0
%[Tu+9Ui&4[Xs*F3F.H;l2'3?e)n_,SqrU?7.W^=k9&oh3_g])#q/1"Uo35;`JbI\mW-A#S3riPX##Y9K%;9sc9\?!QF4(g3_)X2n
%3Hb$?<G6s*&23S<RC1_j`;7$ARB`n`#23'lYgL.?\AMKo)?X;G]O;+NrnWZs:(M&_g!e5iSW%pmjK2Mad^Y8ccX_:[<aMJcNUobb
%R,jKaG3,Id?ZQD]TL<*m;Hd,;ik'nqO;#cAp`UM!<3`];Sa2XCeOMmqF.I)1\.A,FmOd03$bk;cSM>$!0&H)$aac8^Z!6FKXZ/8;
%k\99?1Ir#d2bOnsfPHiedQMDkMm,+_2/k=N0r_cf[FT]u@uuJGX\>k;@i9)\b:$l1dCB[2i];(0VT:ZX@s/m$Z11Go+6mfIXAjZD
%2*Z5f@gLD*Pp0QBe2<*+UOlukg.f58j2Ik[qIX\Y[<oCWL;h-QEQ^n%^#"QR3QNGp9%j(.gJe9am++h=;"gMnVCd4(qOYAs.1WV3
%qSjAh%CD:kNdd.#6UP,%'<Q;Pd6_o(W0.2d.lHU2IWR7HEuQ.(BkW-NiD<Fb@Ge9j1/Mn]*cOUKg$c=6Y?*`;dmYT_,he7&kg@qb
%i=5BNXCJMhTd,$$NAIP6WSU[NM<i4ao:GV:)qPSMWDo)."#-\Mbn*nHH46809`*6CCFco3J&sn=jfY9jJ%oh_OCqCl-kj'G!DV@h
%g;R:XR[UL9(og<//a1e]V%]E^)8j29N!'$=c9hH)\oF^G<hjpJ-_/dMR<!G+erG^*@?"Hq9%)eOBZu^N)%Y6UB7?n0gMZahX[B2'
%hT!6E(tL`cb9]EXB-l0iLMf`gr.sEd[X.>4CU^b.4_kRD;m&#_kDdQ\1p7^VC+NP6X^0E\rrl]"gSLtm>kf-n*%$SOgt%6;!p^fO
%`$$KP/mV!#p2<*'Rs`#k#)dL%I7gbeSVMB@Nbqfi@<Bl1@D%MLnZJX*F:)uc2p(T2gDPP%<@bQK-+%>B98t)SJgtMA2Hi>#%Fi+/
%2lT6VS&FL[g[$7ol\oIVLU]E`l;eUUf8V3F-S<27/6/pCX!kG?H^*FEG3o@@mU^^=?nS!FDg&gH(V/#e]8[9+Ye'ki>;,hoXXCZS
%oA/(?F+#^4DS=HGo@ENNB5@Cj3aSYmqsgSrs/p]OSDW%7rquRJSR2.j8>dO^bbW^G04nTofA>39ru(cfC!t#-euNX.?9Do[gZ,C1
%FA[`.F0FNRN4Y@%(2WMujtEujrTrUo[j?:(YX!+c^Qc06i7iC#RkrmnVtbG-)]ugJXl8"I^!4-lbU0u)SAE#`BAJ3DkO<6N$,/QW
%Bsnd4fgkPo+h!h"gmYk/1Z?lZ4m]nNYI'?lnLZ?C/n>Gng@/Q?Vb`6HT_/cO^;dW4RpS(f/`I-[IX-+^\3+QS>K4[8[5iC^C/E-H
%IsU\7H1*RC2p[MlRH!6n2k)OGSj"uPX"+G.j)==qib%VP!VB^r[!D@Qm6fi[iV?a;A_6iR<$Q^X0Kea<Ecs?hBb\##?)-oI_j^;\
%6pLVFF2%ICouqD^<%a^$Q$;\Vc1FVGos2$2XS)e.iucuggqq\+EXNsq]k:a>dg%ItcKktfHMNeUfH&m'!7cdiT)jC@;2o5>E/XEc
%iKNZHBYf:f-MQfhWG?t<bNN0@GOH'KLZPH*\]rZ-McR3P\bPlD\Zg)HA95KTp>K'?U[odU[8qbKm+]-E0#gc9YkuL[3-'r\jnYrq
%fimF1>C9]2hKPKVV3?;gan)q%c.sE=fsdk*Z+RVGgiL[Eh9sWAX&gr\VO'5&/Kq)mJ$G;&HM";1Y?[=^@1H03\</3CmAFFbrHU-l
%Ci/Y,e`t?LAP:N:kcam7Zb*s-I_NRBVEO3V?bW!mL]..^S6PMiI4/ou[hiG^>kM7MbZ4&@1EffRk@V/&g=DUo]MBq(1Tt-#gcLM^
%;)`p6SD,mG\$C<qAbfJXi@O;tA7c23.j*#&DKg<"Iq.T#rZl+TR@[^4=44G5Z__<WcbH@+Kf9c$D_%GT5CLqqQ-RG[>C-'Y-G?e\
%p07CPReMo2STbm=8EjFXK^WN2M[`bbl+C/u/jF,)?+B[W$8QmQ5!:_%Be;LFW3DV;?n@qHk6+?Gr0)OJV-m_+gIa+_XaWeoD&tR_
%%puJPd`\h+Ep6(AT23lc+#gs31M842l.(^7PI+@PGa6k7,"S30SHil8qq=Wro8d7SSO^#Ydm?99V;5drB%eb=cdQ[5e">+T-$g=W
%rFGne88i=WfM=^pH#f$r<nE\e\[@3HFT02EBmOj7ocRO&q"?9;I'39"]tN<n9tsrtB%&j@ghD*'l1.aK@,BR3^H0P=dRW'(<r05t
%p3$5-qfO7a[de#erVlH2,u4(%m;%j`r2TTJrT2[\PWh/h4A(st2BSa@b8WP-bD+nG?d3B4e$ZT-hpRM_bZ=REl-6\ZkE5:^-GAej
%B4dXDh3n)om/5)ejkJBCbPA'ibY!6MbD`mqYKrU4D@NJ2Z+mHTQuVj9(2)4Ml5sXs(Au3/cW]eOc/^MgO(O9A?Wo8?T=1dV4!1*`
%cg7!BXdR)lX8:'+cH5V#3t2DjR'"ZXS0"M&B?k6Gp%eHm0iN?,"4UqPT4XMsmP[hh=a9>Xc5a55bg'Eg05$V$B5_B`Nh#:=](sXB
%[HGfr=h!P&B-2V+5G*@Iq"=T%@IM27m.2I(34neElH/D/a&gjYn^f-=ZgVLm(1odVc'_`7^i.I%(ItmdYK"bh0[4G40Rl+;T$L_*
%R+Zt8ra=\^ro1cbkH2o4gA9!r&+&rSg&pg(l*gm:0:V22q1??Mi457]H*FpY`dVn%W;YenS'9U;K9*&\#7pa?faeV=G@+Z?\GFYA
%5%o,J13;^QmLtt"DZ9%[cJ3GaiT$HBkL\me:3LpNn_X2`>Y[@FRbPE$FZHr.o#]>8OiTYSHT0E!486:3okgl0[GoDY4oKCTf/t_:
%k0mo!RU<QS^REKmf:);sQs$%g44$495HA<2@@I!DkN(b&mb=f=r:0][-hHe6D4SrK>/crF#j`)notm3BI!9/dc,+l*c-!mqYkiOZ
%3r,"C=F[aXE?Y(^@4c<a+-dWP5&NJgGZ.a]/q!(nmOk"kn!4c)456Y@SZ?C!;&_-(4@q2<cFp]FNp!Jq55FJe(,q0;D\mU`7kPk7
%O6.6CIe69kjVQ14`G/.h(-B'n1J8+dTX;(p?TqR)4$+BS:Hu<E93^9\mA5HZ<I*irMu9'@09,VIV96e4::'SplIld3$K%-kB')>%
%5'/t'^--l?gq%h,gjBYqHo9gN+22LnT-'Y)rJqJm.\AmelnhI%/2&S\Hs/G``p*'jo9lrH_ADTeH1+V(])617D/7gsC!SA\h/tNs
%SXDhGdl^erS]s;QMVEK=*j7Ca4PFTf/!'BsmFb"u4rp#O8mffe8%#\(2_-]Wj/\H1\W,\cZ*og$amOS(ZgtDJhH2eC5FO*05/,]U
%\]PmuY&l>RCRO;>LY[nFIoafV]56I`R?o:ZD_`\%Nuqp1Q`m#oW\<YfeX769j40F4_m<@P4DV._]?`^Fm]UcWeb?7SHsQu"Zrb!_
%Hp6!p(UK/[oC_I8p=/eog5F7mXEJV]Gb^hC12X-''C0_oM`WVPY4!sEl;*G+0(j'ggXTXiKV>%&q1`4*IW/c?IB-lfj2o0DZ-h4*
%)DC]Sh\g>SB"!Y=E$UB\40o=W;W4Ql3nD^q1N.bgD'"Mg$hKSVi0jC`kJFW=hX##3NO@K^03_3nMg=X-]B'prmDB/L.sUf]D7.Un
%D0u*D@E8)uL`(OiT:`GsYO4'sV3MG5rq>QLE#q3e4`t$.bB'SK><R"e&!'JVZg)#Mq<#A[(Cr`6Npr@W76KP;5/2Iq:,\%];/S64
%MKTjJS)+$%mc3KVS*nIIc>qf\XRE]bQd<BlZhr&WcNmhuGe*X6VY=iso!.p8GQ<oq5(9m4Yk%54g0/JC%I39Df%RaoZFO!rISt]1
%efVQ+2V,#.<cPfL=D4l[(I%5fQf#GX=RZ%=S&a7BXSqosrbLWc_.@?XZ1!-HHMm1.rKel^:Z(9+Ccj7%4k]E[92A;Y*kZmKHsrK`
%O1&B'2P(W.5&KZ"I(6k0qL05`@&$k=c9GT;a^73efP>n]]&2:'Gj6(e'qVk&^@uGdIr"^[<gX9@NY^g+ccWYrAiBV`doFuk5?+qX
%j`_No2]$DXZX4OHbM9tpX04PP<O\9@g!j39cag12>dIF6L2$4H]n^2`C[>luO#igJq=CqpPJVs]h/YgJn$NNVp+r,RV`0sq6M&Cg
%dH9`l7V+C=5$Zfhr@sl!X?<St.k\L1g+KP3?@'T(i9GITCqnHU9!9g0fs4]7cWf-sHT9:$Vn(7Df!jb;eoT)_R=AO&BO*cNHb$]W
%]_8RUZ2Nn]ji2IeC$FsWlOTiip/c15ojXn9m(M$WAsZjE*FF8AEHr15]Nj7ld!kfOrTBB2i*CW$4=ctn7CVr-kK0]S:WDfB/S#sk
%>b6?<]"=c9:NeZH\btmcl\_tE27K16>8A$AHWb"Q_ql>ZG&OSXpg[_sZWg\l07;?0r=:^?8,M1%Y8.V,97QYCqru/h_.i(Rk>hB-
%H2!S.Cs9QGpD2q"RTJ[qcI1\2l@F-ReGLd+:YaKuLUFhI090(cq:A,@X+t=XTD+\@a6B"QbK'&@e&TK6CQ&)1(S10(f+1M%Z`eEl
%?EUtjJ+W*XldkV&eVX8#M12aW\ZpL%5/6pdbu3uNJna(P0@!q>H10&']P3pTCqb%`J,9"bIsH&4mD[Unl.tos#NB%Je*F>aT0=+[
%qm9]jJ%p0;oCW"OUUA,=g?-i/#Q;=6nA@ojiq%rrkHg//92A1EO86?/qi;iFRN%mIT/-!lc):6J[BiZ4?QJN]C)g<oB?PL25OYN-
%T7=#"LTaK0Y?u4>DD1;7[.O'4q9+r/h>NM?lW7FWJ*<-p#MWl5rMRt:hY?Q3*?=n2m=SJQl\>]MB.)f)K<s.HZbqs<f/\Cr8k3as
%6`KTrgFkXL0#!WYQ*aT&G4K&jY[2!dE:Dq:/u[pa&'rM`hb*)/Dr,Z`YKic.(T(VY?gJlZT3bd1)sL#e<IOi:@'t/u=hSRX.b;Y:
%oua>eCEG&!]cAq'^H)UrmB9#%QYTrt(Y_`g]_Q=<lD0LV=7*1c^\W3HQ!8[geUuT"gY,-ag#Ji2mB]Z;;.!Gt(@%@sqT!nr<I</=
%,Vkq1Ms'5l`oYmnj//O;cSc;o:;8V)bNTfsbr>C?LAgMa[Qi55S!frB/G&,%Fo"pN[?p%$^&PPR3Pj<l[KS/Fm4B'_$@Wt7`FXSm
%=P7:Bn6<S+&q/:S]8c9EqSd/1\A5ocC(L0q2>tg3d[Gg-&)5WLQU6Fd<pEaAK@e(#0HtI4.%]9tgNQr`W!`6a0SF1g(gQE:+>,t/
%U>PCO$-l9q_;C*9Z#b84'fR)d*d.C,fl,]4%tpeq2HBR"Q0LBD%,+"iD[!,cAWW&m_c/_]i1oi0eDHTY4k97G5?!"oKq#G;rR=j[
%HhhOVODg;48]'3,9^6bi#);#Pmaj8aO%)(YX?tN.4Va23p^&O)#JKUWoi.d5rDGBLGa*f:_ZB%Q9rc[XJP&5.6Bt#hWp4Z?+';\2
%2k/>iM(>jcGaejfGe7:TN-I/rcRe73D<\p;)s>V#.d^3EIYB^UA8YdK[3%)CWE!XBM<(Y,cHCl.[P``uB^Fap?up)d4rUoaB]XP,
%jYsV2DH1G"N')bNF7G-GgP.o]07rR>U4!t,R--!mX2M%u%O:8jVQT>`*-n$$ECiAqOOcKkV5!*4BE2,5YjV0m@^XkE7_M[1Cc,rn
%!VhEl@i[+O]T%e(]c@c=9pV0ZhrJP9b!<YmFTZJ(,s^W8?Zp3tFh^gSSIF8`X]s!KJ`#i1MiljK"7e40+)r$D.uB:tB:sF*NI'b!
%-1uH,)H(Q<%$Q('j*Oq.%hY[C$`Ab0!n\]HY__C1<We%I+me7'>jBSS$ErhVp1-XeV(kd/)tid+I!<M\<54'#i]-XZjq,cAaS43L
%hp,i0ZhjI`VAs9amWoPMT"/.c_Bb6``]2m7,nShS*l5TY[7&oD_<5&])OD'5#,R[Q8Yk[996&Ot7K6V^C^b//.W[+l$A3EbmmcX.
%E&b6=QEh$4M!N%Q<\;oRjRQ0+jK#unEJiN'6_4\?ob&\:INH%:WRi."E@c%ad6:SPfM_%dhDfZ-GoQ)FZ=f.N.=4"&LtSdeP]S1#
%3pplAkD!!AW]cNhK\=h*/\7.Sgb+4*:cY^IQ#"AKk/T?"2aHOOkC0khC7P*j*WJV@)K`HfhMA58(S8693&7gX8$n<tmt>DiV"`#J
%P3j,@ck7gcCZQ%RC&"4kF$=\*DtJ=98q--BrftWE0RKkf:8ZP)L46-pC2__-;L!gs4I[@<]\pm2*peL5<WNW7IDu$PB.3YKF(tLD
%GU3TUf)IuO+uhQWDT?2pQ%+B8F?:#9>FV>Bg/9#E7CHB"pS<L")'ik])SNl^gZIu035kNofI_+h7!pGU0(8;Ihni%NL79r7)rB3Q
%h)YAurt_RkI_4`;S[K<bG24/VGj3sdMHc]>CYh/?'UlcH*u)SGT&Ql#FFE*%^]4/F0!6GR]]EJ:`0Ume<u')i&iI<9:r@d7!BW"9
%]aNTh^/L$;DoB(+Yio0>emM!/If6#(Y',Ke!%/dmqTWDbmC?RW=+aQOK!>6J<7+RhLhge\oa2I>JkEhV6jCLfIBE+#(7a?=5$2C`
%[5D7CC"r=L+J\&4oaUO\g\+]qR6t#@AHF.tq%+VJJ.Hm@:%iXN:WqCFA`&/hJ6)O$?_#*F'5`_9U=-7<ddFItm2,<EmkfsUYK$EC
%j)&dc=5(F#kA'qI4Y_BPT?!KD?k*'8Y'?j>s1V]3qAR,*<KsWsM"-&Rnn[V3542EmY?@^\eYc/WE@LSS%;EI-WPD?pAMhGK_(F.l
%\n8OVR6j'5S&.S,QgloYeaPb$f/65@5P.X#8fH6Tl'N@EeXY-HTg<n]R&Kdh:gMC,#!bo;b@ieb$mVP5">V`eY1We1_8jJp-0T.1
%):N2rShVd2W+@N<qO5dM7$-MAClL_-c\m3'On![&e&jWk20?^o*'(2+T,HEVA7/Zqf?=Me)nN76eBl9]\cOn#"DJ'm4C1W$qs#%p
%Np(%JN>h("2f*.g&gVQ&Z4,8"OQ-M]/&iAheh%*jYS@9R)<!$+j2s7>qAEY1cB8WZ_&u,<FY^+i!D%.0^,FoPTIqAmUm1WU0eAYV
%7`L\a=rGRaIC5"_-a>GDENGC=\/@XlZmEEj&DU;/=4,\T'dLNF=>[5LKaVu&9`d<mgJP'YKRIu)*&278gD18HLc9E#>b.'ue@[gt
%DE':iN2Zgkl"W21nC:cO'%KV'!Aj)CM%&=D0]Ban!c?Rj![3j:A1LhtB#]!o?Q.>AoSd?2nsS.Wn3"[e8:$,ri<dKbYX_)o_m:'k
%+k,]*f2Puc*9>eQDog6)-/LnK*J/qn6#(nWN2&1))I=\W*fjuZ^kj7GHlC:ac\)oAbE;At<(Vne\?nL;"NjXcSO)b^@u13e'lmW2
%C9A1M_kVr].+/+D---f.U`4&T)to`t!hC?H#h4!^P43_@->4<8,q2H75ls.P[>6L:Z@r?oScfpkdS*!Tg!phHJQ)nmL^!o<1cu'W
%n3V`^BO9XIShr^HBn68IWY<=kiP)"M)`I-soedF.kcU_Hj/M"!Z^j:A(@'!IWXF_B&]cS@(4g;['"^X<6P/KROKQ<PTt1bi]B3?H
%O\'o;M'NV+`7KM!d0#'o/3'%uTHsk#\.:G4<C*+M!u%0$Ml&<<CBObeoGD<d9@Ek`8rd_F%1!4J"Tmna:kCtb&dXd/>FG>J%7/!j
%B)oQ&mSH8Hm^it@W.?Vn%eU=%@R@K/!GLc&>[ED?.5Wu+_Q(lCGm13IQcLg2"Yjka!-VPt'F6'/`J/`a5VqHI64=m297e^^_1Y1B
%NcBXNOZ_4T3pIN5JcqGnWH$ipMc"Fe7_qLC^d&TZS,mr)4<=crmRipuW(6si47TrcS+J<6+)&7QTqqbl=rP*TJT5Otm1D>V%-.\f
%l(3OO@d--]Bo`\V'Xdt89`]ZF])p#t#Y!=!A]sL\#.'[,P3XC0p&M_8i;\=8_ZGBZ@)G6GFc5t6dY)DpSd?G)6o5l8i.$g^B@)[<
%rED>fcV&/3e0`'8\5Wis>[qN,r**A.GmY<8%00KnNJK]N8d],EoXof3irH&Ecs9R.e3Gub28GgIbg&`lOBXP,9hV%?FM_A%*Vhq"
%/`8`K=:)c@kmX]am]_.0n&8,O"2!NG#IAir#+b\H%FS,&b2';TBG7$c'\@]geDM:B_3a?![cCY^<BX)d1&257=U8Pn0!NAW8FDUP
%.Fqrtd)4g-_@5dh7kU=iNh`8Y-$^'oQ*)R7btcgi$Ra?[^Fh9o#@6_(*-<KMJ0h4]`k.-=Y[N:qY0MYSEIdXskX\1L9_Q?5U#F+7
%a>5*_;6:gL:uG3HRhdaeW#+4;Y>^k;m"0sIMW+qmik[6;"N>.3SUnU_`Hrf9>%"Uu,7PDg"BiBYL,97?fut`<p.eXL*0Yo`/e(Dn
%fVldo3?[CW'*7IeRMP-J%8!3S(b(&[hbhtO*&XZRBN<k[Z%fV;2DI)41/d[R,$PaV;r*UL/6^f:M,4b2f7L>HE%O:lM6ek0R$aJL
%@aW%t/mBfJCPRn@9+ltKgU]PRVZD9n5V1Z2nQ&1'+,E"KS0WJ?nMYb#,%i&j9sCM1ZsmL=_u^Y6*u0qZSlYuQD)tjCOCC8<!GUIB
%"HmrXaa7uX`>Je"J]e9S*!jF3)/AIQE?jg'c2n30%TX$S,iCK!7K+XK8Jl1\SWA8"R[RXB^bTiOB.SX0FC>sJhpD2V^ol@c]<O>g
%CY187X.r$0G6P@-_,*t6^q48^\<[7(P?8H_T?s!V\o'4f!ngG7"&QcFBTYXe67b9Hc*e)8,n76jT+J/5`H9!M%BONs2WS3N%1pZ*
%Tm-$We2U-P0!4(LW()<i\h78qgU0"O@@=uEnSliQ&A/gP?1H!iED1*;$=W2[+b8*.gLI#G.!Q]YYr$RZ$f)G-MC!oPU1=N72%XLi
%a(?[6"(&H8'V"S'Uk:N7SeT?tFL&`^67Ad^",.ZG#&H&#`B3#97ak7fj.,-J?tq."!HbHnRhj-tl:j6;"LiGXiUUI!hXln9@,?LQ
%S#Wb4#PKP<$sEf1VZuD^IDU6o:-q-8X;[9+ga+;]#=gNEO.'joHl+kA`I`Ns3&ZuC114Jm=^Y+t_<.INrI^N_!i=(;'a$H5BlAM7
%5V57[(JrWd=ab6o],Xf@KG1A+RoBHDLNHt/iZL/>Y`bH1S5%a:JL]EOGr.WH>so:KEXtWOkQ'Vmg\,mrA/1o](*hVu?]$1^FTh_H
%Zs4RHeJN%Q_MLPbA2?@KAC4uj87R2QONC*7oeRG<$l$.(&n:tD*SJ^N+AN45*'#Mhhj3QM/fuPj;Kp&GQE=]O1-)/n)QX>I"ObG@
%%?O1dB;jra?5'o7I,PtPnOu&?&-NcAY+d*#(9i\#jmjt2dkL#\`\`2ce!;+bGcE9U=oqtpNEB.^9#E\F0]3h7-d`/';olP1/kI0>
%bU>?,d7<lDmJ6.8._8t4OWMRH3[?Qel3:r_"f4J7a,%9>A9/m/Q#%Wu@4F6G@\_%[F6jQF*]B#YWe4t@<!.!!@ZXti$![RT"fHo;
%2JVoJ$oo9(j9q12Wu+;[4U!Q#etAGBl>".D,,7(,3?>UrMUh)J'YG:!:`*!((e"3.5]SU+=(BCG?3!)\;MSX"=d$U36eld+YD66Y
%7/d)=L/t?((Q8u+A"Xtr3s+uHBK44$SrH>V6"!&NcBF#A*5$798b'5SdWp28>YpB;aUSN0Co%6"9Opu][R[[X-kD%>*6I"?pVTF3
%#)MMi''.cL7j+2C;$6)=*!B)>Qg+fl87ja%8e;9(`$#]VE.s(L\Bjl%U5LWU6%h:jV$NhPYLs]e=>="PP4Z5%RXlV\?0>-!lmSiM
%0hl/7(mI:_CFP>k6)lG;7kAGS+#HWfD,:E)0G$e>0i3DcAUS>SZ5j4:_'%?.)'?(9,P>orUY+V2ZA!j4K0cZ;1!!t06BGd#`INhd
%8G2#!8AH60`c[2aL?>c25QI^J<B.-NVq$<B\g7*YAkOUFJ>05?88BP`<mY3N_nLn.]i=t/mQ<+T=,bA+3G\o9=ragX'bjAOf/'6X
%+`,V:O@F$i+PSbijekIIO.iFBBeHcn.A,g%:]Q9'(V4&bYfA&`@J(*N41IkJ-)5!Q1a,drY&8;Ebgb:NJTdjPd%`A<0Z$@$qPY_.
%C-*\5!&Zp#qcZ=-jb@Gj(f=C;-t^qacF?88G]M?O"$O=BTc1m#O>J;aHQ@=$,826.#0?Wg7*]p+RI.BO*0qf3fOc*q7]7o7"_#85
%">X7a=s%-.)GGS+B-q=0(OZ@G!tPC>?&+!hM0`\=^a>HX!kZoij+-M#(NgnR:3gFM$HXD+`ZB?b&uga$Tn`&A>*#Sfmt$.e&OEuR
%8`@n"Q.21e'/H)^=Q3RQEZ<rV6>3UM?oVNPL0Q0Y_@rUGRjOX%@-%YjSe>d0ZNc4Q:&kU*at-aX0+U0IBgpe!huY_T8+m(T;O<b"
%o.AaY^5`$g;N84SZ=jZr1K(/78J_OUhhHgr5e?)t7U#(UoFC@u,#J>4HHc!uVtOZ(#bVs(KE.i^,Cotp!'g`7a5MDe=V<,5`7oiY
%E=BCASfn7XQYh%Hm0MP;BSjTl&-jH6#a%M%dIO*LMH'tcA3eBbo+]t^:$oL5<i:\perlQh=Q*FW3g:4:TT!%^T^Ts-o(6mT*\'2t
%O)8lcOcNNcTo%nlk3iJQ"!k7IJd3>5RECZr.L6#rL#Mam8FORsI^K4UKJ#rYMAU<2eX1Y(ksP]nL$1'A@-H:Pc9(8.T$&5iA%![q
%!b&ADlZ,HK%Y>_L0Vh?iQ19IZAjmAE3hqoY]Xs=1iZQ9PH,REPD2Pr@(ihJplQnn&i[Mm!.6C;/YSlT.#;*V.dpfp)Gg[it"eWfo
%Gq$#?+MjS+#uk$6lK]=Bm-A=GgE;X_0Ma9K.^mlhT&^R+Y(l6\P00^ha`4X-,=_HZrV<3+dq_j3[7O'nlJX!LB=Y9bMeeui)FAXs
%J)(n!CW]g+9FNtNUm3;n%[VLS]9^r._magI!<uFI]'"$[h_fO7[BToBq(.+qCskb__)-c0BcO@S^_9%B^P$Y*4Oe9PFYJSF+H,hm
%#4a=+#,IJ+G[[Sg#6W:H8nkgO.=;SbAlG$F;%HGb!!,U"1@\qfW[eq=$KtAEeH.h[U\.as#umB.M,g4Q7&gJa>!h6pLW).kJZKoS
%EWj1EA>jHYkT0<"Wb(*L-S%RC4<ack:92`r6#h9Ei#*LLd6*,:X-6,,os0l06,Jll'H1&Y-\[T.A0U'*VU-nr>#D_9&3,PJf[DW%
%jW.VZfX4Gq"%!9R;`_?.14U,Qb!?7fJhl^eVh\1T=R'Lp"#-pno_`&3Sa3dK7T`o/\J0s]6S[O.:d)t'UR,D@h61U=4L%_7dR@4;
%n4'A#"euiWA4)be-P!rNd*\/Y<ceL*ihg3l5Z^d$0!HL&pe(*omd$h$1?O&q2)!MT8Z`$%[%N/^#Si1>6"['">\o\G^*'Vb>RaDF
%QiugLYZt9t#\l1`<LFu#EE3'#;0eDHbuBr@3^X=4lD4n,>SN3ufYJIP6q\A*Xc()=F+A(1=9IY=T!k=&!sQVa6>BjDF#n3]n?;mj
%&]ioK;<_8AO;\>$%>q^<rGr8h_E&lnLVf(=E7Z@nHFWS1g@==ac6@7;&BRDo;$!Z]&k<%->'=$;MHGWnL(NR)76/'+,*!)P\qY?G
%Xc"2nK98u>d+3hj2FT\68rJDCnh^HpCX9kNQA5&<3iE:J)$dRNOT%&g;fiA^[Q%f*J8G==!h'fHQ7ZrXbN0_2NF]G.aN6hSg-Hr]
%QnkQ#JEcjh\g_Mk'S&m]8$k?dGlepj5[0]=%N=Og!p[XD@mGQX*,IIa)R_s0%9FJDjIh)1gDG2Kd_10PTDV7\_P*Yc'A+<.#Zl:3
%%N(bFKh>:T^L1a'M#flj:tZdI-k1"TR%Au`..K47Xe[TQeh-\*2OZ>2FREFuitaP!a+hS!KsOlOP[%FVc6$a.J2f;B%Tpl@,lhd\
%aC_jc`]QL;;`.M'kp,3VG$=rD__GHYNB)U!$#<uu@]"Z6<pJ>c4gQt2`"nA*Wou>_W<b>Od-ml]*dEJiR6L^b![lJ[R8Eu4P:;DN
%h3:1q#^-L;fW'J@`*mKkQ*JYr%h=,$:>DSt\/K"E&89fRKV/Y@2/Q#<$0ciT+YOC9\Iq8.17<j<+VePW\0;uFRL2mDQmG'%>Wkie
%5oM*',rhiFPB-3%,@&_p"rN9j!k]#fimbYSORf^,kmkEbEYP/6VQ.5VA[PQu:K_83A*a5hTV:/FqN;2)=YIfgEd@7UH'neE_-'l(
%8[W\#UpT=4hIfJ%9/U:sX3$W6Ni!52/.Ar>:'[HYX1;JF))Xd6!LnM8AjSBX#smapd8aU&k2rWf/413O3F&6]lZ^2i1<nbj2h8u,
%B2)igb:rIs"UT:t>Au,n\V>rHQR`.Y8,4s0/6s'\3asPOKFgs>Ne/+2N5AKB7Nci\'cA_lJf(20+D8XX8(gam8D.8!,(qG0`hCbW
%_CW&jD(PL9Mf;Z6/u:>-UT840(ujKC7EZft)O639dgYFN8!g)%qU92%bu2OhmMsMu%I`,qo=qJ$7A+d!%YU^SJO9c;@-#f/G_$oJ
%f&/s8LHG^)WF-IO!CsML+XPW-aHl>4+FXEu=H7L(4NtW%kcJi)(:`[4OcP8UpfrEWL$0(]FD)1;B#mP]J>1Q\#qbNeCb6MjnN<->
%j$728-"7ZEP(:[lGVi]\R'pBP;n\415Rh5b5YtaQK;".oj15ODNL[c/f4YXR@HiY+4&MM.BoPp<fVC5VnO!F'G!sbf7SFP')<gMs
%ZnaaHgLc(4JLUqK<L+^F3^410HG_R>ZjtA_!4Y(X\R;OkZO0pr@T:X;R9Bj/#KkPq7#6\r=0MlFlh4VPG4R9;?Ke>O=[Z[<LE%V.
%AjqO=a;&B?,K+9>JS8MTO275T4F'Nj0OeQJAao$%OXV8li$`U/@-UXONR^\:>DoT0p3/)Cas*ln&O9#HW4EWY&0M"lkeHB%J>iDe
%=$^XV+E1foBAk_TK[f]W_N_KmmF\fGYZ&ua_Ya`6P?+)`CQs0dd44=d'cLonRGtBCSpS@S1Y0,;"O:RS66'B&@L-1\PYkeSS/YT6
%B%r&2&]Bm'jC2+0Fu4nH=_S@Y:'B\\>_S<Z))1#@HQk#D&bLa:&LYj(%=biYNK6b8Xu&AnPQ"Zf/ZT4)&8A">>.SP^^^dtj>e#F6
%"j<-u+ODPE9o>OHmtp!Q5mNnO7Wn>rZ&Pg+*"CO%L5]bq=g(_`QqG1M4&_>,'F!;Ik.s01#sHHTqqS$r:WY'jRLD9jGA(QmI1G*L
%4l!lIILM+'U]_)L!PkJ=giD6$Up[:L?qCG'Aer(ekp,0UhB[XZ7$eCTm;QSEJ=7A<h%;%hctu;YdR47k&5=J'1tQ>W`/",@bbR>3
%6WFj,e:]Au0JRtucjhe\Z_6NB$@Mj&PBhGuP?JQ6Qp[O)PCi=u3GKrO0G3qVN#^"&>V*\G&17pXkoBun\kKQ%#-:=V,GVK]a"!/f
%\n?_A>B1IUDE;cH+O,T'L\+F5GOL`Jfg&i.>+-A+eJnu\WML1<cN?Zh"Lc/nLi#,obNGmD!#k42@X3SK![5cgHUhWT%MggeZB^.:
%:2'Q.Sts,T7<j+K2`*Z#@RL5>L93AQ_)`*[33!V2_eMU-BSJKL\k,4_hMX#\!"79'a0BH7,X,t%[#ifn#k9<P83kYhV1i]c)NtHT
%6c@lr:$=fdo'']pC[#R:PhW!a%`W-A6]Yh(*:F0\4^"-7@-\G.1qHA']1>**@CM:n#nO[\`sL5R=G1+(2^]k8(-DUPE<WX+al2F)
%BV@b`96^mTFqgt;NB.-E3;b`:%kh`>!BM$<\l`VlBob\iNpI#5(lf*GP$0n1`/Oj*=4J<8M7B0lb;)QVl5XQ8W=i%R12,d@V9>#m
%A4jkf"e^OB,ND<b[thhK)tD[l)@HW!AcjXPH;k"*?oD'(J[VK)\YRH#o)Z^"*dZ*;;^rW+n1Z]]0[N:M&g9;W3Ml"`lDS]IcG1fq
%R"fj@"OF#fEN+TR-PaO.0H]Tsd#kY[7ZE943(b<Wm0LTp!4jKi+k6O2p*%@1,t*LR0PnOc;n8iTE,4FbdYN$OI,*L'a&/dQ+E4o^
%:DfP"J?3&cgQKg3(N$PE'q=1gQ7!9O9M8j^U=G=E^S[G3OU(X?\"Ak/M1qHbSW[*&iAhKD(h't45m>I6':G_4+fhL1W,iBXY@On!
%=>2BRMjTkl7u4$3!gK)a=Lk),"<80^S*>q`+U1,!Je3)t-sJ:B';#9a5VJ^p*]5`I6]rLTX,[aq%i#3lIGBqd:V?][+1J,hV^V*A
%F@74o;>_fG8?kRYiI!1n2XDsr>fH;"#Ql6e&jg$eWIBlP7@=u#p1S]oFhAb>pM@cdhe9#cOp-9-DrG/r-eiR"ktsjkZ'7mhj0OEr
%.<#H",7QpXNC]#K=Bm=fU&aF,)Te8V0/0t?,"'orlH)C%$4ecKf&mN;9FSaFs73_<?VuD!_o@DnEeS7f@"pN.-.!gP#_mlh@Yc1<
%<O!+Z2$h]7qoeU6%V=q2I`F]p*%05U<L,80b]Tk#7lA3U!)'igY\71$[HcI$s.lENc]Z?]5!1&p)ncCqCS_mkYW<,.7+UPN`)Zbh
%kK7`HS<@DB@KN!R2qTUFB`\^*ZJ<pXo;\Af'dbP;-o*MlS4[;&W?]iW%u!Ei[(2,S%dDZ"59LVoXHeNm)P'q>Gj3ZI`lgYU71RlM
%R.:82%kGT5dp_XJc%8]tKbgWs\qEHij'6gArnt:'(B=fB/iTS$8,@a@g%;KcVTn>()2s)R+XmJg0"!EN7WMtUjBN6jEAU?eRTP\;
%.9]]u/?Q@U['eq7/OYi!6p<jmJ+19JcUVGt7:<A@50l]!0j5UmA0m/J`u,a""0WdANtrOd#qS<M$lML>fFl-D2`aAE=7UHiPE)?B
%mhDHra!*,XHT@NE7`L8#%s"I'#rH)Dck0m>$m@u-TKLKUK`QmX]CaSqjMuC)>lA$*DC@5*,q>:^d'u'jTn&KK6#8#XFf5Z"P_C#h
%[="mY65\JodjSTI#^k^LF#gICU6YS-FK;Qk1AVG450']QGiNh$%cuA(Q3K%(dl3S0o`;>W_][=AU(bmgTZi9%BhfXM*13\Pd'd`1
%JLC\j/Mfr+bGfSXW(J..(nNQ+4l'!JI5p!'mW;-JEJ0(mj5Efe#P^#'j>tGpdO65q%i/[S*i4B:XV!nG*':)]/X8T*Q+Nl$plpNb
%9mD?m8Bm9XKc>7H@[_k>?6b%/%XSJ_'/:btaUo'uHSHB>g=AWIX_Y3eGjVN+N=V!]D)?eu;S8.6OIM&l,`XI0gfDVZU2I>eKTJW+
%Pb3$\aW`*-jakYn7=>fm:JV>]14pHs@XSBURk.]=K[1kN#([d_aZ[;/6C5eQ?.\0!,]pGX8_GUaQ3WkEbEpQ=R_#[*QGg7O:n<]j
%.O(+W)A0n56]f.+0W_W[X\;gheRd;BTscBh3oP#lq*u!'qdjg<Jgp"oj;a2mJ\osfnf3#k,+c"J+m]_[-"YTMP#lrP6ti(ljcWAl
%d,5moLdn/oS1rURWK&,ioK]nf_N[<@f5DW![Lj152nG[(Eoe$"GdX(o06.+:?^l[5MAfYbk"b.F4M_RjCnmtiR_3kImmXY[;DGtG
%BaF!qY@`q6a5I5lZD6C#Mehfg13k+?)W)0T>7k2L`*6rt<%qBOnWbRNhTnc)VaB8<KNEu>I"@sM4fiq7A4KR))hQ\?OK.:Q.>/NT
%8FM7'L(>f6:bFo#pP:?!:bII@=@X6U"UQ]YikS*._Qg6UZ=0"ts8)GpCBU^s'sKnL@!NA=Y)F].f"%48B^38**f+Z'*GktuIAUHk
%(+5=W@QpLLJ:&o=&$1G*'Th`MUISg>-s=*#]qW49JGE.A34MPfs*tl<V2"_3i?:d:U03MhN>!sNU1]CeB+%KNp!O#0ZnQm+7PuuE
%=\LV:fUGP&J"uc*YuA;epO!7aOD.OqeSlfQg8UH2KHWI(.Ko),Cqdjn,i>;.Qgh6a5aG;%%Y_7YW<NGl)AKNS,'\2X9NtL5Grh@l
%p^EdL`Y1OoJk8bNXNYY9lum>GLO`L$#0T8L6+3V%!b:'DWN;&k4p.j&*#:RE>mXUs4\DPDO3TJY5TOW8n7b"SbYJ>1@3Pc3IiJkA
%<u<WhLWD2]B4I&e[_aBqCj%Z4Bf;co!dn6Wkl:WOVgi%jJW:.b,5`jXTYM7Fq=I'$1*al:,?$#KVcjA5cmq#qAYhm?&40/_I4#8+
%\/8Bl+F8e;N4Ma^0S9ZIs#V^j19":[T1BYS5JehQjFf?75.i#E8%Rg(eQIKr[i8TCOB[D;4gBc[^`AVVI7SA+%Fh5t5iKk])a6kf
%L4rCu#a-X'+h"JHGOWm9cXh0h@^DH[,_(M]M`3g/;ELM<g*7s2^F3[2*#LicKB;)>hogs]#td(DFMjY>2%8CG&]A7mP2dM>mKt9j
%*4+]gC,YTChK1/bIr)iCL`bE=I]pnEdUaf)$&Mf=/X_lgQu2F>IC+t8;]9oZ/_0UBK;eQ]s*$LK9N600GS*)6?t3&s/_=lRi!\8'
%g:(3BBcbkHg%\N2`gcH=#S/#_Z*Ai6Pg(be"s>FIClX*H.9^>QjJ1235G4bVBfP0oV*Ds3^J]H=qhaP=\o?!H/6O4d\P-$1`.E#j
%2A.0\UprIVFa+Rji(&96e6RZ^DdZ[QQH8AE*>`h@*G3p-%aVO#@UXium;@k;d1(6NO%Y$uO2jRs*:UeeDQGoBLoTgMFRH#7;+$rE
%U%/M9h@,>)G6eD"D)0I\4<6@"6p[P7[tJ-.9#AsB=ZXT_D3o'"M'PQuD1']dGWqqI!!3*bICt800%14M4tOMBnV6;IJQOYq(_S4-
%lNl`"cX<4eWD$BB]SmCZ1nm1cWY7*@Y"&ZdN2;5J:g"lYe")PEj.2+;QuRPeS,dJ+VC*gS!o*u[-p;F`AB!O@<WE+V4=RXFJeBk:
%\eP5U-==!)hSQQ`g.';mEH/X$=UIGjZBl<o/Nu7lPMoqqY22g>4p(`W.)!l$'[hu-*^=n/-.eLrLk$=KBD"f5,M(_5K<3eJa.ENQ
%/P.$b=Q7#U!kh)a]T#A"#gc.snh"pobhreR6APi0WBX$(K?HQ_Kdf-q&!-.Af%@.DaLpQUnT?BsU\q-'n.J9$"GHqO\L?913CA7G
%'7jOXl7#oKZke3+4:DXNcR$2KL3tc$TM&])7^r8&7%R$?Dug/,]1U]I>7q`3\kUjTF'+XT2q9&H4M%[C:?(,iq!C/&`Mg6+9FI%0
%S<%[[ENTS'&=[q[NF^BZJt@Kk!('21>T&3??bGf6#Uq>dl7r3/!0\-4(A_78]UrptkcuSiB1b,srNJK'UM;C,@HPJ*&9X9;(6jZN
%9+2h9T".fqKb+kcbaVNT&0Y^RP[q5Y&pt18=N&#*^!?Z(hOElcE@"h@?Vpd<nH502I5<E.LRcot2!.a?C6AYjpZ8H\IC^q,,-O<F
%=W&sA27alRhlUb%AS^P1KI'MF!P^reZH]rD>''U(ncTt,risZ+,Q\^<*,A9;6Gq^h7u8N9?OI-1nlU`iho&;RnMe[,_1bG^e\i1`
%]*Vo+E?_Na=TF`j(0`'A2s!VZidG,P;-G][@$JGpe%`Q@;@Cu(:mi0c>au5"<XmE=fM\`!D:K>e+g8kAG('et'eHgA!eUABF6N=8
%ia/)6rW@+-_9XdC5<]^!,-5BJF3gKW78$mcj0:2Ss)N%'C;b<d"+e7@Rg#bH7]t$iUS.2'Lm0PT6s9e`K9j$P:/M,0fX0:o!_gYG
%l"Y:&M'^-9`.Z1NSLUM]3Y0YJSD=5t2+J`n^Ga[!:L2#).Ed"rke?NReU$1\8)sDsZC%1uQnnM1!7)KM/G&;A^UT!k\o/!Z`dY?Y
%[,TssS\X4']qHTLl-bQkn,cDjM+^_nNYRl2\h_qE-P[R*nV#u$Wqs,+<@NIA<q`VnKJbV`P'%6.lXs3'6F+S170p$b[dRSgnB`5g
%OPTLhK'];(RIgPSBG(rSE!uA`=61PH],BY^OPlNZe[`=27r-2?o'76snui=Vr"rU_'X"n6hM)AUOLN`=^db-X[1NIaOuuOOrNhG<
%BH\lQi_/hq>@tN`EK,SU=9g3BlGMA.3LDM/$3&kcJ0b[],*gemM/5OGH?u3nVGMfBY/:T"6Y-$3gXmUWgdW]:'S<(-lFuCAT>o0S
%SJJZ8D/NmpP!_[:`(b+Kd[7&.T*-#,7_(L#Q(k5jJ&u+r(p;[OG1o'RQ+Pu!+sf9Er6c27S>ZD[a(b$7R\Vou"gW$6b30[>U9e/W
%9oW!1gjF,#e;2:EB8,>(Xo.)n!Bahs%]<tu#1<rM_F<]^>lH63s"Z`q):-*qfG.LG2HAUA?Lmb=ckf*)?!Y<m%K?QFl=G8N>%UX_
%!&5_cMa^#I5^?<\UW>_;<XmQXI1/bu)Gqq]VtUl>f`Uc3FDtZ?^E]f>N>&;k4f<':<!^=8/CO?X>b:&^9qOI6h3pS+:N_O)3=pn4
%g>N=^l1[Y4hR'0?7+W8UoZ<,rK=u[I:UM2^&=grKfA,4&k7qR1:.Kkpr"GX,RBou:@>nK_eK5!g0?ZVkdD-;<")I1BS+'5SJ55F=
%d,A*BH=XK13Tegg>Ckog&1nH]MY:IUG)agR5Cl&\Ms>psOY,kE7=<B#3a`M/UG=(jeSMl27BBtA]sT9>QSom::L0ZCqQKq^4&bWu
%IM7aifcd;-"m<PrQ^l74&J.*'"$]o13nL>$Hut^&d)[6SB>D_[M9o_8XBB+-8hKhB$KT=?joX",`P(*np#D!Jo<]$+Nh!Rs/EH`Y
%d3AsK][TMlB9]7&G2DM$e'MPNO5,bI(3cPbh'LSmS(@Zd@5XA_@SC)7Ln<_eeY@C6X9lda6!Go#iWnRiK9n\%#_(Zu:VC^+!Vqeu
%cLnS::Y-@eB=)hp7+&gB1*X49YV7'J(l?_<"ndhf+[@[G_/jiMn2Xpf[C&#PR%KTB[fQ5$:MS:-^VS^pATuKPobjS7A7JKl%$]je
%lFe49.u9L$..u^6g_i_Wq9t`He1o`92&cNtnhtgGf!Rs6OH4/O5#h@Z5$dg?Up<mIX2gn\qN_j,h#1!#U,cD&Z97j!GN[kmk2'Y"
%^afc<UN1/$/EP._8#OCAibCb^lL6fk0dYjR9D5[5oa*i_opoXEk\@EV@qcYs0sMBQDZLYPQ0H+F0!uN2X6ZS7in(I;8/\@H4`Rr5
%iT$[[r7d)$Hn,8QpBOZ6,+)t\^D%][$'0#f]@V5r<pjt.)M<)Z5?T%3nP>Yq?IqK;b(k^qSZ;'h+oJpX!N0#Y,%-t^/M[K2HUWc[
%9.f^s@-P1+c;c)W;NQ"9_),&UWQ>2,@$6KeeulFH1*h.BZkPtCf4sK_)2'X4mRo_O/TH;KLlOF*g#<,D>*bDc5kKIBZ$^0X5p`nI
%QsNX2D"k7M,S*F`6Wc)>Nq44*KID"L?GOZ3Xnu"eNZDiiKAJnDC>l(>pn?Q?5SeG6d#KX"94hK%d)*l[JjTbL;rH+d0YT>.,@0D'
%#hT60#TG]W`9W\C!u,-M1Zku:/X[@6\GN_rqhY)YBo`=n25rY%1,RgNWg>k6?FaCn.HN(MdF@9cW3."X%df:aLhKQTDPupG7R].H
%W.p43iLg75M5>7jV-#DVpnX<%-74R_=q\4u)iT<EIV?n[`&S,/GhRbW)mR7?a*m!^oYJ/[?JqNdj+Q#r'_1flZk3EW?<NqZLGCa*
%m<;[$MdDJU@*9q;Z?]SUh%m"EE(e_<6>`#ThZFaWm#X5g)MnFgZ@j<2i+;TBR!'1:UM)#(@ZV9O7@WP.0T+M;Z,L9+MAdZ_K2NtE
%oAD^=j40L.`HY!j3J,dPcg&6uG8LqM7<r:Z`tt1m+EL`aI<1>*S;r<?\OG<,gsjAlCu_Frpa4;N]n*Ok&U)/0DSt'rj-6A+jk1Z]
%<sA=5jlT"SG;TXuDXbV5);2O1-Gr^eG(BgeE7Cl=%bX*>@A-q:+a(NbXPp%B?.5A"(D^"@--cnr'F,'7/1[4u/6#ilm='O#;i&^[
%+BsKJY[9fY\7T!SPNX'75F*Hc.C.0m#7P=7*6)mUhuI+Yao"cZ[,!9?`!O$H]hrZ_=HJYu]/SmJnTCcja*A-e#TWaWNs)&eMKmMb
%AY$j)L$XSUKV6:DXcrQb=N/0WL@6[j;$Ajp8uF[Ro+!++(+PaK`;k/r_&j5a3I5S<j:PR^nRDmJ2k->=c#?DP+6q+VcIbJc&4[-?
%^J91YJ-2@>DVbXACV.0S0Kc/)2E2n__TdYE-0fGfdX_@<e@Jk7?WW&+[m8$kGA(+*7[!&N^[018po2jop>sVoBRdTq`:KhGHkCZ:
%6X#qY(abD\#2AbpM"N+:H]MrR5-$kQR*YDo@b\#?!E90KpSN4$P/FBF)N#bo,#-=8U)Jn4ann%5H/[dc*&Rq1O25KT,ND4D80h%)
%Ze2:5TrCC1`b(\6$UHLkL@qA`s"[^Ha#<4PW&To;`<tt"897s#\)J9AMU]=!m(dNJ0q"Gg.El)H<E"a-dQN97ZY'rMU:KWe)N:;(
%+-CS)QF[LA"4WHHU%5eef\[t-eSiISS'Wo\;msdboQ?Z&Ua<c]a>K@gX1!,n18XU>Z1DAJ:[tPXR_r2`],:n'XVG3dBbJV%^kEL,
%4hZBIDa8#-\u"AmW>IUQk<CB/T?d8mRJf8eW:tgrnV)iEHY?=GjqO@!6k2:t.3[Z4HS*su$fVPO`nPth2<AcAoZ"0bZkKLZG\C)n
%\Y;XhqWV@_Uf0bX$sO\q4Oki';ZO]g/*>\dn2N5q+<?Np\,RdE&(7S$Q@FkLo[!9q?^pR=D.>SV2&6,F>3r'/+rChQJL+6%bD<fq
%7uf#eU8s>!\=V`5")>hQAd%j7]C43Ulb<B>3pJ)i*o`PM[f)VriW)MmM#_fM<.4mSXcR0,Ir(FA"Sb5T$.A[s5="kD1E-K(UfFfM
%O3'45Pj,(B(RmAV1HD@gA/BE'.qV\[P!2:@ON/1nP=$t10LTi\g$GGD_]!5s+"1U$?fk7TRfc\3>da(4P>8`H2>bFj*l]gp3F04B
%HSbuG3p<Jj(NK?/&N;<mkKq"<KZ$[g*23gZ2!fG]g&>7^gCGd;]eQO_);pJGQDP%C2HZ4OY7p`NhfRXEe@;:Go<aJA@-!I0\M72-
%qr`lB*[?fGPW3rAb*uB*e5%S@F=o(pgP&TEJ%```U3:"i<rZ4%2=N_bOrKZn"#@0BG=u<Vl`8Kdh$qY^l[[]s]@ZGAJA;KsFs0Fr
%%?^&.U3K:FnZVrXJ&;pMVI/GA#[&mh<tq>cX&S:^1ZD@YrtPSQ<RqNQ"Q%m-7Ea<sIh#d\M^k4'U6]dh)-([Ebo:$\b7@Y1+CDe7
%EgMhORKbD8Elc=P_lNsmaQ"<W9PJ'Gq-th:m_h443p3HCTN)Q#C_IK$`&[MNTO>h3Z/XL/*/E:&$B(SJl4J4Z'Ef[s7eeOUS&W.,
%61J,1bQgu[:(VZ-8B2'LPjKp)0`6i_"0($H.tWjfCmF[KpB\tZ'l-o1cgsOC8$V415hRYIg3-'d3`H@uW-Kf$=/o!,V^$LKWiV<$
%fp2p[R,Kg.euRp#iuBlC[+B?K)g;k?@6)C\h=no.*V@V?j#^#@f=92Zs.HmK-hjZZlmR?cm!g$UFR$Ts%'FWO&V5MU0])P`O8nZu
%5s:afB-ZlX_7/G<K.-5LPtFUo/gRnEcP=aEc5D4+LlX>I$Yf`ZlZ,I@UhE%t`]GVN#8<A<5"Velej(]a!1Br`GMiVUd9Fb3c<Y>h
%hmp2GPP`G_B[]DUD[V(i;_(V=XHFhSk<p$,B#$_N4^%_$'>s[QN77!=["7E7E)jh^90G/sH\_&m2`mN7=,/Acftr9S0)s%-@8`H=
%e5DZ7D':R"9/<.D@<5(f/pDaVpn%qQ!'/7lLHlC3iWp(Z.M:UP[2<(F,Y[F7C$$"1>!,F+iY(>"5Nr:(N`Su$=SH`&8g5'KAo]?m
%$T!jb_Vuo'V@[)%W@oP>QF(a+K!#(#NOnoSfRWGI4TI_n<=BRQ+2>rZp9&U?q?jho5u8Df"`2K9jLW#t2%0+$5Tu77Qs+Z%^_jZS
%l<m+:=qbT,R<tha.]P.X+&]Zk-&,^gH,K*e_W?"L-#^8V1EA5#b+]7T5VCNb/U;6c!$i6mq;,AcZS*%iC@8IXf6,/V#l52fCr'V7
%".-c[b)E!sf<U$TJ'\GLPd9&"A>R!t;F2Zn$`1/:4>ln4cb+VfUM.^0BB?R[AU<J"c3fbW125bI"<NpFl*W;5C#k@9B<.[-37Mk`
%\%9'9.)qojfGAg;`M]dgBS5GK>hF*r1glrO=(r/_"_T7L4VlRZ;6V?3+0%mr#^$d3&-2!NeoU#iknB[#pin'`TZMn^Se<7QH9/W]
%=Maamhe9;],/Lcf-r>$Y(5P?.7Em'RZEBa2g?1ADlC@U@r&kZRJ8t2rF+97TJV]EX>-1;JJC*t*b!?5,6kL9+P?4E@O>sYfZl!=6
%_,3Y;kFN<>63e.]KK>(0.8*)JS7MGGGVUol-S=">VTkQl*>fhA00]1o3i>4'o%i;:Afq#:aWq.a]ZR>g?CU'T-f,;F[026\Wkl27
%e3jk;bK8co;UG7o*`hb9j+=G?W$P:adMEJp1bF!4%5a[u@0@I/*at35,m^#U$P93ZNq=Z=M@0ILOH\%.U,F%*Md9S(OF'tG,?Lp*
%F"K!62Uttir"uR>eZ>+8*StIupE0*"mKA-R]()KHON,Nl'MidE-NQo+qJ=h3&nH<M-E9HifE&nuUD#H''Y-:?L`T#dZ19@SFX%6j
%(^JMJ[8*\9\%tmsk?H6"A*8_A(gu/>(`anh?Sgpdg=l6gjcoG?[7AW]>"d`gjdsO^5RJC49JpMW>T?`VR>1'H0$osA?eB8noQB5<
%Tc#^1I;dXRQ;q"eI8C%=H/J,;h=LWp0*1iYN'6JKIBY[(cpg%PE?2qkO/>f,$%$=P,Z3$O\_)+,mRSe4cSQB[#D6#?c*1eu?(J4)
%*"q;!o5.!5cB-@'p4X>F9:AX/$E3l=>&&q8A_,7SDYLm#kZQX]VX0945om.c5E8?k;=]"4:B,"*,_8^n^8Kdng\5%^'Y24<(uMLZ
%K-.=<>J&QR2h/BA:`>Q\&L7?i^^>TBG1H+!5q,2lGYHs*GstUP&SJ(.A#DZm*=%0?bPE;MQ9u![g#nm(ip`X<=e$8mT#*6N01u\5
%l3O(Lp=r+?a)kHIQFpd+W!nu-_X+cg\$5G%r`Rh%ibl83&5O!l!#@uq@I_MRZ0cI"?tS^c'\)1'&L6eGOB_7\jRWgDTE[)";un5_
%'h^S`J<.Y+9#aiGe@P*Bk5dqg6=F-@Ve:]:?n"/g9T7u^]U[l5PqAS)EZ`o,@pmEe/:A0"N-$MMFmu*r4CW$lK4sIP@9PJTV1b/:
%Hhp&t?ns"Uq'$u9"\ZSA26XNM]h!Fk&JkdOJjl?O<P?Gdh5XLY,-AF1H3/)n78#]QQtaO1d5PI)kFG?&q]@V8EJp-VT`i)g&J&_5
%m"tm0,tAe$/"oIk+,[/WoL!CVZim0/^53r#Q/8E*D%0G;=CS[qDU"V.3[shZG8G9,@:HiW6;UZADFNWYXI:rJ6QHK@gWkk^QqBA(
%-EmglP`oNS)+rk(hK0fBR)[24@OnBs)(-S$6K>l"K'Yg?Cm]sDN"knr0S2&Hd^<NB4CY6L/:78:;fHX9;M>sbf\AY;hAQY-=<d;a
%rOK.Q3Fa(>=:hg7E8$-*$K)V/jDnMFiKg2X3(l1("/oDD%a4/-[bVX4YjS[[U*\c#_:":<JE<lP4BEN'Y8cM(\h)YZhJRBd2$[5l
%'tPkp_baahG?2&._9tJR^rb3g$!]lkjlQ5\TG6J2gFq,f.)>%pTs,+&!u:3Igkd<fQ9+"D58(i50nqa0/M&VK];@[2Vk[1:$mA5V
%XgeiaJ#Y/tA)SZU)9B,Q7LBdb?aajIZ*SqRX&7/":"pDZYg/^=Ce:%NF!JLV<4&Uu/`Ad0n%mP-VXq+6eCK8/pU8OLSYI.blF.on
%p`@PM.h4$^SE-/W0dQDt<&:%IeeV!A/8O*7H#GG-,*sMGb:I;/TGe?,Hj22,q/e"+p1#BQ91'c]g[r2\`(qF;L(!]8/Y%+9(i*7D
%.k]"X;q#!n5du&pT\__J7$'UQQHh2figLkD`kiDdN)^qeC:"Os=P@b-pjaFAa-8V'#coEe7`N7f5*N?+Z?DqE1+=\qYJ<`6GX9AL
%NRobe7]*3CbK*?O4gNeCB7";k]CrClg[ri]L)DfEEq_`A0GH6$Nkl2KD[RKj374rbDC['TrC!p,:.De/kiPtCB3q+S5Dc'2.gHok
%.cAQkm&5lsAZEQ(+>HDi;E:>5c_J.DGdYA/hA`k;;43I&2A[!h`h;R?]mfa#mFXgcYhpegP47iRi2_nX4A1i"KL^:STnT*H0P=h$
%"Z^nQ"@tcTNY_o0mWo"n>n@?mrdsU8h:&mhP4CQ-h=IajlR/Vi?]P1ojZhAaZNE.oj77_dEGKQ#*7,8BfNsDmk;R0RE=i8C2Df:U
%aWSAFhgl0pp+d$q([I&CX:<(%HtU6#@/83VZtj)i&X4+gN2sM?L_acZmX&FmiH!E8Q^bHbV:W[Z$XC;Ni8.]D?^Js&-1u!:od@JV
%cs4QEj!oMmgA=A-$8$E)>kY[MS1Q)c(2p$flpOR<Rs2Kpj0!R[&C\>?>NE-PXdsPT-N_]J[s$lt,k/_6brn8GMQX5Wj9K?5]X)R=
%^3UNtSk$PBWu.a1Nf754Fe1!okLh6BNHC`NrV=B5pZgE>UUQY#JC.SRs7Ya*e^Hf9SnS/.h>;up%#N""C1f?XcflD+nk!3eepIF?
%Kk(&I#5@`[2coh3V=onPT(cIGH$"h3peUJ[T7-[Ic3*h(L(u(rFC$3fA5^\d;`eV,cQL^Tq8REO<?,`H3?IGHT2.tLFKi>@7Hq+#
%I_V/W:1QQ3oj`r5gJ0K\pNet+XuJVZ*YqfbM[ku4#>a7PGX0ejD4EK(LY0YRY&Cs;'C.J\dTP&i>Nb<Jg9%!.iB40q;Wg'hgQERo
%HK45Hj,&^*]G3p2UbKZ$ZsfK/#H%39ki1C]mUh8Bd?4;caGH89'%?-jYf_C\A\H#qI,e]fB74a7`tigE@pmA:^(ik9-h=&MdpjrO
%2njsHT&Np(_I'`.2ibac2Wh"6=ulJT6>=aX[nh%^Sca%pdCU(Ro,^%XX^4,V5;!atXE=I[G7"5[W34/>*=T_n4uZ'k&_$n?"!i/m
%9[)9lm73$-L+1EOjmg2V$C)Ku)^I/J$&49r^c936@r8jp[$1$A7QCqE]]\.hfZu]B/gQ-1p\'"f4Jqp^MF6_9.j\$V41GSf<8$>B
%p^-FE<+JC(Un5$S6f>1*RAd1;jOj56E,=N?m-%k(lnaR[@YU4;'3mgd(Z(DFL"A2Vk8(l3FNr;hFNnbX>W=lt/tBZmg/,KpbdkHl
%W*u&j*b;+%9MsfiD0&a,7Ls-Uam'M]Zr%n^7TfA3ZiH.#QKCAdf<P6hV/`FWLVV)PTV\Ic["rLZbYeO^F0@Lmh7.7@ATQVS3<E$O
%[!a1SB7<!D1F\Mbgi,?5%JLYja<"/?GN%^kB?MCWmG=g3!2kN:?Kt+^=%QWcO9(TgJeN1j!N+2*7KLI`4LInTVSsHc*>;:BYQ+i\
%Fu.QtBZOuDl>.^q&H*fFbD.0uC@RGH?30^H=^b>n\!*e\/5;<Gk1@*A%WcdpC"L*1-2GIUPKhOX4pYKtj;NtiY_W8aHiTgP@F*kj
%Nn/0o^DqIUW>:t<E/5b'$c2+3kD.[?rq&^_rUOFtI)GsYi7>h9`.RS0&P(2l/>-r,!DIG&BScp^]kiUX4NnfMm\l"&/=df7=a9.0
%A@>9W(j.C8H3;8J+?\&QUT,+8.<%:LYFf?u"OS.uCM(D&E!%I)\e-c2ZVh24S&-G?c30A\pCEGD`-VMM$me!8BG6ShFk<Q^mR1-3
%K*MEu'JGTS03UV9rU(+,(DWTFa\,0Y6pd1XOGc2$a88@(%O_)02C*`ZU@H#U!%\0X_!5r)#+/'+Z-bhf$lUVIFln9hR!Zb+YlXD+
%A&bPK=iLli4W=2M+#'gm>1lc.k!LL.-X[uUfcqm63rp7Z(KDaO@A.cM-gbFqbm,jC!&N-[@(ZuF<A-(#0$Yi?bqGfq$7qFcUkL+$
%Hr8kOBI#eKW(YR+]W?_.q4VZn)t:Nq)VC]E"HPc6C]n"C?Y(MJ3c(5G4oCd7:&KG<@\]cOV3+[eXI)Gc,nrN31,>7B8;40G^H<3m
%,UY+5"IqiG\tdfA[IIKDN+]JX+G^HLWk9-U)b)M>GW99&^^Ycj+@:j*MuXEInM6VYn5*L1\X$WQLZ*9(_c+*LWT^+..JYOT?nheC
%kZYD2AS1Dck-5*I]8s0!&2=8>dPNh<R\@7"d=?2C$mTfnmu7l8/_[9CCnZG;Ac@F]7u+,87hQm(+q*Y:#>5)1gpjW!@0%;SXcQlu
%hi4&0L+FSh*;/7)@8&4;V+_IaP%&k$i@5^I.VdP='Ws&O?b/#BB)mq=m!>B?b$it-YF;t.U4b#@o;WF#V!(\DC`Liu_%1-?JL+H!
%?Tl#'fk;YnEKX)5cI75[k.@ekAlo#aO%r8+)+E:'34clI2?u/b)`^,2Jdb<Hr2:=.R3^)0S-4uh;gDifn30hDdD`o0ZXmjdoYZjG
%3]DpI'^$.6ZggN1H*E?^O,?.cX"4?hn\.k(lB(rJ.$BT?QXi^r?k\6=DZSc<f9@9S&5ua@)il!\BncgONFR7\_3G7.le37;4j1'5
%N)ba4/T0YVjC,\0,8tm?3487"VC`QpV[_[SjR"8Z<4lFbD"NLcq/g*^`(/)5At0]f?Y'p^)R%Te',b&7YdBY-)Y"M#.7TZM.^n$=
%!0"<XY>W_QgkbeCqO-EgKX_K@=['Ol)P@$2XkmE.UD"OVh,ouXR'H)-DoPI?#5<;O2LZS.d_O4/mK*?Giklk7ZfHa.`VeIIc:TH9
%"14$%WSUCZNV(Vk]jAS$;,!DUN?jS-\r?<.UaKcg]6[<EP*R?);^r@2E;-B"h-k-S9-u1RkY\4YQ$!.sc>+iK4HkeC?[QASoKWF4
%0,"lVX_jZ!nD-$J\>O!hc65l9Y7?E9!=C&&;Epj=6s#Rh*DhWf6uH/4mkKufMHZ=a?<AUZ<@:Wn%BBOG%**994<1H3eH/h[l<sJn
%2&A.h=B=;5Q8KOP;JcJRPSu.692HddYqq//$b%/];gfkn_RZ%D5WTT9(AGbAgrF%FqjQ?5/rs>,oD@*aCrF*7&*q<gpdg9"4sLV(
%&Z)XQ9,-t/<^?`^2ruj^Ia47MPb<7+KSel(WB[]li*sZD/X3s>A3n%dNY#/9[g/HT$9^7]B.;7bWDO-[88,**:Jd5WZ+)8M1`VH(
%$ci)TiArNCd+lCUlTs`9X]_-@cNDlV.=ZSZNo/]A?Eb=*"%)LOBO657)>!i;_ogI?m=SFO%qO$kBNs0g^n!h>SZDU_n;"Zsa`&)q
%OXWX\ZDn4Z/F82Zo?;ssqq'HprS(9UAR,Cf^CP,X:M@&J7X2]I#=`r&rD=+?q[B6\&7.3Tdk*P#I=0;aCD[o3E14b?!Sm]fSV4#;
%`lN"^[mT/)2Ro,Oa,U%ReXDT_BqVqJpgl#++eYu%,6.d;NXVN#M#OTWGihmPoW*PM3Prja3q1f;dEXhlL0nD`?]:eOE?V_&QtGVl
%C=T1a_pmMfa9?F'#ie(\&-sSM11lM?3D<r$F%M3LA8Q<pfl:Fq2EBX>)"[.Ofu!#>0=jAA%'DCGGFhG?P:m7Uhqk5.jZ0L]c`"i3
%DQB[Yro;hngCs.5q\gu`:':,Vk0isSbV/Kh2Cc]Qa(S=MH:E!maANJ+>ZS'o!.(?iP*TDgP3rkjjc-(h?I[@_/e:QpPn_"d%$IlP
%J-dcGmpN,*ElEGjlX`htU<C,7#7/1U9@uhrL8Qh@,^n`[T1U*V(6pk`-c%ZQRXjZT\1DiXP7#ahbV-b=rh;PS%&M#l>\?B/`k'TP
%&ho*d2]1XbaebP,.GRT$fYN&)hui'f:Fj2%`](Sbr8I\TIr?Q>;U1-SkQjL%QXRDI*H03jFGpq#bkGQ4Rh8T/\F7d^PDn#g_emX*
%Mg_Tp\sV5`fW9<e3kobfIc/o.VS]goR]o$3r=gT'n+TVb,t?SUG?<U,4auYW$bqPh9D:%6f=Wd!;A@YU/lgq'QEcT,lD-NFr`b6L
%X?0(!&_3G7)1\hPiQdfhkrqos"b<e1=MHa4]a2he"/Ii:*#R$&NM1=fZd4n!pKkj*S/0D8&3H"#l(hHboYqi>AggnV"r%<@oTu:^
%f,C2oWU,@V.0_JJpO(iW]RGc7>#-7?CigV%lhu3G`lHYZs+hQ63D+_`:JPjed"nn>:m/K6YPMX`m^t@4](<bZmc;6KglC_r>$0g3
%f:@VqC99^BVaJPuet%I+TqISbn7*880'9[KbpY(RD2,W#\53bs\3"i*h]fX181)*#Mbb6e+9-.>D6uR-o?`MYXo6NCn*_Yl98r?V
%dMLQ^\[-mU&fYs>NWnd1?qhRs;9BSS&ZoW%,_1ocEPb=_;4(P7KleAI&k88pe/\5FTYCW%=lk?4%"9`QNNpTQQ)H%qEA(3o\o:32
%%&V^q1qHDU@>/E"S@ong+4S^J3Airn%3a>s^!Nn0]#;J!Mb\\=lQS.HDVO3g]PLJ?$r!M:]ua[\bC\YeNPh5[Cd,?QeZWEq&JE"C
%"h+joNqIC7ahIn=h)qRq)tUbVS@4%C*\T'VP=;r4R<#rG.JgS.K!I'"N"RFj$X8j@n=Z;D9HI8BKP,M^"jVLC5r&](\TlZ]+27K:
%^'Nqe+"t89e+7X!N9>-IH9\o-QDcPf'V?'g"g"_s/)^&+;88=EKNfd47ri\l=ECg++9>R[cl0#G.n`!>+DH$u>494GJju^sXU#kg
%=.kAq3`A4QnN%X3<TuaP&RRIu>fW9nL5j2-\OHg1aG=%$@=T0R&kt&A/Qn%9V$pWD1%g'=NM_JO&_4!Cj-m?S*.h<Q.]VucC"5EX
%>^X"FYN_(3%cY3n`rIZNOQXXCaQ(G!0tgkj"7\V9J(%'Nj&3-p!9Wa:$96X59*P:]a/*7+];6_&Ku+;XEN-1AehE@)pN!5MYuL)[
%Z;g0.;s3#u'12#o"U#XEFe/sRbcU[!36P"]gWB4u\%Y!AdH2#oaI!,T#-!;jpmq"eaMeU`$O:o<U\T^`ne*fhM,MJ7d/6%@bu8:&
%%)q<[#\:RB3TMGTCfIJ4Ha!8,FV(<FD,l^>VWjm2qRID5pH9&$=d(g"K&X[B4Vo0g$kku]?PFjZIREBj>R9\uepZbXaOHtbn/3Q!
%.O&:B>#lLB-mTX0_gi.$pV)[0^O0:8=.WHO"\M%q;6:s'r>J/D_s)XQ9'fAoB#L.=,!qoo,Q'qJ9TV0^;Sp#%9gH&8lIq=#Z9Yg.
%FYrVLlE6/k1Hh#a*E9"Up(G%6?Z^t2>g8.M+s#Ks?rLL,S"P8lm6AAY;;XYP?)qR3l/.OGok0)Ehrr"^J)#mR$R':7<QfVP.mA55
%3=1!Bic>lbOHO3+J.H,:A\SP>Peder6Uulh]p.>C;/:a7,M5KuK@Fd%pH8$GGNcW1RA+Z#VjsQG,cm?3J;g6S[sE#*jbY6jX`cT&
%\1rlA!/JgJCfl.S_I+TEakMpGg*FJRXjD/@4hC>JXd,8D>K:o!-9)<OE;j-IRlgoQWt'(kW>tiLHHl:d,#ts4J,kb3g+/Gj_<s`I
%/S:_=cjA@9&utjR-+lK)_\!;6J<K_!.,r)MoZ$>`j"mRQG(Za<Y<p5@i<0toqH&@>Sm1kL1s4G!;ss[7"76>[#"^KNP?mI@Z0E,R
%^OAQtW$7qV&/<U.RJbN,^qeQVJ"tJA='>Fn2Ae]0+3ldo(YDX%.Do,J7>\QbaAj9TjiR;gU>OH8`\b:kqq]AsJ%VVo1JN'bT2KD,
%f2A*0]G'8T?T#b,V9V'==+DK%Ic6o;Jp6_/?c!%Ts*keJpnW924MGPPogIEcYmruZO(6$[rqCDTO'h2\mp4a'SVQk4A<l*+\p,Ca
%i54#Eofu5!6BmbhFd/f*Lb&,W5+*d3<$Q)KeAXY@)>\,a>LET!<@gF:ri<-K:-DXS],>rt;IbGm%KL<Q,0K50dc)HNbL?\bSL\W<
%H`u+kQ!X^,P"_hl;cBicDd63!1-'H8X=LOVH!6/aC[YH@Y_(.Z$SPjt,)KX!H[>@=$[NUU!KH>62]_BcMt\_3V(\q3>^"Kt:c\;e
%/!Vd;0NeS"AbUZ2<j.MZrYQ1XP1((0V+U2:<m";$1>&V_VqE7&)+nQ<Q>,b+(/O:uKZ.F;UP[W0f"98nH^V[DMh"aD-Z*+ZaJ@%%
%[ool$W,4;QI\DR;2,(+j#>2KHDf)g#<$%l/@I6<Jd)>Me9PY%=o*F_l[&->_jm#k0'_<&@.4\:*f9l&cD\-$NHs&)p?"6%*lMIIu
%W,M(T]+4.!2^#=^o$,7qK0l^lNO_Vg.<VG=.,d:5kW'YaWi4`1+<"Q8NF]s@ChD-&fb29R7G94GB;7iu'H(^NAp0*JU5_SX0O<Mh
%N/EXfCFHnN/i1\=7$9Ii!+o8[#_IQF?+KVOBVB->n&c]K"H*H+E\Fm:#DW;q]frmS@tVK[/.V38DZ:02aBrfVR(!gZIW&aLBpquA
%*eO9#8PWkEo3p+:S+%bVpVYK!@nasb2nP%eZC.?Q@m*pF.A?-?8Nb]$pM6K1>&l2Yb3$LnOg(a_EL%gtS'B'=a_.VLEpdil;dA@t
%<lYdgY7::TRAMNE8*-kR`>]-l8=8"J&eYe_Q):X"Z#,A\]gR?-TtjpLNh'P_Pl_f>RiAVaRJaCna_a!m;1)Mkhn'ADm^W!5)@"%I
%5Xr:rQ\Sj:UiC%D#q][d(Y3_)Sei1NMr!m<jDr:mol;;l]TfT1N((ebK4tct3ma[piaoL0<ZP/!3`=[m%B_`HXJ*7$+8^4e3p'%l
%*Mu]$_hZ1Wnl6-&X+%rIA$D5\L!kqm%;2Reijs(]dCn;X'c*FLUPCQm4tC#fS^)(X>Nu)k3N98D@gAog86UH_qUIg_an3_>h>t@U
%>3gH+-DZN!m,bcJ*kUk=7n7NO@VI$EmoNXrT&\,=8hgtUC(754$[F"9!$s^S`"o8s[0Z&>/Xd1=bt3":4^&FNdk%JO.l9"e/q@%I
%'he19AaG8Ngkf@fU'<nKVm0@3epZ`,7.S4%][W35$o%*cgIkWt/ac=rfh.X/Q3FtC'RPrsFC*K2M#R@mH&&.]hI2G!;VZGs4Q/Qj
%,oSc],m5`0jjhFTFC\n3o$m)'*V?g?BqVXPQGbc0]LHES+MEPbQ)04>+X@W&C_>4i.<btb3b&;MYpHQcj==DKs4ZJL%d>WP`MpVQ
%8Bos:9agTJHj2p&^cKY?!tK-j%0W!ld)<=Ok!&I&krSs*b)&kS>=L+5&Dep'=bEU;lr+#(P;``fVD"8F(#o@JLQncPW;ns9H&fBl
%<BUHV/S;^1-suJI<>;Cte_rD%rA_9Qb!(fW!q38c4"^K\7JHHn.u<(#TPGiD#7;9%[q_n#jG*kB1sNt<!hej?VC5l'\!q1S]o!f'
%-r,F*S4TS]P5CIXih+^,M=o]1%XjK3Ipc`&_]/(Bl$Lr$:B_e(+OC6HJk=C3@NU-+qeBp452<H,([9@2YS/-Z>c*no'[9*2^BLJ@
%#SVqY@0N,*8II9tjKN/oFMO+j7KY&kf3[0Jn-jsVA8Q9H+IGkXHC3j3BSD;LKVfs35-0H4?RYkM7;nI$Jej6Ne1B&W96+_P("fdK
%P)1d\Ypd`</PI"$BToi?!Z]7iDAF6(@fddc9\[mdmaE,7r98Q=D>>+*lgLnHrK3ejZ\a8e>H$1V'd(o1T78%:CUEk;+=[Je*iQT8
%VgjJ5jf`/H)4/Rmb7<,\_ZauJMhmHage45&c8:3A+HlPi[e`Q$3ii\o5IjqL&6Tk]IuGOu<-7@kW6"A#e.^P=kbT#FBK#(;'t"'9
%*q%!ENp%=iAq!f.K4i=NPqkXT(DYMgNC8WjDb`NJl[[R#]PTcZo/DRA0Jp!)aSK'8^:t1,-IqKrTGSq+($;U8&Qe2K\*?drQ?l_e
%cXVJbfYXFkc#RmF)L(E7KcKdq%!8\BNOVr9eBK>*V!lP8_L`TN$JFA%>QK:GTcMdc;oT'/7$Y>2;ge$9J4XM:%fdqJQ9PGZ_Xmh9
%3n?C";Z,;hmJK*IdsL0_'c:^a[=F9B'ME?[k<MD/9sM<)$(b\uKWX1&(gTaF5c>ml[oqm4g!kmug$`iCk*l[6O/tme>3);JSc*e8
%Wt">\AW#$>Lhg#Yh8`,$:LZ.XNfo?!e;/i.h8"V'.`+6Eq1,VjhHCZG#!@-K.Phc),ep4Xr!o8U(M>MH\ts_*e]N-E7?dptWhCVY
%WjZ=RV+8rXFHB<#c77e-:dgL*a0c^33Es(*c4Us<<l@HBGiNFEBK7uNi^HJ4j$X-9b4Qh0lD[Y<59*gbs.S.7g+E/<kC%:1lg8+$
%4t9s_'_c2N"+8M0@l5d:&U^Z<O;LR:0oOAKgPTiqJhoM?SY<G%iD[hde>/7_3r`7!eL5]=BO@EI7&K4X8V\cXME^ghAa!HcYt/r2
%X'S2c4AC('_jPPd:Fei,q4?oGD.'C@`UqN[J#;P7AMdJk=FG]H!NCcXq&]o"QWi>@[DF(c)#I@K(:S&cND/<[hEr"7fk<FI,V#5F
%RS?M!CILkBhP!hj0bu/HV/ZfbPO8f_%TA:4je0FH69gc>?J;3DMYtgTF$=JQDsqse*<"-l&:'Nc\#DN/[e"Q7R5F>u;3_Nil."G_
%\RlV_=[RX^n7Z)<XfWZHSj2XgfjO='.7s0o?>C7IU9eP34Uk:iFq`#g9Nj2]YBR-:#8A9',qM;uCh6(;o[,DTi"2f(C]LM/%pJ<\
%S5h.+VWbSDZG3SQj8G;X,e6:,0$0q;.M6H<_(iL1S62em"nA1X*L3Tb\>#X9""&U;$</0rKKSdZVUb-1jTq!.H?(]\#^qD7=^g]"
%Z?lp+""9)E(dJbuVj>J4,cQarkQuFbb1BeSc6sYOX`R4nD4J9/M\E12FiZWeFTO0H9nJ0?a"t""?1W7[Oes2lJ4r5VA#P8n:e.45
%,#_Zr%si'0mlCmQH@qiA0YB1CX.u&<,Io=mo[PZ1Ag9!M+k\Hg$Mb\jTo9-]bQjq!?T(n`')q$"0@eWOSV3GBl_5>VLk$(3L%SsF
%-mtaS^V9M=hnt.Q;f2Gr?J*St)=b7:0Ej99iNKGI>G-4Uc)OfUoSFN)j^+.GYeLXJ:,=K"1aAQ!?l2_Fo_Y+Rq+keUT4+gJF/`[A
%D0qGhh*<HSib[OfhW'=sj/J[o%$Z1WQIIiQ:pr]\M1#Kq%5OC_MDO$p#npbB!6h^tdOdRDLcf+/*[;/:9)\jRZb-@)VNVECjf.",
%8`4,'>&o:#gb\cYf+EYjXLJPoH.HD<_-n$Q:]eoB1A?kKJA4?D@(Kj[*r\4_+q$,nI=-9Vdr1rhl1nU[epl7Jl*Z?V2"!C,i?X$%
%P-T#[Jd.r"%cS2iTpHM3M2D-]U!a#;7uA,n7&riW@%H$t2nW/4^/!a/B'd/'dAY!S6paK;:I0#02,VIkEmeA,^HAQE>Vrsi4O;Vg
%Ef4)2SgRFcc8UKrQbRm0pi.ia#]t7s?Q0A1'RL-:"*R-0d&76aJOe+%VMbNAPGV`W'"LJl8eaRTQ#Ahoo`YC1R.BrnAK[Cq1?onC
%RmXP?LWaTbY?Nk_V2GcYBS6TKAu&^Lg1-]o\qoeDJjctqNbm^ZdUAOH,%Pa?_:4UVJ4YP.Ib](s4`eC'j/?62`55\f4gid<PJ2C,
%Pr7b4$:*9`$8[QO=GkhbMRHF.)l>?H9OkY'((/[)Q,a0\aU4%URXFlVm^hZ7Ei;C/Lc%P--A@m8WIt\uW'9TM<ri=K=1^?V2u\pn
%\TAN.X%UolfN?]`]kk9&pZ.,3_pO.seIgaCCTU/JUVmDX]1h-UQ5bPr.UhN^Rd-_Dh`j'6bf<6Xp`7;a3'?VVB-eY8Peq3JSjB6N
%3L#4BF'>Xj`HTCM]FOjJ8UqP"(#<3Hm1=Hsb5d:2/F#lp^tI$!=J'Htk4?05fb[[d5]%0F8aA5SI]t/!ChQ:IpC;d/OoiPdgc#k;
%du*jI32O2<B9-(A-hk48L^PrXc)3asRd6qYh]I1NR81^bWIn-$^5fJkS!Cti%O7)bA`&(,&1!`\k?pSPoaG%><4o(oi:0Oq`7&q^
%P-oooT\]BFJp_6h*&h2$iAk!P+]O.hW;Z-YR3hKOnNc$LCB3=VZu6.F/%5KimQCF,S+8^%/EZBG/3-:DXsp.Hdl#;-D$4L9Q,Q&4
%7'Lm;p!Tr1hfEbc'p"&4YsG,j\q\O'dOocVF,$<sAa&A\]_uaONm;bIn\Q!t0GN>SDS1]@/Oe`KY@oiYF^b\qd#BqBH^90k8gUeg
%WYlO,?^1$EHUW#mUl2h2c=u0/"d#$Dha2kjTge/37,A9aE6fm59O-:8nNfQi:EMKihtY^;KBbF#i-#$0H?g2#de0ls5p/[/:gFDp
%ZBhH!lmk</q.&$hJ*2G]0Nl@U_iHKi>fP.(=W)B[kQn$u@Z"l&'Us=uO))QAR4KL8#V<J1<LZh&,%=gQYqXunFKa0mPdTZqbe]Mu
%-4&Mi_.'@9Uj%^41X+QF%<]NW8/==!Bq!gEeM7oNG8,f#[mjK+(5<%]FXc#hW(6$][Mj)4>!QS1gQ)7ip%LAb+Tk&`5DR,#jKI5!
%\bh=A]Y#=aa/i&gs3sJea1e%4`pjU_a&g)Sp+G[V8sj`/*V:\l18rsV?Ng1Hh5>M3cWO_eA?l,>D;k1mM6'NU\mlFN]0>qqY.$\>
%[g;gX%RD-OYn#0gF,8UiA,@-)FAHekM$-cW@,ZJ'g18:/]>mMlEafXSW0IU@T8GqH1F%bg01kS6\nmuA)ORMM40,gY\<f0(\L0+7
%)Yd)<FNSG*Or!mED<H[4J*EKtmscmkZ/4Hq$te?AqPAgJRa?*,>`G7C8LNQETJN^Ik^to0(MS?#^&G&sg].MKj<SotWC`A7^@:)m
%^;jmmEiu%O$N0,AM:1)<TOOoRr!$hRc#IA2U7Ic&1*Wi75`[)7!FXH(UG3_,f#fFn$Q#-e7esYi>C5O2K[\s?dS7ok$aA#)=(EHe
%2a=7"6W3I$pF'\&crn4QF&V$Qq6qi;3a8)eMLTTm`aLRpc96S+c^rqk'fa&JK`V'_4=,G.b$qVDF*WHLQG0AMU=kM_%9TSY@TX"(
%..?d9qZX*+XNI1SdB0=g?i&oSPNFLmpVR\k&G\:G0`i6,.ZNq^Mu*>b\Yr<8GLsp9Q$N8G]hY/Zl)9Fo3LRZ$@8fB^X.UAaFmcL%
%l3jF<N1XVYh&G8Ga%cCN^snFo']Od>T<f.P:]d8o1:&A<paAH/OKt]1dB]!9X_q&PRqr'J$k;Qc)2tLn60k4sg)Cj>7MSN/Om:0C
%,^/?e;UT!N+n4+ff56H/q?kKl?:(ZE6*XUsn\F*djW[[f'\0;:_s.facK^2:&,t^+=BQ"jIl<bphT2ZiW.K_OPA(_k%=SKbSr\Oe
%eL+eA&R3DuaXYY>!`G*g6&eJdgPglAU+s'/;\+T+`#+PRmD6:7WXY%A_W=_D86V8=_kYH&`"PGlR6t9m+U;+nBXpI?%AJe@M2kD[
%bLSgG62r[&dKkrH(?0?3:4\M=/5&K[S.CXY*?B$4]BH7D_/:6fAm@.QHK!N*O$XoF'DQh.[lAC/^m6H/p(UNVYbM%dq;G^U[B$Ms
%@?M7$EEfgZ27L1B'A.Pp`OE+Y<>t-7&fd417V:\Z,I01.^tGZ0L3=d6mu`+,[QNjm6GAU90lK9&rD/)AO7%?mCMJ]AZ=OF^0L?h?
%GBT:<:gXl>g".-iVcATjKi5]\*$-[ho90YHm`V;L#hq5`^h/&f=Y\4adFbkcl3.a9+2)bm.YE,]*!>&\5iQ:Yd/%tuJ\ME+=9]8j
%)/?cB>jjY43-\\mX?FcC5R+jHUJIo0]l!p1j=$6fZr=^gqA.AV[SI]MIf4Cn,I*oR*(lGHp-,dG=0jbt<6%7HXL"1=D9(r_>;eq&
%R0Aqrg7ES[ERN:'4q-(mW&nPV0b<g*FWK/Y*Wj?SpoA%&@hdL;-?U)$=fnAb%lfq_ZNc!b2OkAppQo>lJP\rj5orLI38KjpQOo:r
%9*Qmbf=:.EC\"?\<G_J6km4F&%MDb%n$knASRRGdPC3\o-QbWu&A9/?9`T-?R*h'^eO^Ig%(#,.8kN>)%?Dd)<?^GO]aOu.BIV8B
%.;WBG-lqTp^tPj$^V(X!(1\*Nfrn&qn(Rp3.'>bof7.;pBdPR=l*dA^2dWq`Do,%p*4>dOI"2*ojkIr],jZlplZj2P=8db_phm2b
%r-$VDHK&\1HujRK8#Ee;OV\VCf7]T7?bXWfCJ`4f)R!8TZqc>MYXG91[r>92Nb.KemJ?aa?FrgO$PMoQK54W\\c@:gI.3WKd$^j9
%lJS[ap@Z7fqhLN%:L$Z3Pt;quFh(R-%uXatK('%`Gj)MHhF&'H_:FB+"LWDt6Z`UgT?IUhe8!Rs#4u;E:l5MjkLCj36Cn?pX5"Ck
%^8=t4"22pJ582]EJbe!/[LD_@O/3,k2N8<<L@jE2BoL\$p3>FOY05>>,J%%-FmA-%rJV]KcQi9(2ccX!gs<]s*Bg-lE?fgV6r2"#
%$5RclDrcEgZ$#!1Cd(&M*I)%6Oc)+.0`u1b(pSGG`aiC@D'-'j()mTl#L<#t@f$-?hbqtPqZeZ.>*U%_,%L["@U+CNHlIj/Qi?dA
%n*0R*4Sc2\8Y1;;H$-V\f5G*8>B(ShI1Zk?Yu5kh_$8?*7R%gMOgCm'ZIVj9LD"P8s8Qu+.68^oa$/lTErXU.oFdLaFgSZ`S;oPa
%GcVu9(B#f(e^&VsPjT?ccYn!c2bUI5&'NL[lBgjMK!*]_FASc#"bDD0@<EE/#ap*?[:T;e)B:1H5khNn+bUaJ6_DP+*Mg(k$O7.$
%Zq(B/)mu5=/[a7U<.M.$,2GLC@^jQ0;oj><WXaH+j&Nicp]lAnCD6KrlDf=@`q[s^?Y/9q,tHZ?+&Mqn.2dm5X*5BrOVpE$R$MCc
%.?#[gGUNn0>MGVc!=gc2o'&sEaa[:es7e,G==.l89E@P0o`c!raH[Ce5!C+/cW(;a`2ZWRcJqU^+F11GD)N[q5*@F*EZ13<eMKPK
%PV'E!\KV^nM2?cs,R6NmjW+&dYrg$*XV+F1m/snA.AKq>Apula[,-mWU(5u6]VnOMRKpL!CBSc2jPmZ+=TYE.Nb7nX,K0uZdR'Wu
%,d(.u80q,l+o%hjWVP'c/j?E]^ibY!QWEtnV"#NK0L%6eEO$_ZA!4Y>"(MOPJPGp/irZRgX7GTX,TH^uS7%LE4'N*\l=n=91.s=-
%OAEAqqCu\WeR0TM7tFL46H1mf;='l+3H0+&r[-t6IqM!GRXbYO3"#=*AP"196(&mLiu'=9Xgp2FHl[Ge(p5:IL[k_!*>h%e7P.=a
%%O1NtThr0bd16]%dO.g%75G-$MXe@X<<OH.X2J%m[_O(GUYb7dS.@4NhJ#;I&&XH@;bO5)[4QgPA*O1eWCmn^gd1-fODpX[Elt"6
%6WLC=[JiSNrA/;]9"tHGqSr?_GF'XED)0>'F9QYA?[11?eB&b`:irpSgV??L%iK?A[D_/-[H(UFaB/T,kmU;7F?OeVAKdKLL=KfW
%OTl?-H8st`A)pqqKhJT!i7:*<mIfoG!K=s]-K9P&b?*DX:*OPgRs]R!iMjBK,[E]:*joLD)Boea*Uj8kAhL0o]uLsrb/8YU@RsfU
%%U"*.SO@a0pQ>&9Sg[V;&1P;#TOK$FHU2k%i1LW9!'qYVb*q1s?_%Eh+tRb2db.!d;Zg9sR:?NMK>%0S?Cq.FBWq0u&@<iS6?*iU
%XKoa1[sU!*C%@,n]<VjangJ6V`]pPC>_U>^$%,p>\8U64Us0"]YA7=77CC'>L*?duF?/;oY[-9/hp#n6$7B1jJHF*dUoXnnn4<>.
%R.'lf;nOrc=jRa0js#uEpi>M<j#b#c2#o*hh[Y;%rQT<5?LQ\lJ4A_'2n2<m:OcJ]ERh<gP:#lQ\damf+'fcN:L&6*'nN&PD<X7Z
%RK,!6en6`+5`?4bUO2l'fdf=S+R$-8O!9V:h6]J%"]mr6KZ$@XPt`Sp.-jQ(A-'3A&&Ejq'alpVFCICdZV%.4?Nsop,[BDXIe3.m
%-Jn^a?YB34A@QQbGFp2&:KtVJ5irL(A?*ZHfMLFmVWE`/1-LYb('(V/4!L[[\WB0&'0lg?.L13!A:j0hC]^iiC!WXj0XgLH2-mfl
%)c"1=l7HDik2ms3/u9Ta*$K>mP$ZT_n@6qDJOkA_6Doi)mPAb'rh5<_)3:duAHH<66pp4)%H`0o4=jCe%]4:F*1+el$$e:>_.Cm`
%3l/QXo\3a^E3"+6:C:RN,Li@<T$NDqmW/iIniEj2`OuNgE[!AW!e<BLpYaSB?uF4)->R=dOUgJ2fML7Vq*GS0_:RqAA5Y3ViZnH^
%g"Fm!"*[Q9<EXfI7&RZX].jYIU^$'.nt%E%5.mj1%6kN^.tKeXBJEpjZD>libo/XIe,>%b'u*&Q$3j7HKY:TA)D25A3ij:mOl0a-
%N.H*Q>->MI$3Z-m,B7,s&IkK(1KL0EFW#q=4g_Ck)t*j1?WHD(F>pIIDKPub<%'^P0c)lZ3]B+E+Zdj;LZ;AdmCqU%qY"i0VcQ2:
%5CF1oee<S.<"?m^5I9m(TklEgr]Ha4@RXb+rr0o3LBqXb!]fZL"2m25:+*u>J%;]_3Fo&7n25eYNgd(/%@:i7=8i\UX_JU-?pR-^
%mTP!KW"das;U@!qG:cht*a^D`'3&jT?Netl<Lj[of0Q0!otKW6MHjJBRWu!NB``b4[0>bBHB$/6Pj9Ulc7lS/#F&Ah$ChF*QYFC4
%?XLc/lZGYffsp(<<#CaQ2bqMt2YEoAWC.,K%c$<9@a+W"nE,<_%g91mC^&PFFQYFZ^(/CmTmG,D]aIb.LB,U:Cm1o%!W=#<?IqgD
%$ch)co%g5d;a-9H$.B4W>"K9p`>CLN"B5E"S12$BBj,HBTF[g\ds"F+=tf3>j=^G`&$u9*A6Te=kZ)8oaj$mACm27Mr4C4sl,/NH
%AO\4\R&J^b127J1,JP:AbIM$oE)qc.@%d]uUrJqB__+'i<"UP-&`ta!A:)a_SB75ega7-pKNJAbbAkh$7/F:?Hf^IbmLk/U]8h,#
%mTQj&`K)Fb_XCHV7o4;]@(b<cC/,9ZX/c_b3-;M#$jZadGm]nh2af$d712IkHj<(D]-#N,/Ym[1Nsn419_/Ym>Z4J$Z^b(:dn'_"
%FU"<aJ0#;.MN2uK]h^RJ5TCc#Q:9PGKo9Z__$Z5*h'rh@>Q%*'hkWK0A+*rB644"u"U=m68:^aT_R0q^$pU-^`.kjGN+/GflOu@X
%"XoK*KcT8?Lji(-&ji@chK\50h]i69B*,/9!tq8n_)*p;O;YGB:4a@O)/)Fa*&4/-<:\W_:F14_5#A(5S4VR4[".Mn$&"X8^,MhA
%7%":s10!;5dt`lt"C35W"WRd\,MYkE*roY\jVEKbWH8CEA'93>OX@k5p\XW("dIo8\[)W$E9urIL'CQ$h\_46<$pE0RX@)/$LD&d
%Abjgq_\!Am$8A\-XHG/_]MPj))aC0:?3IF2_B&@?g\uBciW&c%DKs")IJqc,g5sd8^DlC)D&R<?fnPUkQ%eU66*_(;']Z"V[2>%O
%1G2!#&@+m:]/gD/LLL#o?<Z<K8,L%,qH4\>0\.Ueb27$nXp0DjKPCfWi**?8Jnt:qD/^mYf8-O:Bs\%O+ZT;K._n\_mZ2Xu_)WgK
%$B38.K"e5Sc=$\T9T++TdkA^UnCE&kCI7nu3Z`i^BUbm7F#/N!hR<Z+-%K0cV&W=sN*D9nUIM&0*&-Mb*4dr1>!jkCPLI?%D2eNl
%%g>/BLQL55+ABSbQ"V'@j)P5(eN61U&G-)&J<:cES$Wf9^O-Jq6*Ys<NdU7-gofb&XBl%tJa4`AVNl.I'aT^RPn5POB;/sr:bKS5
%Y%RA//h2N#.:\lp0(;E7lcPsn---Vj:@N&KK?YsjkaELI77A3OREoX_ZM8f4ak\o^cKY1>;Ks1K&\ajuHg/p5mQae"67<)?&!s,0
%FdE3<;Se_om<g8s%ca7_1AZ^Q@1QLaO=!CXY!>("+t5[,,mt@X3=lMt$'>L-a&pDPr;kU>m].8e?ri.>PI1pfFYKnRStg0t!IY-'
%Kt!d=I2np?Yc77NTRA>0H3_QJdqtea9O+IhR'@&2S[*Y+4HlIZ\.p?#A]Y!'cBsZknJ1Dab\Wdm+B#k3e<nD'@g0O`]R]Nd@0=ph
%(U5:lL.[T3].m[q-V6$t,VD.DTRZ*8Z2?D.7IU^2<_QK`>pZ(!2m>!&=+S%+(5/pm6bpj'U'e,"DQV8f$Q(kQ=s/,NXp%s/X9FrU
%CV^A,*],%G]LOLWMT9Znkdh>+!AC6rkD\MQVBcmSY6V)U7N"\LZi\@*%3BUN9eV<*_,nI[QEUIh[I5[]qj9+AE?XK;1!N,8'HkR4
%>Eicjf]cN.,qN-S0;buq9JO$"j+WlUXMWTM`cDfa^_)dbmu5rUF>%5b-nQn3.2-;P9fYCiZeP,W:eo@FEdHb4ibs!*fZ<oDq7WMP
%F!skeIQ@TFSG1Sj&2:q76J-o;:@NK\3Kn+"E*Pp8$CN<],?*!VEJBrD&2f,W/&6p3'+!1o@]pk"@"GL%d^CGId<p*];S\VNP3ZB_
%>._.^iPQ.E5Q$,<LI2](^IVf"NUcu)s,q*h1;(C$TAf`%);Z?F!:+@g'iW8lVri\PqNE"j2"H_ko2@R`B,YDf"s=s=6_FB>5X4L3
%RkAJS&ODVZ)cmd',mLX2J%7Gh^<&N-0F[h4H_glK2b#]=>]SW#mTR(=3FDe*QQ`;;,N#*sQ15c^X)Yt\-XLqBLg85hL'X*"iX*VV
%k)Y`\TOeI$$Cl$knGsGd^U?^G<k5SaEC!IsG^HiJmkAcn]R]eWV%XFf**tnbG9oKdFKL]jDTouFj^dIY;G;=-obA0DE\i$<r4D`1
%GYo5'4%Is3#ZS_+#@197&^C]nChjl4>I@D\;f)$g><+4#Y7C1N#__h%D9Mb9#jCsb@GEnOP)r5.eh-P.X<)[QCFncO=59HefZ#@'
%WS%ag,-jV(5I]K.;7Z,r*YYddE[1)(p='F@%;`sIM+;2nT;CHO>Z*s=X*GW4\6'u=HOM4@":Cf^)Ta1^F#*LjBFNb&?aP\s^7iPq
%"aU:^5V4^rMKHM>o\m_K_UjDFe7F#QkO4!#f%$)JhaUB6oqT7T85='LP9I7CMcsi+)??)C>$'ePC->cgA)\*T3m]QcP9B&0`MVhr
%iO-KdrKRTeLYMMM7X%.\4-DFN/le$:OZdbbJQ]->C7LfX3&>r(9oKP@hRq[%"k[7$lThttrOKB9c#lDW4K*dPI\4jE\I+st6*-sb
%bBPcHlt/3goGE=aJj-=>ndfpI\,us6G1IRfER=oWWPIMT307Z_^p?>[)F#Ob^Ob$LZa2R*d]15e\iQCc0hK=n?jVFB^MC!Mi@O=^
%!rQ+OBG2!EO4SZP+]J-hP2F/Mra"RD7j]43WeaXV5[a%$Mqk1W@Mm'`Kd80""'\$ZVAkrA`+D"IeKD1aT=8T1Wf$GaaP]66RAn<-
%*2T#GPE6m@Y^oE<a!m5nP"%-aAYeAeTi+T.1-\#S=Srp?54W8>p4X-RD_obXaC+MgAPsiV.Z+Er"*kSF.Gl-BC\&."Xs.&pSX+26
%CRsWXI!=`SKa+&SGhJ@o\d=5!\o(!G(]o[=Kc6)-V'#X%);eDqp'QaelBR]-J8MU75HCmm<YXt,OZuh1A>A$#6EQkC9i_imY>mb#
%,sHtaC^FdlU'`WNk>k9obK+,q4LB<<<b>D\[64+\F;A87hrmqGaG,K=Su'FTiuF>(%?1hIES`S!@k59?5@km%KQ3sKh>(g+L`U4H
%a](i/2ulO3<2[o9$oajueed.UO;`l;eU6Gp,e5,7,7m+oL"+QOi#%<rZP1p-O2?6>mX(uAY`Y'rX4`T_:6;%&]PTVZOR(irQ-Woa
%:PK]3/D#%f:e>Ncguo8:bnK4qneJRpJ/`W7FL8tD3/6un"B,WD_*Dgo=12+g5M8K1.L@W"AXn8nW?pf3d""hCf@kuNS2Pi_MSI'(
%?\BI3jH?lnZJa2N*uZY&m'A9)i:OhVj,$-o9oX0<^F00-F#LMS6#"dl9/9tX0$2)[TbbuWbM>#Z^j&#S+[qWtKB:h=A]Yu>i5NuD
%_1=/T7,_-V7jHs%kW[6@_NJPl)gA7_%:KO.B&k:l'JN-.g[7p2<Zp7Q9m:g!O]pmY'j)fsG_mBI^uJ6n9&+*I$7JR0@/Ff,?ei-\
%@op<mB3-UQ?m,]\nZ.X0Q^^j#<j_T0S=a1t@#3`X4/V5I)@J5G)Ocn:,=!G`IM#tU9<2g#n&1l)[GBBI[_"'uO$cW&Ft8cUK4R>3
%]$*MJ=]ZY.+ED:K.*5tEj"f8n/LL`VP]i<ho*V>9Uotc>@itP6kgC&mMT*Z/=Qf2B?RKTJqOu`8n7l2PHJ;"WneUu%iKd<h<1sll
%S+s69rf2h0Z<!dkTo\5Z?#&U_@jQUpPD+clEm!u)+jcP?91q(=16At/cQNGA%N'D>OJR=9n2?V'6_41W&@Tj54n0ph0VD3)APq^r
%QF8njO>uiC'qGYhUuJ*@6$F?AbfVY,[\ZQtH.E,-/i_R7[W0q(mop!F%9*g]IBrJ`06(fa:NFT),FPIul=7>XRf`\E?+BB8_=?]X
%C1>t@`'\a^s/nQ1F"t`I;73I"b\Q*Pgq&Gj@iYU[`(j`k+NX,qHS`HS"D2<:A!))$Ws6/I7G^d9BP>1nr>NRa0SlY9VN+OTFX%QR
%5rX]V!oO\C,i$CAbC\;AmV=0\e.OD8'#<bK+!soXnkdj])kI']U`C`+E/o1$lg!StBR5SBgO*h,`tnSW_J@\k&6M!.C;LNf3UE"F
%nB*Cek`.\Ve*sOp(*FOKAFpj<7Y4Y3GI>_lR`D'j\9p#Gd:/ed^nC5LJ=#Tud!du/Irr%CcsJJ"e5lOJ;t!8#L=Wc8r9=OlMt<$_
%"%;`^0BN\l!`b(7q,csHPhO'@<)*AbNCN`@fYr3-9RjG@YZYSs^I[>_<Q:11K;4PL;[g-Fi>F!QTKe5?jD-7UkAUc6Q?Cj<UruCH
%6LOABH27q8p/R177YE>=EG=pJF3<kMPhj#?(6m3qX<o-!HBk(*MA!%KQWK](d#XH'T0STHls'`JG8l7&&6j^>'SQN.Jlga\(:dO@
%)c&We3]VCom'n^4`\ACY&Ra$+m2E+l(MeuZ6p&/*a.Ja$m`s&VCXl[5^r_Y;2&#$T`.HC4o;#%(=mANn;2X^,*.?@_i\_,I5`m"T
%O!6PCpI!.DQq?/e=R(prTpMVjbSOXiM;r,FNVnYfL+#c9>MCY<VNm@4,-HmgZEgem4+lNI[/YkK$%fX;@)^(.jDZHbC+W\1)V;tt
%\klNte;L9/'te58:A#04aW#L\U?ZN\,m.!O920+hDot^@:jG(a[X,\GnP_+=R<A8%PDcVpUT^sAlp<-n"-2s2O"0HIe.A<G5D^;Y
%#;r:bRha&$'^/!qon+.i1ehhBM1UgrmZJ;.MCj.92HB/:`Wpu,g@jAW[Kb5&1NGlqLtqT6K]j#&AQr1Zr^_\b/SGJ<a"S/a)B7c*
%q2+0(8\?Z9R8%uBUu**U0#eB](Pe:pf#\R#:6*DMg9D>0eI#*STqM?0Q'69YX_gWlRIgt*[N=,l8FEp@17@;VE3$)'HarS1WIE:7
%9L)o?$E'N;;5^q5h.;\u;Uqc`k%g]jSA]AJm[j18!#s;Xk(Up@3R^45X!!85_GoQB.3fnb_WM]!/0>Ot$ZW!YVS(np`2<3Z<Fc98
%FRegU4f\(`eYiW3o379&DcuP16Y"$:Q6Q?#r'DX;9Oti#Zb_Wi*[g9uGD6*/4hr"s%B@I=7/4;O`ur6;j)#]R)`_jY$gENa1d[_c
%TgdbPR(WRdTm)6!V*Q,'B;2LXW,`=FaNA4,#p<Y(#C4c@YK3,5B@.)A%EB);Lc:'N#Um>j%bsqS]A83O]mEt@4[*+o-KFp$QT=qU
%i)G3FX(p-N6i@GkfHRN!;>7.@VDtf/_9u76E>Tf##)lHT62f$8_7UV67u+shFc:QN]uP+\=]M9VC6KVQ`lpnt(O#V51.dG?bs2r]
%8J8?nf9uWLV$_77!PJ@GlUgWpO6%,s#$>;GEiNgt\:d@+g;8dP<pC3T(%tT%MN0[\n*617YS?m2Y6Qm`(sT/'lsQ9jU%F;$F.EWo
%I4\KuaAR>>-+1M&e[46+XHD6ZC&F4^f/jNX^Th=!rBEsKs40j:-VQaD-_C<S^9Dn)2OudAoFQ$_L<jgu!pL]]2&ZG6DZ?fg+ZEnk
%7e;tBAnRn/rN66:#o$/p\hL-q<YKK^XeOVR)>WCF;]>f_<8pC..;\&n5W?hY!=GfQ";oKbF<eN6,04FBnR`V"^"G0nju95F;$1g*
%9FoHL7"UF"gZ#-`'TH@;[,ckHC+UbCF9]8)[hbQ;f!N=?=jq=UDOI"g_f3Wj[0B[c*#>ttK7=g.&DIXd*IAXrqqE?('g]370j:R_
%Ar%CQ18572+,>7Ll's?\5[,l_5%q)52`?`YAc*HIa`Ys@F996s\aL,C?aRI\ii[1NP)M:_qoC34/Hst[WbT1"g'Ha>:p:4$6kQTQ
%J.r[cFb0EGkFJ6rYXYgt7<0,Rc4UN/d?IT1q?W?HS.<o1S8<"ZD)\#b=LAb3?G('bF:8-Z/Z==G!&KM-*4m2gI=s)GDHODl?3f)]
%3\)nqr3"F#/a#iGc)`e-ddbG8pYm3dZCIX7CL<u"9Te"tn1WC@A^'H4,QEIEhI#i#5ha)]i@rk5HR$&Nk8$t1*>78_<OhOVQ91B*
%W5d=k6W1Jte>E8J<D8)dIF8=PMES+fJTL0r]#^DX7;t6ae.,;Z,,95oBAhug*pPdlG^%h[`,;M+iFs#.h+\([0=2cWaB46dW8!\0
%`n+432St(#)O"d(5Fft;gZ-A6qIT.7PHuf#"e8tFDTcsEWUE@5`Z\I"GQ8c9-&Sk;EOdnYYo-QiRP,?7.E0`.._\K72[/(2Q(.1_
%oPVJ1L1u=r'J\</kU%ju%.I_IlbJ`njDY!!<T`BZ9o%M^_Ih01_ZLgU*/M?p"@@@Yf.ZqHD@?dhE%1](&b,aqanO4P?iR?gQ5Dpo
%/4R&cA%&Er'`>GlO?eH\`PUOV\[sM4j^^iu"_IkE47Rh$<n(uEY9DouPM^3oIR`S!c[RXGrhI'fB-pceDAii+Emk=,aduK@!h<9i
%CfahY?rMN\(JXlMGQ=)6_0&=iMI8k<VAlQK_GreZVUKmERTEm%6)D;.da1ZS#3pEC-G(oE%:!*OGL&uX/XueQo);A,H7Dq%?E)t4
%#XGb1f,/G=L/g`7F,=%7+Im;@BlNo(/NY]<&6!2L$hVj,m!3H9!s``,Y?I[rSIOV&jq"Z?pe:l6dMgJiqp/_FKU7eED0S&NT%DXe
%V_ICT24[eLRis>7ScDaqA\9Z7GZ5+k+Q_6r92aJ9%l\BQE+PrA'%_/oFW3n-A^&6/_p\?a?o`e0*\>g,-M`J<>fG&M8S^L#)NK:'
%o`CEQ`?hSYG4(9Q..[W;RU/^CaA`<"+CZI-PdjNKXHR22fiP^inE^":XT1d/X.IW^7iddkRht2]*OkK90>)KM'dMSG+*aoOM,Y>B
%b$ft"OV;LKe-&Fh#$@V[^?E9F7"k^o1:4E+a9Pb*L?`D(e>UNgKP<:Z,8b[0_1(uY7`.M@T$o^)Y>5da?m%GJ<?mpEP%q%)m"gQ+
%F\$mP:3KS,^-]^Y(A"O\O/.E`K)\(.p.4Y#egEIfQW.50,MDQtVf<d4nD/Et+4,dng(^PO#EC][7P8_.lS>'-Idq-7n1>Q`5_;$E
%FfkFLAtgT@;mD039K)&/QZdG@4.@Q!<^[d:.Ct2YqrH?I90^GJqCH-OkV%p2ZNnM>RP6EqB[K>%E^HEr)OV&R]C%Ya$9B&srR*aq
%5>.UAMQ](([EP.)pu^n<J%s&K"3q:i[=4;m<'*F3@'WI`E$[C\c@XXlW.Q%@'NJ3H,fLLO6F@p@!2\Oj>"=A3\j4J'5J.1I)6IG)
%#qa9@qQ#R/+:%&T\op!s,nupU0V+:+X$.R5LK^AlJ@Zbq%tIYHGbZnX_2&:^D%i40e6(IOqq1\[9o$lc#*s$o&&HnSQS%]r^%&-a
%Mf?\Sd-=8NJ*6%ko01ki7gJnY$3W1:>[MV_,;19:):rt0lnb]2Xb!nR2tb3:Y8<.;19XYrVR4>+0j#+r5o-u1`HZ30Af(jc@mi+2
%]K/&P&G,p%1FeNE'S/(LVI/5,kC;H!ruG8_KSi%$D$(9^.P<ZQA;(!i`E=oh$aKY$(X6)?^epH,;9qZG2UL0NZRUh2&2.m!AL`\.
%I,!'c);mEuAMSs<&e=2jShal_oF%MoN5?^pNC<itScE<5)m=`2U_Od"rm:]+ZGQL$NR3;%n\@JB3V`1;'0+m2*Qu^l)7]&ZguF)j
%!#VeLScn`2H9!Hf^b_[A-9\<*iUm"O/c)Xf%sL-J59d1\U/$#1OEc=Mo2j1p6%.lLU+aNg5]d`E.T'9OPjfiYaTTB^7Y!g=!AbuQ
%a?!>L39u-0QPK7#n$HYBSAP=`j#j^W["O2cWXV@<:/%;t97p>r`;M0V<Wl<Y.$.OA^rSBI.hSgqCW28_=]o;'cFch)-<;]FIA/Vo
%+E+>Z%HHQpldq<4n;/s4@NeaL]G[^O."pm"EH//P`A6BN$tJ7<[>tDP"24iW[r!/,+XdaH+(`^d,g^1\gf2Y*gWH^;6J+PSdD[cZ
%K4T05'%)SESgn(I]g:U%Y+YhG,='X5mD*nBoX]&&2*DWT8sujoaQPL'"QbW^K4GFVFMb>);CFCsmWpiY?ugg!WD._6!(UrVDHn^e
%@[)N(E"3-n<O`iU%C_I84TSm[^;>[[3\7tBI5c1R#5G)8jVnFLN\#S<4WH_^!.;Ht)&%pp:;DM06=k2ULdPSX&KLYfi.JVR9O1*m
%!dnT1CJg:k00iFW4cD;CJih6&qkbf43J_qp)Xrp?P(<^jOn>`"M4?H6qJLT]O5NV9V,5J8RjA(4ZoL5hGIdb+k;N/.4\iQfHK(4e
%O`dUS\QAY2/)-E%!X6tuhcXC1<3R]4'V#.-H[3IT:J?eF@Ci7F4"\J<0J"pm2Xp=BW9'.1ah,P\h'>YVP/YBGl27^[[2TYCgIJkM
%;P4ZEg-PKaN1">-D5]2@[ADL4ahtCUFiJF[ec`g"Xrs*O*Sl^AT,cNl\XfV:WW3n5cH5:4=sIf;@+[_=2Y@iSjeijl[[U8b%rJpU
%o(?O>m$EM'Z].B.9U8/?(!unhL[GEV^lgZ,!Bh=u>=VRHWl<<f8`c<p:8eQ)or+`\N)`XOi=47]*R8Z!Jo,@Kdp>8J'Z\cR>'t+j
%BVi>-8Z8$8KcCe1T3o>']+a1Q1Aj*EiAJ7Hp&Fm7bHCkDJ1-?a=T&e0[58WugI2#KRWb'=,h$gTJed=?a2cG9-`G.mD2Gpl(T#/U
%Y])SlO2>,h+&+3F?^1Fs&IFCgecH:7SIFp2/?ei!*r(6t4k>6>A>unLl#ojZ&b1kG=Kq7R!#DYL8MZ%51$[UY0E>aKaJM6PV]ECP
%[QGC*d731@.amh<7nX%XC&!^!%n>UeCP-fDU=,`d!g-j&or4#_fh68&,B$_PK]XUS&d;A])\8jJ9h!&0$:PieDUo,-H1a\NR.]6:
%9gCl#J+Aqh$aKO!^Z_]`-nech#(K?O4_l4s4Kf4fmTlQKLc#:MHgRY![,temKesjX30_8_/e'B;%RiX%(fU-KZlD`O#&(c\^lsq:
%r*VmZ<0j]F-%Hjg//tHu3EF(/Bamt9J$uU^Pn7Ms"?E]1P`$!$edAi*b)$gX6]S`*XsB7ai/%X77b'IIXli2IgL\Baa%0M?=\@3A
%og)7-/o9g$Nd1T3,4\o\]`)ZpdMm.p#jtQHmsSh2o[u/n`=MNFdi4lOjOVrR>p@=jRcc@;=k6l/_0BZ?cacrg<5J@(A,5%fRag4.
%*XT?%>,]2(Ms<^!%NE-e#6th+>PV2Kf1%dBaMY2XL[.?3QZ%j#r)RuKcf?)?F;5gR?hX&IN?o(E/2s-=ei*PN8iPAK25r\MFX?[)
%\-+nbi#rREr^1MV_.HCdi?NkHXJm.qL&c]\,3/=OP9g4\3/:55eBT,X[_i..>K]6Td"?s?ri4ttX=)IJ&gA0:r!#qL+Bsl&Yd-Y`
%f::m=[;G]j^e19-WiBFGCc_(SQ.-2n<i93AbA7#%T'F)!Ot@LB+HAOBM7AL7<eNq3G$4JnOGli%(5Y1?-t(ajKJ>P<>^TP.g3sC>
%0Q8#.jjuUQU(2Wt;tY9=U0g/l9R[mkk8=-Bi,_uQHe[5>PuWK$;.3ojk2lVe^4k/apg?CJ+Q,q:eR94$ngD-L,ZOuh=b`7Y!0WZd
%>G.fYMq4l>ep2)Mp\+]kB.h@L<N(L0mNas90JX7eV>sR0dK`mOR"kkB\Aq[RfcMk%.E:9lYXJ1/JJr0%NVqr'XPJ+>-A2T<`,3J!
%_K[2Qgq3VE.ico&Xb7)b%b#7'+`3ioVTEUW]ONc=Vn@R)5L8F$^0&u6PgVO(1[cUm,3mC:Sm1?^!WNWgc$Ck<nYn%oZrqIb)7_.0
%IQ>q4Zm_#&hJsGb\nERC7PWX"9+mkL'U[D&Xo$:#C'_@RQ0r\K1f)nfGVN3@-S:sYq*\?]oFb2jIL=+HD[0F.@L+uZ'&/!4Q1/PE
%MnaTUJ2Zd*Y&"=E\*`2nC1)SGGrIC*ZTYbB@jCsnY1jB"@rF$j"nAI3B;GFRQb9+'\;&eNXH-V19?*>O].]KCjmkF4E?N6`9CW]=
%NMlHDB2-O?*7`sb1oZNcoEF_P75[QF*F3ITCh?qrMl2f"&6W<D67(+NOC38<.9OMoJpPip8'QKq`R-/_;2acPj"*]8q--V;4>u+>
%GL>;IQWC(N8Xd&7.ng=$\rt#dh;s$L&SIQJ.n*Csakuc&87h?u65GO_<]OOS,bff<R5gg4l;?.k>kS'#,.5KZ./A't$=%ieVSNTf
%8e`9;OG'cEW!WsB!0n:F@+Br@OtT$HKALg#YTdg)SnjM4o.s:RF&@Lu?G74$mSdHoX>qqMk<^AOAa2i6B$G_,ZPQ\I!PlY^Z\@9e
%J/C$ff>t6s1+8kTjOr$+aDJJ$9(M612E&Cbl&IOb=@$NOL;.q2`>peeI6Y*h0h!1d`s^44\c(=L\G@O'ogaE^m\hDZS5!d[p^]WQ
%%;M]U3)QA3&fP<],g(ul*-^=Z<C6_,i3)mun;b>sKC*o6q;NX?:&?Cfcd[O(jWg]*p;X`BrpHE%YWhnF'=6\p(1\sUeYA:R^^X`N
%(tSPET\iDh(&L_aQ\jc-ql"#8]_s#kC,+;-Op'SAC^g;%*Khg^>U\pcK^*?;[[(nki]3@0G1Wo@IZa;E!7^UR"1$^@9G695f6Ptd
%Z?r,C'3rK8j/juloDV(>gI5E"9/HMBB,"Kt]HZZ]TopMgZqd`iASSo[;X:GRC@7EWC;mi$2p:a.mu8_"RPQ"Xo,4Q_`#:kgH"QIk
%`NKsq>Fb!\_a>dRAG;%F16PPI"\B^4'ZWCK0`\@L!B,^j7DcM#<O'NC\F(-O(5jB?CZi9&Ge;SG(2KXmJ/YiQR'52.g9fGl=\Qd9
%HH(7I0FtW=kgYEs6OZEk-GWDJ,D\uXr8^Msr[DQR+!*ssYD\?mGM:Y3jmt^DV_DWj,cIdUU?7.5Yn(aC<=cnZ\jeSYJ_9_=i1^)t
%HXB%RW?+!Mn,1\I;$,=M>=!%^MQb(_qAu9uHU4e8XN:_KO^/4I%0fp,6DW&W/#So1W$q_jdPc]P&NiDfN*J.d+<arN$3"]Z5MMmd
%`!39hHhp/Inm'Cu1I914cN1K`?YP&PmIQf#qFt@F+uH"UIid/<j-/]Wjo"rc\XXMF3$NTBN^FQC-"t40FL-u?<fUfr6VU"mR_b.:
%#h*6?"=$="O/?>[G"5,J.MJi?htG.+H/SS!16T8sLJ4NXKKpPRS<QPmKj&W9NdLHW/I3,tSq)/Nfq+u*!-osg/]\iBL07YDKj2Y\
%\.iRM/G:DNiKtp+84<e1P+AkL-\u."hgL*hBB9CQ8I5#(U?QDVV'E(d-RUqgc6[Qh7Cgoli)VN2\>_E1b2!r2bsnj[YWJkgMt/>i
%+0!2fe/PG-E8>RDJsu%B&f?SfYZ(jXD'?YfTlWAq[Ai,G3E:<N+i&WYJj]M]ogPe$:V^j@J+5ScQ>jA]&+l[i6ASsN.`)U9/>6`l
%=DR=E=l?+[O#UR6e4#hqFLgcFbP0Mlhl.su[i8@tD5+ePelNjl1>R?eUf=tK*cXpTa*0o<<pY/M>P.S3dOG[ep,N04kMI:fn_jKc
%$U\/2TCDpcHFb)K8B=l$(r[?tE(S\&1d>_a.%=d<7A^OQleg`,*Y'X=f/B:'f^g-1[pS%jmdFSQoAqR3IsubCX$oC8GU)^oQXt(?
%FY8XA*inR0VC]8pcNA#u'IRZ@%P!kH>7:qG'qfnQ'N?MOLPdjS[O5W_8]#^0F,@g$:d0nTgILdo1$JiH.T`$MM$,5oWji/h(K]2P
%]hH/teUa.=Uk$X$oe`ThpPsU(U$8.LC^U]flS;NFIBAmaW5sOY<53Ij!iIpV;`?@?dZ5uf\n[n@=!)>*0i#tl#E,>rfd0CX3IYZ8
%VuCuA;@+%0,qc`&PgNiLD5>K?<gY?[;)#O?..Eoe,tV'Wl7aUe=tVMEd))e6I)af@#]M;0W@AXYG*J_WKG:2:1@LhU7:6E<XOe&l
%ENsF5Efd9#G^mYhe>!kWTE*O>h1R7<9hRW"<#k=1gED8[i%&OiQjUVf&2djF:#'T#JUCNqo?^0,mJ6b37E%]5*#68iIC1r!F_>8A
%!L%"l[;!R0o#GVm*AEB&Fp1\e2ghqH4t5e`Ll-uPlA$h;Qo9Z41osus68!.fLs@\ia;>fi='8,Sca`fl`JC/Y)'`3IpKGgCN.K.Q
%oK.(1ZB01NF",P7TW)OmW&NX3&2"HciTN5Mr$rb,hc<O4qY+A9VFs$B(jiqjUpe2kH)urg%\<Fr8Q0J_q"S8Hf8#ro%laVo8HM[$
%R5r*7\q't1!nh+pS@iu^-1%.TpF?Qe?AmO;;d#Sc?)>_r9VjP*.N2l^NY)HT?EH#[W!%J'DUPnXE0\R5CElt6EfM>UAD8IuJLSY+
%-ZEHBJQY.ORFCfA<HB.i5(ND6;D6:u4B51gN"79^.B8@:N@<3>3P3FhCqOujnBt`@+GZq'!)6((d@4F"%&pTu#S4!GF[XpM1=DY`
%DX[/sorAR!^st$%D0NHk;iNS-d+QeZ1H]Y`?KH).3e5.hG'SF^GpiRoC-,I.rWkNe.8)0sWP;ljfh(GpXY+B(&7A]B]s>3r.:q[2
%,U#9JNO(&ggo2*V4;pkO>Cn92LX4+J!9.@lfsKh0:_nK"f":u2e&q`\Xbu*(pZp:TZf:>>K[5BOmA?GSL^;I[.[:@>?&W(\P'c(c
%:Mot-=`nu@C(f$"obsK;%]c(aki\\37"TIeLb,,qRSX2'@uc(f29X:#nUlP+YWAi0eKd2^41Qt5=EMSY/kJOTh>9/U6`_QscD.Zm
%8*u$T\L.WjB1&q6*$APUfNC7A-%"0b)X=l5!Xdo;QVA4k"GUOs=XbY`VAbLh'[f?Q4Z2O%n+TdsJ'N0K%NkurJ4&HBO;)*l0oOsJ
%)"T(0hh^6W\Q.9B!(6YiA^spRO?@K&!0R=a*1Hp@5A1j`MA"U&hEK(@'*V<5&nL]S]_$,l"8lR"jWje-rBNjV%6mme/X(6I"+"*,
%j^QE3#<aPoF]c8,$A&JGF?#O6iQ\[4mON5Y6Rrh>U;kCf2\h+,I`$s+rMn0nKX*3@X$3DH\sOM:<%M[MSD@\Wj=1)'1un43R_]<4
%qo>i_iPZ'W>(45tlNgHlSCTqEbH_iE(OY1aIM:Wil(jJEh0Y4r[JG,JCH4qBF64[=K&3]<Vqu[`[eF.n5^&ggT[LM'9S'!:N%qDC
%Ojf0)`uA$qd7'q@eB4]_0'.mK)/Y18Q=&T\m;U_te[M3F@bac*H7BPL\HDr][?+'>l8@]n=IYW9##[/j8[UG3^Un>kSAl&f*!,XN
%GKY6g8RG@0@)LEW>;a!jptf$)!Kc!@9W$LO5Bj6<6WV?JdZ";<SYiDmFh(6SVI&i0^<W;)'K^=N/5F]?Ibie[?6YPVqW+XIrl"SN
%n)*obl&Kdn0`*'9!Vt*4]j\nL<Ws^J/TodnQ:%;oa4:B*;oZ<s.1LCff\%(pK?SpHA'*Ld+(>pUIWHYYk*,4#5AP$h#ml58M"1Xh
%mTUupKh!D6*]#h]gM/Hi=OdJsX)^@s=KP2?)8p40Caf#c(S\O'S4IZJ\SW0:%2uOPpESebeqNC(Ht8]F3A%[QZW:7G)\05/W2#>n
%;C_"8h4OT-HeF9@l=a/6."0noI&I#LA0[+s"D^-t7D]r+O4T%F7dc<`b^!iXoQX=.)/p9Eb$jTNWuZ;jjtYDr'fUf2<N+P?G@Y%'
%P\$FkCg3$uhZ4ibrVZ]IhRBT=E[=l6$gJi%,_lEtr>8RBWhCT/C/?0he-NJ'DGXjYb!qBi^3i)fcT,u3pD%[HH+Qrs131M8\GLa/
%2I!V+lagB^bAi!FDkQ!"j8@GqB*D9Z6gF@Ph''[p?&0%Y8gJR3F<<]W5Y3k#Gr#M?"l_rZLk,`UN[mX=TP"cZ`^LGJC(UZ'80cNJ
%*;QK014QH<5IW9N_b7%&@\S(?=q\S(n6oJHUsD:_n/7]FTWg-%h1Z2A?6J;[[M'#1)/,*Xmd5r>k2hD0BoL(4if;7O2*$RG!G&<%
%_\@P>2Jbb2.Qf9JTGE7T9<cH5Y^iZE86s]g$CipJ(5i+)@@h%@As=7sfl8Do_r,@3'=qVD>qS6pbN7pTa47(Acb:Z?pjOJOrI#r>
%njjt^jEqn;S?k`E@aX,V_/h&&8YWHUBtQ6<kWkDg$"LTIl_g^80VZSoj`(V-.s,**$aZBiJC!b,U:a+;MQ`1"cJP\S`=BZk8tC3#
%;_\YkQX='1hVQ,'1BYWf5$#a`R(*72jQpqW0S0:J'TW[Cko4F<$?a-Z%p9s<[?7.cC!)q^rb=5(L[a=jLM@Y>V9+[C$Sk4)Wgm#O
%Cg![[Z74Z4ESqi56.H9<R6jf9"GD(2%bg*"N;>j\MQ,X7),9@J54OY7hb;^J0F%>:/(1],:Qn83+WQ@^O]`BFYUMI\HVZ\]8*;OC
%p`5+.SaP5*K.OpLi>n%SMAMu[V2k=`$Xu=OnACXGd$TQ>jgIj10I$$%I[EH7I<H;H&g6\s'Ln/MLWMXbleXNg4!Hg%JPh0cHqpM%
%6fHKMCsWqnY:'R#]IB$d>=8j:?iM?UMo.Y>QA3/B_WEM!<RAGq"V!@F330Du1Q69>$Q`P*dPtKOcRC/VmfmMX5U;dD)8$]s$+BD$
%7.RM>hg\tMs3>KZ)MSS4UmIr;Pd6f1=.ptX.@LKG%3%%"2jD:>);K>]EXj@.$X+<ug:gb@.5?IN>VZTCqa:)N%rTG@Z<EUVN&>ph
%119mcPJ'X=%6!unmT[^d$`E^2\Qk#B!1E)IgG/SE<9eGfCJe9^?WD'fs$)L*6S*.r'kX##Xq4fG#s;J%E"Xj'-<J>j/J(4S']N:n
%)5UghKlHSq>Pkj+5Jg.jC.%'?jrdoLPZQO4E^O.8FkAiS<OL2\6u].t5$sRV!S-V:!rA0kKKts5:Pb^A]IQ[-k+C+eY0o"MYC0"l
%8f<o)T\f;(h2=^(JTgh^!3OL/(P2n9Ml$?#2FLE(+64\1:+T=r4!D0EkZCQFTSg"i@F?S>ZDhCr6?+g/M8W30.cOH0Q%%CEV._:#
%'7825ceA'Z4k._J]R2l,;g_JQD<>`,-m=nJ'SMF!*];p`+o(73Sn+M!;]K3KdlD,3+pa=,-n:W.5d_MF<.4l_P-4k`)P8<s2m8^p
%dg*fi]OXL$YMp2n?=-3h2h%s(f'fBL.cm:^UjJo3ol^gF<&-BX!XCpW%.aLr\gGd6A(H_jFg[^I\nfg)-[uhL/]6"n'RQ?K1qs*'
%,n9!cB@[*g.ZheF".IDd46U-NegR;\7Vrd`+i!,h$N#HQ@&j):g%ij2?]=7Mc*c0(i$WtjGAX&pl>B#0-'$.UZbU7#1/k[W^>'qI
%NV%-TfKL<=<i@Z)$CU-Ol++`TKjdJN,)C/UD3n1@CaGi40rtHU:3RXo0'C'Hat+[oE&SSNlFW^;PD^Gl<3*ZLo"2X33eW1GRcSe[
%"B("(@!QDk(_u![]>%9]G+FrYIbabC<LFP0!m%HG65';aAW9DkB6NnS:s&AEF?WCQ(d6PP@g8_dfgE)an[M3CnB%"25e)!,0$MaX
%,NST/?'>mh#er-;!eURZj`J0F`D>HXA1AIjOi:j@Kil+]=M[0B<PtT1$o<$0ZUR8Yn:gsS%7i1p`p"9,Pq*E7P[Rt,J2X1gL4@cA
%mlqlHs.[X9-085e+TZM:H(q=pM5k-#NDLa;l[tO1EBB46]\Zk.1Ftr"nt>lPI54HDM<5g7HAEm43:PGP5fbW>WB+V5FJ5e`Fsoc<
%R"3a+VcEp6h>*"DJI>J<"lo]?'#-Kg:"=jg@hf#trRF=2XfhPZY990rlG%[kRjb,(9H;63D%,GS'&kH"G+CfS-<1lrNE=gor`\HS
%!P4bg333p;eaRcGo_*0V$K7hXn#qbMZ>``V(Jk7[[0*C_Cs4Nr<X2!TmXqnu?uV'cXAoB<!N_g(:ree`0ipG.rR)k1W/ld6eY?"/
%fdmEPA8Jj.]j!4Z>eJHd@'NkR*,igQ""s8jSC!.E3YpjLM.$hV&j39k-c[0(-.;7fF<H50ea/_C,6(rXe89iPr>qQU4V@g+]nG*^
%l-\u5I0S_oAdhu^Eq+hD5[@=*VST%s?Jj:s-;p).9t#CLJMpB5W'PNOMHhl_E[.bf0'.!Y%nLC1PU-93C5]NuFou;6a*-4TRXadQ
%)&;0n\l&r%pEe7[ZUeG34h)A9BUQ'_L?j"Hd=0_&@47M2;6qND/O3le2jn3uRCNgr.ID>P3@#<p9*nK3<fdO/29,EgdgTug2;4ll
%Hcg69?8UWL.UrGOOjY0i(iND%b)8??k";hN8tDr.HlV/iU0n#f4+H3bFtCdpSTJ^BTm*X25r/CCS4d4!&M9?9c?jRER6-M"Fod.,
%%[LVA_FUD@$HV8%&JlfRKMQBu+uI.%-n['Sd_Q#)?`8:2)#HkYY0BaJH4T)2($ciTrS3dD-(i&=V>927+dhY">Z:?!d*jVdqROjn
%VD)TO+g!e5W2Vq.C[4sm:$8tB>SM_IM;_fG`<RHaN92*s<Q##?&I()Una/[U@IKLQgKu<SE^dT5VZf0RY1HtL]Z4n<RaXQAG!Icd
%\hZb%h,u(.jt.Z%KVM31@AC@$$Cq$6:6?!<>=BC]+o-s9D,#\o]'NQ`N_/QtK&")`B9>$c,YiJ(/S3Akmgq'^r8]K1nu12Id;q'f
%!dpL&XQ;cPo?2.2:H]8;H-.QcSSZ"WUeo8e!!eOiB.$;KC2!,Y&BalQrV79Cn2"\-k063"OTZFP>e.u=OLGK[G?@k>RoYPE5]uPe
%FHj"!!7YF(>?)M2)F[/uJWDr:4=SdK3@;&+k\7Wfc/^#^OaoX(XHuV(%te)ai!!]DX3`0t&m65X:t68]/nI?TV$VP<XOZ:8V?E<$
%0,T>\4,qV=hL^!f0mR?X!62^YgLI!)[m5fN`I?K+1fakko+pR*_TlL:\dC)RHq0'7;OY#'4AGRReMo[a)HFcCjq#TH".r%;eE+25
%(2=%Ac\VP1oL!"'(O/?TUCMLg0a`i=T9(CZ:-5eDnCUaMa&F)U1`\\2_sD8#?8$D>]hJ)IW%M(+SOF5,)IgFTI&6#)@FgI-6;Lr4
%!r@!!#9rmd`QNT^<+f4iSLD[8+;KV*\G\[DM.r+jT<Y-]E39[K--$WE!FG>^,l`F1Nt])^7!(]WF-A,$5Pn\C`^LCNcY3YWg*U<d
%,g8`8J6dOBpq4MA1':1KKOD9TX)_)*0arp*j#i16KNNp;cmmL@Ds%/"o?bYUfZZ#8C-m`+FR>h`pLr)8:C`pHDMIVCE^EfeaPTAi
%a9s*e@HYF!A=b<jkV$Q?$r$PuN>h0R_LV7^/PHj1muF)l`!-m$#-Jmfa0G\M@Duk;q>d(o#XgsP?AI#P5nh\$JDfo17#`8CH5t2k
%3'XjRj*6%Fda:=Ao,9o$!!;[W+ct)NW_eJ_IKg-8)b=aqOJW72jaae3aU4:9Z0q3E*,H$p[7Fp2j(2O#W1^d<$Aeg=Vg)K2Dln?C
%77f`hds%OVU43Y=`oAi(m4pHT%Qf,T5^Mo(_QBcNf:Q=ScgDf10)&C0'lijd@-)UKo3LBF&7Od)JW7IFe=@&76[V)Ki!q8/T7t&T
%m24nIqJ&FE+<@K>oH=*\JUflmUmsu!)o9/E-WJ56G+;E!$kJj8HTb`%@N=o/lo'E8"9M1:7p(2"><ukmJP6A**d^=4#Q@'gQk![W
%2(j&.N3![Q-O_&B5pr^ii1Z&uau_AN9"O99'Ct?e]quIVR[*Da020kkTh);o&WT:.CioYR+J&sV1EFNO7B<ej+tf*0YqEhT3YmZa
%=2F`P59QQs$OmA$rFRU,fR,`o=5tG5:\pZd+NRaG:'aDQ!;Rr^EX3nU5qZ&ZD>Vn5%]h1&i6kQO6#oKi+jNr1Lmg:Y*6)eb<)k:c
%<!GqB+2_POQO^<*dYXM0%V51K6G[;B+_7h^Cj:"OLt`.FdfPXNLF,#VAT?GYA-'C5JfeteUgpp"oJRGh?9L=:[Zm]i@Ts1UVZ8H%
%0gE[:ccVj9c^"UW//Yd`$siaTLTJ0@Muf-$/*PKb(i.sr957th-CW5),s;te,3(Up,snrP[HeElPVWlQ>H#qdW3LNF)_%C%<(]3/
%+J+Bm*&4JgXlMtRSCc[D5QiqHe4.>jc1/M2Hdn8o?e$e6Mh`8_:)FLS.q.$ZjTS<?KBl-YpJ:hZ)HTAri9Q$uXYnX__q8(DJUe3I
%j"QMH-WKh*bnYUW<ktN;"`a`SZ*K-.bfBm'U4t1EGe*`+(6=GQ%D40)4^lrZh7H[Z<["U*TS$kc<d5m>KBk-VU5FVt0TM#Di%lX(
%6jC]OW^nJT%b:qCc!U7u+$R&>4eO+uER8t'MKRH@Y?eX*c0qQ3RGVf!2G*JFa6mWGif1ERnMme8Y]Db.5QO%2/lmr.=o$)Kc,pV@
%%?V)d6Qk%]mp#5)[qs/93r760ed<q_e8/:s7':%t6WB9Kb_a&1g*gQ%m>=VG1WJ578[;gdkuR]hG$\2TVE5R$H""Ua-7[?b5UH^2
%03\/UA+>1TJ]FQTU%#ku)Y\JY:D;R/ORZj46@7-KaTojb&lOD`V,Dp(He9-^Q2=AVQk=;MAp\BbiU(0fYSXAdf5aAB,$d/nBAM^5
%DR4+?PX)4S_P8t&ebUDlfhbnQ#`Gg!6aDIq`2V-MNKgh;adYj;0WmM6?tl=Z]q19^p,XE3D/Gtj0D[DC[DSN(o,C]G@LoOTJW=U=
%GAM!D'&@LT"(E6<m/jOAmI/TPbc5TBAkbYJ<-$:<4.N@,HsB398+&4FKJiN1<N5'W<^5ERij[J`YF%6oe<)t8//p[oq1L&1Y2peh
%0m>OBYhamc3PZ+#76>\HEYl'JkGIdX7Zb3liR+#ebm3D]jXErcVC3Q28kB6C8gWJ:(eHi_J4<EV2<rPJl]Zm"'+7a.P`irP0p4le
%<5?jia4t//`b4/`N)iZXN13V%?#,s(26Mh@hK'$a!t2L7WXI9Jk/Z#OKsJ$I!mb`dT&8&S^!Nu*;nMp2)c`MWb^J&G:YN>tZR`gH
%l50RCjZ!$T7([tViK^i&G3J#'B5n,S<WQ(gMC/@'-EZ?a8CL&T&^?Au][!q*h(/Y\J_=0d/5N9HBIE1P>+C."OJ1N.Tpp[M+H!-B
%jW'*3l6j7-'"5\;XA3ZT)?`:<pu*<Y]/pGjq5WKH?XN42%9KjWgFJ-G#V`(o'VjO/*nIPgRh2?/KGk1Bg!j@XW+H-*:Ain$HN`=`
%OO]h_hL+>%b.^UFXGD<+;H>NFd^u0Tm0&^NP*ep(CQ9I"T*Gcq&,6_E3=Xai(/HH")T;LsSL[62\U'!'2h:7qZ1PoRrsjHmDVhYf
%@C$efi,J3QRWN3i;!9kqR9iY>r"O:(W;)H>+W\V+(hMO1qX`S>)IBKoi[@Q6#]i-8Pr@-Kd[R%aiWjQ6"9<%sihU3I%_>,Md.[n\
%9F)q!q%?RM1SMD!c_+I$:)u3jqd;$gAb0;4=,o<jNhDARV7-4eb+&JN_2O&0pOhlB+u?Ufo@+i/:50<<6Ja`>Ci6kT-_Pj9)m[@&
%"\Nj,9e_kO@;U![Xr?S.MnXV;[4&u:=A3b5+lQk</!Nm$+N#8HVH`.M7XXQ/gGe7?FrQJdU'8Ht0e*\]a7j[m_oJM."dpuu)!uFg
%B+$^$A_AdZ.=:T=$!AJ)EO-0,>O4F5F[d-2*7?W[`@+igK*cX>^IMkDm+YYsMGWngUh#OAPcm6P=QC:5VCK/9%<^F"Dh%O5Y,-gM
%Oeq^:apD[R;7]T2%SkLo>k5CASMC^c3c2'*YXik,h/INrh9$h/>D,BeQ,-9`*fXF9AU.-&>hV;FpI7'.H+`N18V@DYdDg\b^6*]<
%DjTRe`]FumA98.k=2/(rgq,j8jT9fp]h;Z5YLqU8iK05NMMPjb>gY8!/ZDqJ9j9bre2QhT<(H6!Uo5nS#;A6i_'l!69X[GF(eC[U
%q%XT<H`pQ1EOHa&(DO"3kK[1#d$_u>"#Rt.A(Qu@BV0a13U;^hUGO%FEEGO.eQUdq%4':qp/,p:QP'g8Z-D@gf5_jBMks"d\:g1Q
%cml.)@NfMnV0/>@P>_)pSZsnL7T[d;o\s^th)=QMQu:_*fe,>&;iI`fY##V%EH5k7/K8A<B-UuY%f+nlftQM]C8T^,32W2.Xr80Y
%8(o1W\282el7dsgVYGeS\Ig`e/ruUSPlou1kN%lNSsROci7().9]Y6X?/tnKWm9r2=7i&T)h!8_9mVh4r"c=o^R*2gAn%"!C2a/i
%hB?C(fg0D##7a7WWX+mKHOoFW`"*pP_e>Igj*UM?mZEr#ID]m5lAfNUp@^kk!B32O%r\(*F1D@'AEo-e_NZ4.j26%5k6+bd;kQgj
%#:*k+5^b4Y^rsdL;S;jW'H%/*N'tfYrF2tD7[K&IXZa;$PFcg=*`#)ECMB5]pGr,lDs5@9dI2=!@Po=2=.MlmV.!U&$BZl,akW^:
%<A'r\F(]r?kP7nbl'RZee.P)Ia5setG(/t_dhA^m9F"CZ\ml\rq?,5ZS'S\,=kC@ckWg0)@XeZ!P!A2uY\^K^j[g_&?$Z&/+@=fl
%0d"Vdj70#?BcI?cg%DA"WN=>k#G`VjRC1`BNmgQPO_C.=GB>+u9W*)4Y"E>o8CtPF:8UJ-p^m;]3]V6Y2QLhlO)j=4[c6<]3o-4<
%=ik$$#*fi-@1E9@e#%Re?7&M`PngY@lG9b,B_fr5,R3,i9MmEok>Q5TD`H4ViiI+a>akVoIm.EL]Z-->IGjD/H=im7ag'\>$m5oY
%mbXT&DBI[;[Dq\Sb,EhX8F(8h4Bb=="u>$Bh"#DuQ'<:@9rdW88H5auf3q&rH/OB8qOebIX.tcL1<AS[0tl7^SZG@mh1pP'j^F.>
%%i=X`n/>&42j';k=Nn=p$)*>h`IX#].39/1P<`=P4"[,$BZQcX!Yp)B>Ihu)PA%OMfq6KqMT3]&>+Ldg,8HKB\!*<'a5sS#N&/FT
%#Gc")qS=!o2(js8HHQl\Qh1iV_;#n8F\fT=^"jRK!<VKt3M_U(-`)CTCJ[^&8kXBhk%qAMaR00_8[T""ai_4<,StI:<T5q><@qaS
%a1mfSdKL"(UYIa=3Jd_VUKW;EiM8AE49N<$5eZr!AeFN=XE=fjVif9&Frgj=2@siCH([*MHmMUW&a2$MRL(%S%(tQaZ9XJq[.2"*
%@iUJkE2!DuGDgVOMBh3^<4WSL](s(0>Lmq\htG94Y?#!r<=[M:`HN[]J7,#WA&;W!2o*[M/65VqO@Z8UNJPLXrH+FNEYt,S`tV6J
%e;_\e'Z<us3eLO3HtUG"0YldPD\$Bci2rjig*X.B(A@n<FWSt,X#Y#71>sF%X:nd5S2'rtc.'f_*0qTD(;2"9UBG!T/@qR]*4r9n
%C<r#/h7:nY:%s@q"3;6nB?.K6AeVX?lDY"\qVE(P6^aN6Y0^q8a:F.bjF)AXE:EX$`Vc-Prd*uKo',rMRFTc65.p::B#q+GPChHj
%BBAqh,0'8JjT-ie5D,4UU5ARriT2Zi"PFj'q#g1TMmt0eK%Q;^D$EQ))E"([>:-=Edj.I,+9u:&+NJ!qR!`$i-UMDnPb?S6Fl+'Q
%*t/>%Rd)moP"-,:o/0"bEjm0`VZ\EZ(3I=;lc_j&>>!6fq2%58D2JS7.4/]Q-Sg@NI3L6[>XA2d$M+Kn3X<@P)i7KNTK\!i$'J>^
%<A-:?lt/&q=>jDT5O$n[KDM:$TAQ'P,,C+9!;=QqfpKh%*_j@'Ri#%UH3.b\&PC*#E2\m6N6393o8@1]3pL^e=A_UXj_,8.eR^nM
%,a1p+D\#^#77Ddrp]g6)B-sl;Nn*IXY@c:T;mTfEO.#iGfOb$RceL+XT>DZK>_hdB!s/"2-jRH'4,E9j4tr-i[S3ZUJU(Nh>$8rb
%9Q8T`\mj^*Ko"Pcr!hs-]qbZi"I@Cb&"P#"'U-.UQVXS>qq3\Q*-iWfQF"K_Xq5Mtkd4_Y.;B`\,F!4Ma]r`<$iW$e(AEo5P8A%(
%G)QS%81L9pHMsg&%8YIl+I.3'Yd:N?j<O30<"9<-[EP&knPKpX2B[Z<cqJ3c#lWTAkClV9V6"2)a^9l7a+58)Q.d8+6`r$Ok5d?X
%LGRlk]]X&[FN%?GJ>q(P,5,$h@$I4R@iTLILBkLgO[6M,i5M<#<GNAgJC[em3o;DaN@EIPc=Il"\>IJk99L(l?mgT)3#Qr3827LC
%;XJD=39_qg"VoDdJ/(Dp,b@t!ECg%eKFlK=J99D\j)K[MCks+*N#`M?s1el9P7.+^U`0I))/&#=KmM6Ib=cb'Z1G;an+u$BNiMb+
%N@Rf"SU=ck$<R4hNWWA3iH7M4-6\g&U[M<rOD`2aE+]\ErS8Ok]05cqgI$c4L%2CQ?dA?J$UGSXJUS%''QH=;*g:qX^=,TCm7@<F
%>;jK-ZlIq<-P=lMiEqTfjD`S\QrnJOkI8-eWs:]f0e!T5dfWQ#IY7gminnH`C[=>bJl?-(Hm3oJB]#E;L>8f/gI3$-r"^k/\5.AV
%!h8<4Y\S?t3OV@bG@.8h2n3'55%RaZaB6F0K4<OLoOiP[VL.<iT+cTkA?)+3]hk7YnskFde`F3U%TVUeOEOL.+7)7E2#BTYf<G1W
%5Ut7'ZNZ$^s,RB_QQ6.alO_uC<sA>Ch3qcpUIDoGm#[LHSHAA\U#42iD-Doe#)BA*._uV=b?_NUE]n<Ppk-Q-?Tk2kE#(QaA'T]#
%1-PKELhT@(J^uEr7(0A6N@]<9]f.S4,9T'j0-J@:2lYsjMP!@`Ym1K%bf\F(8kSkRVF+5,qO!"2"Z:%r.!1C\R-/`',-g/jUbSh]
%C@gU[Y3+V`nbb7Zf[CTU0Z6NS-mQgUNFbj5+_q_/^tO@,'m-R(&r!um`7BPD]6`rb`FoFWIO,XPGZ]K@)Bq&r3VGhb:,Hs5GTB9_
%;Q7H@h6gS!l\dF+F#kc3[r;5mEo$[2ZJR.\oQ^g,fmH1qr;j_=\7C.!dRTFc`s;co9UASFJMRG.-TiS`3@B(:6Yqs<RosjFgTGi%
%)-ui.otp#sj;Vk<&,Sf,&^1?0/,it9i/hG=`DI*g(5U\`-Ge_J;XFJtaJh*Z;6u0-4ij?jkB"qR+/6;#h^3#`6O0nO&@UX^kWp8n
%fKIUK'HMtJZqsT]!NA%om%B@tC+:5Si^RWN:s:kdXJ84OWIZlS=2JtH^(A=&ahpCiRII-^hb;cR1MGgh@1Bu+YEY6$[!6=\2\qk2
%1#fV^5?]6/G90+YkdOE'95H/&;W69S\;;rK"HW0,l11&@@9:Z+Ckp-CL.E\'hU2C<2p'!/%<SOWQ"gKCLQJe.#9_tFTlj3++oWY!
%3F]*9o++cPRA;f--BDZs<(%_!k_,L`ksOL*FZiUP/-kn%guF6\FO]7nd/7QH)GqZP0-R?53@IjVi<A_%XGJ<W=%_"VRkBp"pfFpV
%kVE"KSqcZ;ioP9?&"S^XX=(^dD-0]N#ef@5Ug^*g)'_M9b1<6(P4q,-Pttd]G8R1l.k9QL24U=:"Agn7[q.P^i0aW7eoY=T8h$$*
%B(/2e6X4n%9WTY8>?O?.#WY^`7*%(Ano\N_OgR9P@S^P0Z3_lgDkuE4=I%Ft=ZWhW8LS`WW)),H4dssbAV?M4[&^XGBu$pg&T2,X
%1\\nb"Z-FNQmYF8<Y$3!;%mZm@kM'^d.6AIAh#/qG\E%9n.ZbiLXn;D9MYj(Ut7cV*d'7-N(PU18[4+O@hOh4jENnCmhPR;9=hC*
%"ujn_phT]$LJQ'oNMW>09q$ZnG_rdJda+L*ebYaZ'GDD8"CMsI]l'7m#(1c0BiV1M"&iii(<fWMisQDh8c0e%Q^r;b.;=&Ma.)`E
%?>?V+9M?81B5\><_(fHW!oYj:8.Ife$^kUXW1?93(-Ah.1dG&]&(5%aj4N(;-%tPN!(W[XIJIVD9]MLJ.2j`EA>FMT_d5>WRK-rL
%UC(bQ<S.$Ve.^J^LJboFBWf.k>dQ*="YgJ.@nLJU3I0"WgXH:TA@1?eWua5sbkn9*DgUM[:f9^c!/k]YP5mf$//ODLbncWL,I6O.
%o5L9)fUaA`;L3#6lrdH#R7WTOM+SJf6d9#1/C@1_IBncV)&>ao:"U1b;1b)Nb4K<M]bKGDTa0`JIFY(q^V@0F9@Hf*a"oS#\"jV?
%;'2(X*(aG!:""L@8L4DpX$nFeA0R!>.L]6FJ-p&$Yo+uRC[<D3WS0e*4,;FR+<,a6#QnAAnSM?T6>+1mDH,H0Wnn=\6d\>a7[OXA
%ObJ9I\P^^_41_\@6t''2_&,NljGuS%3>KSB'PQDEFurAI_EjMhZ3sC+N'(im3l/%K/Y-&_l\Oa6[m#[uDqPdRAW)M7m_3AaFC./\
%f/!\"/gA(W%m@mh2eK]i0W?k^U5U]0;@3`J8Bg?orDcl%OQo51D6p`*c$`&h84&)i@h%8(iO5D#0\J*'S[[.WAGDrC4tO>^0EGj4
%1D)TMpj"g2r?@gb*B9ECV_oI\.ZibO&KhqtB+>IpM)9*q9uUMR0%qL[-AIiU3Os]!W?H?M9JfBp'eoEJ13&4m*J:-A0hMY;?)7^,
%;pdqAX.E.M57_/c4<5W(KAiYM0%ndu-#DTR7?L_#'WVGPBF>Z"Sl/;*J/DF9W3ZjEV;dV890+W\RPg`,T9r"MKNV[WUY=5WO!HRn
%Qg.(l2UgSm+6mlH1V[]'RkB$aKq1(Oe4\#BHh%Jt@]'7l9G:^0S.*i!2$t6Q>VBG6c-=<fM9n5ZA0!aPWM83A.N!r7Y&C&1$N4,S
%Sum>BNBbHQf8n=%U#JRdRb=l2!e\$iH@hq.=lFMARjm(r'^jss>]9':)S`ns![;\IS^Kb9AAf%q[LgPM1)@4V[6U*$0ORCO-Xu@G
%K6-[PnS9B>K3V<m^ZNc[qIV=+>>+Rrq/:WECM`Ko;YerNEO>lh/@^B)WsIK_M%F$SX+&GMDHu6on#dS:\&bbA4-SpY=6,8iE'P.+
%1l[&SHWZ9[4W?;**.X,%ak_6@UgW?l25s51;P0Ak06<>2T$P(6JeH3G%B'O)PMFNE1@"AEQ0O<R"@e-+dEI)oLLe$/OP]JbXRFR"
%Q,a'RS#1fW;API`)ACL-nkUZU9b2WC1_UJF8c"*se%>u9)9Fc1'GYt0GQ`9l9r'fVM$5Y0j;1T$=N6]NmX"QXY8]++$d1X=]STNM
%.P,]]X*X]`@TD;,@1@qCcSu.8YP5a'.?Ug[>?0%[3+bn'D3BqhbOrdU<4^,uASEsDA@h'XA-J51DCuZS".4rY.O<%FQY6#OR23T6
%k]T%+eF-oISpI-r&&UK%oGeQ+/\VEHYMSS7q``Bp(dq'aaaR\2:PS\ppnd!@`jA+#keXptWlm<uE,_7^*(O^t0_5GSgW^ZcFqePT
%K*R]Z!@S$^/dm%_Fs:b)!*0IN3p:!b^$&Wn_;(t?=0>d'H"['*l.hH0XG(<N>=IM.)Sf;dNgX.Q@WV^X>9'LgMS:(B,_+Q^QZs\g
%Kr(DCRhc$&\p_sQ8Ws1i#[LIW6"\+?2:j>O?:pYDLF$_#C#f7OQN9]WY?BD<a:_t),uU4IE5Ak^RAuITa:8!J@8YI5K8$!kq([VJ
%,LBf^*K[M&gC2X5Fge_Y)!bSX6+Dc[0,rJG,<JS\!`'X"a$;bS`,@UgK>4n6DlkWmaf=mPiF?f<HrJK$bEReRoqg^Rl*nj&?SA:&
%-k=[/9^C@^H3WG4\%<-\VC'f1;[*6M)9ke$JO&6:8=b;7@BXK?9@f\.fSs!PAMt6/!qip55c;r9b[B<Lh^gY2'#E];<Am-N*"$Es
%;;d$/WYj]h"J%TiQj2iV.k$+1p6G(8Q3?VE::NR%Y$H6c+=7.?Bd(8B/T:[=r<.Oi/oV';lWE[l_J4<bjPV:H?3C$6ZHKRbdD<sn
%18]]T'8Q%.qL#Wkb;L-$f:g]ESCAY`dm$pL]P3U(i.6h'/l_Yl@<sd;\"bo7;J-PH"!unkVJ<3j#;OtX+>2^`Lg;`Sni/h.BG^J5
%f.G&[*[h:E<,3CC*lNaMqPRfl5&5`\&p#/!]YZu+2U'rrllCfMdUS<2?j9YO7'.)g6$Csrh]6Lh'OMOR3*5EpEI7QZiqAMRN<HC(
%PIW$GH[NJCH7j6XaG#1SW=UL^I]%`C6Pc#F4L]/TA$l;RkDu(j]u2./5jl^+Wi4R[-!]]S`R5\$qUM%)($`D2>F=$u(::FbGI=VY
%7%L"d]$]hP3KH3@WWS4n(/dT87C#tpS\I-3$[.TaX]CAl!aDXGX)4Pl(AtC%=2[]ilYu@M3lQ4-9.A<QMGZ]P"?QetIhe5+H9*-s
%QmJ9c..K,hadm(Js02pgBt!r>FNfg>`okJi55QleO4I]SATH8E0ujTYckp!65Yh=[Te^.>jn4Z(_gu#g%raPF)W"T'1VJ)./cYhA
%>5i_`j4@+.+:uQ8+e&fq3\E/E'b-`MLcodY2+i"!BU*&@#`YXke[h$$)Z!F>QAu(Y!^/")R8t#mRI0"RAla)OKeY.A8iNW%n$4;B
%5'N]^WuCVG0Xak&kjF&jbhSn!UI(ajOnDIXT$CUTkMRr2`5^\,o^2*LfuqAqXFbdHp'M<k>o-B@,U=48&RZF#3%EU(6l.T%KEc&.
%I@G\eM#,^A+^Yoi5Gea02_%Sna4@=<YZP&e6lG(JYnRatlYNsH=4L8_7'J%e6pOnqM@`Fs<Rg?/B&&>k^6SA?RU#N,=J#[B:8niF
%*`Ad8Qj+E13.l:/32#<-01bb(!S+bV.GtEh/YXf8,bcc*-CRe+^S[E[nR!$U7N8;7%mN&:*(%sYg(U"sa'_m&1t>m$^-.#JIT(,I
%/<mQUF2?l&f-hfbnHs"d)XD4eD*+3#>0;L=Jm*)R6<2;IBEuMBY/3&^+SIjh:"M=s'Y-SpVUs<3Fg'7BW.G4uCt'KhE>==H*XIDr
%3;auVV]H+ZA\UsoVB%HG9-Xfs=q]jT>VQ/7,IB^-=9)O/NcS<"!T:DoDO^=d6Xnu$bpN>#YAPh&G9$BG\^3#u6AVcfY!#sc5UYhQ
%ir3L?hb1p57Zh@WJS.ZS!<WXJ;6C[_(j$g!UW)4;R?ci0m=dS4J;VW"0U2;LNa%II"0F.ug(mMf=\tq)#a*;/'uMEA1*DD8Pj2m8
%:eFZ/XRi^WjK;+b@"TVhe5"&9D.ljNVjjj+#3eFp5T%1NTfh1?Voem?Rm65/[h"+5(N\c_V+CBSZ:;Gm)7>2S-_XLo69\<_^@:g:
%h/johcijqZ.o7%5LQ-#JS:^`.dRaZ0PgV'5PgGZi`S_+VK@`g'jUVNsdna.:Et:_U=^uQ>:KRX[&'4M1qn0>U,Es3gXM0XbniIRc
%(bR((-sO!?H+&N.$I*091,;?J26d@g#5TBRcor3d['/-cV2q)]^[%>tn,3P2M3joEW]cm$f,38@k36F_/dO_-U.AP(Aj,fi-1e'`
%0M+g90HChXNOD:hM6q(uEVY+2n\]7B`&OT,i,`u*#)%U$[#4,J#..EEH>U\e.r2DH^+<kFNN-m8/6.o<FBE09DTu@i'4R6?HN_9)
%c6NJ*E_0U;2meS)PuDM@V:h*2<Z\a(;[/<r3,HlNEYJV(fm>Ij0rYLL.n@5/p<M9WrF1K.,!?U$]."=>8uS!g8g_ihA1"!PLIi%0
%[X+"t0!?869g#=T%Y#Am,+0b2<F%rr/cl0:!]pQ!.qFO7R5g*o0-H;`>5?E>]Z\Z:cT?nN^DcEEne&:pc;qIB_RXfr:qXqCgV\1E
%1KLL:PWa\[j*)4WMG3*#[X-N'?\?G*i7-:%[d>Zn.m3$T&o.)mR_gLO]-HAlWJ\::)80/tmR#Y`6(N4Hs(n-QQp[\Sf44,nOi_b:
%7VZqH*@?`*B(aSfTTG<@3G\8(Y9u>Nea7h?U]\DbQ;[@E=H3P[N9I`JGE>pA:*+2O3;?)L9=IrRPUYLN3i4i1orLm&`cPuY]jltq
%k,V&Y*D/seYjH<'riDP)JGK]._9CR;]:GFk;3_b8g^3#m_ugmX-jNQc4[2UOM@61^$8`WLd37-I<#ceAD]_(R,&4i]Gud/OK[%l*
%A2fcgD2*U!>F&4<LpCIl-*6<mm\.CMW@q%,%/.Rir9;0YqH1#q=.`j7>af^/L]YDpIS*P!XY%=:+j-l!b$1@_T[JT<CGCIkX-Fp]
%0S-ZdQN9[dFM!c!&0CXV+.L-)ME>[U4p$m"()*3B5UB;P[ak;0:+m3e)p7!cXo%/_2fHtr<QBpU*;9HY99;5XhT7,@JO-,jb";/@
%k@LL\PYgDINQnd>NUJe'o5i1JTi*higT<@RPP->Me`b>*k>S8L(RNjiGN*m_ZW]7l[qg;2aG#)$b3EM\dR#"I[NnIXO(C%u715e5
%c8Lop859k](?uo6/3hNoiD$j1;=Y<oLM%SYJI!;lqaU!:``OZJ'146kjX*bH,C6`6^?oP:(sWkjZce-0(n[fZ#u7?/'>WX&69C5*
%I<n-`X<jFio5#!D!/L&FND*?O7]Yl3Ujpk9+*;E!c%VALi[dm/LpR!h60.dOdI5Yp$]q5AI'O_UWNL&-AcaIpRK_bjL_?V0EMDo.
%C8JsHR(9EgS9sZ,6[di#G63!F"j16O^fk^P]d\&Qs/CMGWbWj#Dd&aS-JFcu9]ghs-m<jE$*AY&nfZ$.*@+'%=AP/Y:$>"9%#F!U
%`PoHR,HE03/o*pi;LSUnq`&a6;=WR.jia;caL,d8"_n!'jFrB]#.4I1@O$6?>*t(j8Ra8KHMq"QPlp<q]*20/c06g:[or7T#s+OF
%2O%J.a0>7@6n;ijhmCsOZ[Nh/l1)M/X5-#=O8_BDq9T*,nbZ[Cr;#=1!<2JkhuDr]J,B'=s7=^#5QBb.r95lls753^n,N;uXHPmJ
%a75eYrTWJes71[>rT>9[rT/P/qu6bMS'DuPn:uMmQiI&Gs6uY,$rJ\~>
%AI9_PrivateDataEnd
